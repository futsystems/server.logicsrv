<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TradingLib.API</name>
    </assembly>
    <members>
        <member name="P:TradingLib.API.Trade.id">
            <summary>
            id of trade
            </summary>
        </member>
        <member name="P:TradingLib.API.Trade.Account">
            <summary>
            成交所属交易帐号
            </summary>
        </member>
        <member name="P:TradingLib.API.Trade.xDate">
            <summary>
            成交日期
            </summary>
        </member>
        <member name="P:TradingLib.API.Trade.xTime">
            <summary>
            成交时间
            </summary>
        </member>
        <member name="P:TradingLib.API.Trade.Symbol">
            <summary>
            合约
            </summary>
        </member>
        <member name="P:TradingLib.API.Trade.LocalSymbol">
            <summary>
            本地合约编号 用于多交易所时 合约字段冲突时 本地合约唯一标识
            </summary>
        </member>
        <member name="P:TradingLib.API.Trade.oSymbol">
            <summary>
            symbol assocated with this order,
            </summary>
        </member>
        <member name="P:TradingLib.API.Trade.Side">
            <summary>
            成交方向
            </summary>
        </member>
        <member name="P:TradingLib.API.Trade.xSize">
            <summary>
            成交数量
            </summary>
        </member>
        <member name="P:TradingLib.API.Trade.UnsignedSize">
            <summary>
            交易数量绝对值
            </summary>
        </member>
        <member name="P:TradingLib.API.Trade.xPrice">
            <summary>
            成交价格
            </summary>
        </member>
        <member name="P:TradingLib.API.Trade.OffsetFlag">
            <summary>
            开平标志
            </summary>
        </member>
        <member name="P:TradingLib.API.Trade.HedgeFlag">
            <summary>
            投机 套保标识
            </summary>
        </member>
        <member name="P:TradingLib.API.Trade.Commission">
            <summary>
            手续费
            </summary>
        </member>
        <member name="P:TradingLib.API.Trade.Profit">
            <summary>
            平仓盈亏
            </summary>
        </member>
        <member name="P:TradingLib.API.Trade.Exchange">
            <summary>
            交易所
            </summary>
        </member>
        <member name="P:TradingLib.API.Trade.SecurityType">
            <summary>
            品种类型
            </summary>
        </member>
        <member name="P:TradingLib.API.Trade.SecurityCode">
            <summary>
            品种 以字符串形式给出 当有oSymbol时候统一从oSymbol对应的字段进行取值
            </summary>
        </member>
        <member name="P:TradingLib.API.Trade.Currency">
            <summary>
            货币
            </summary>
        </member>
        <member name="P:TradingLib.API.Trade.isValid">
            <summary>
            是否有效
            </summary>
        </member>
        <member name="P:TradingLib.API.Trade.isFilled">
            <summary>
            是否已经被成交过
            </summary>
        </member>
        <member name="P:TradingLib.API.Trade.IsEntryPosition">
            <summary>
            该成交是否是开仓
            开仓为True
            平仓为False
            </summary>
            <returns></returns>
        </member>
        <member name="P:TradingLib.API.Trade.PositionSide">
            <summary>
            判定的持仓方向
            正向开仓或者反向平仓则仓位方向为true代表longposition
            反向开仓或者正向平仓则仓位方向为false代表shortpostion
            </summary>
        </member>
        <member name="P:TradingLib.API.Trade.PositionOperation">
            <summary>
            标记该成交的性质 开仓 加仓 平仓 减仓
            </summary>
        </member>
        <member name="P:TradingLib.API.Trade.Broker">
            <summary>
            获得该委托通过哪个交易通道发出
            </summary>
        </member>
        <member name="P:TradingLib.API.Trade.BrokerLocalOrderID">
            <summary>
            Broker端 本地委托编号
            系统有2种方式将成交与委托联系起来
            1.近端委托编号进行关联 自己按一定方式维护唯一编号,成交端发送成交回报时按该编号关联委托
            2.远端委托编号进行关联 由成交端在委托回报中设定远端委托编号,成交端发送成交回报时候按该编号关联委托
            </summary>
        </member>
        <member name="P:TradingLib.API.Trade.BrokerRemoteOrderID">
            <summary>
            Broker端 远端委托编号
            </summary>
        </member>
        <member name="P:TradingLib.API.Trade.BrokerTradeID">
            <summary>
            Broker端的成交编号 由Broker按一定规则赋值
            </summary>
        </member>
        <member name="P:TradingLib.API.Trade.TradeID">
            <summary>
            成交编号 由系统内TradeID生成器 统一赋值 保证日内唯一
            </summary>
        </member>
        <member name="P:TradingLib.API.Trade.OrderSeq">
            <summary>
            委托流水号
            </summary>
        </member>
        <member name="P:TradingLib.API.Trade.OrderRef">
            <summary>
            客户端委托引用
            </summary>
        </member>
        <member name="P:TradingLib.API.Trade.OrderSysID">
            <summary>
            委托交易所编号
            </summary>
        </member>
        <member name="P:TradingLib.API.Trade.FatherID">
            <summary>
            父委托编号
            </summary>
        </member>
        <member name="P:TradingLib.API.Trade.Breed">
            <summary>
            委托分解源
            </summary>
        </member>
        <member name="T:TradingLib.API.QSEnumPosOperation">
            <summary>
            仓位操作类型 开仓 平仓 加仓 减仓
            </summary>
        </member>
        <member name="T:TradingLib.API.SecurityType">
            <summary>
            Stock, Option, Future, Currency Forward, Forward, FOP, Warrant, ForEx, Index, Bond
            </summary>
        </member>
        <member name="T:TradingLib.API.QSEnumResumeStatus">
            <summary>
            数据恢复状态
            </summary>
        </member>
        <member name="T:TradingLib.API.QSEnumCompareType">
            <summary>
            规则集所使用的比较规则
            </summary>
        </member>
        <member name="T:TradingLib.API.QSEnumClearCentreStatus">
            <summary>
            清算中心状态
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumClearCentreStatus.CCINIT">
            <summary>
            清算中心初始化
            </summary>
        </member>
        <!-- 对于成员“F:TradingLib.API.QSEnumClearCentreStatus.CCRESTORE”忽略有格式错误的 XML 注释 -->
        <member name="F:TradingLib.API.QSEnumClearCentreStatus.CCOPEN">
            <summary>
            清算中心开启,可以进行交易处理
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumClearCentreStatus.CCCLOSE">
            <summary>
            清算中心关闭
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumClearCentreStatus.CCSETTLE">
            <summary>
            清算中心结算
            </summary>
        </member>
        <member name="T:TradingLib.API.QSEnumTickType">
            <summary>
            Tick数据类别,用于区分不同的tick数据,减少tick数据的重复发送
            </summary>
        </member>
        <member name="T:TradingLib.API.StopOffsetType">
            <summary>
            止损 止盈方式
            </summary>
        </member>
        <member name="T:TradingLib.API.ProfitOffsetType">
            <summary>
            止损 止盈方式
            </summary>
        </member>
        <member name="T:TradingLib.API.QSEnumPositionOffsetType">
            <summary>
            止盈与止损方式
            </summary>
        </member>
        <member name="T:TradingLib.API.QSEnumDebugLevel">
            <summary>
            枚举日志输出级别
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumInfoColor.INFOWHITE">
            <summary>
            白色
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumInfoColor.INFOREAD">
            <summary>
            红色信息
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumInfoColor.INFOBLUE">
            <summary>
            蓝色信息
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumInfoColor.INFOYELLOW">
            <summary>
            黄色信息
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumInfoColor.INFOGRAY">
            <summary>
            灰色
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumInfoColor.INFOGREEN">
            <summary>
            绿色
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumInfoColor.INFODARKRED">
            <summary>
            红色
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumAvabileFundStrategy.UnPLInclude">
            <summary>
            
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumAvabileFundStrategy.UnPLExclude">
            <summary>
            
            </summary>
        </member>
        <member name="T:TradingLib.API.QSEnumMarginStrategy">
            <summary>
            持仓保证金算法中策略
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumMarginStrategy.LastPrice">
            <summary>
            最新价
            持仓保证金会按最新价格变动而发生变化
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumMarginStrategy.PositionCost">
            <summary>
            持仓成本
            当日开仓按开仓价格，隔夜仓结算后按昨结算来计算持仓保证金
            保证金金额在当日不发生变化
            </summary>
        </member>
        <member name="T:TradingLib.API.PositionField">
            <summary>
            order of fields in position response message
            </summary>
        </member>
        <member name="T:TradingLib.API.Const">
            <summary>
            系统常数类
            用于设置系统运行时相关参数
            </summary>
        </member>
        <member name="F:TradingLib.API.Const.TASKFREQ">
            <summary>
            任务调度扫描频率
            每隔多少毫秒扫描一次任务列表
            </summary>
        </member>
        <member name="F:TradingLib.API.Const.IPREC">
            <summary>
            integer precision
            </summary>
        </member>
        <member name="F:TradingLib.API.Const.IPRECV">
            <summary>
            inverse integer precision
            </summary>
        </member>
        <member name="F:TradingLib.API.Const.TPStartNum">
            <summary>
            信息数起步检查,当某个客户端发送信息超过多少条时,进行流控检查
            </summary>
        </member>
        <member name="F:TradingLib.API.Const.TPCheckNum">
            <summary>
            当启动流控检查后,检查多少条信息来确定流控速度
            </summary>
        </member>
        <member name="F:TradingLib.API.Const.TPRejectValue">
            <summary>
            当TP值大于多少时,拒绝客户端发送的消息
            </summary>
        </member>
        <member name="F:TradingLib.API.Const.TPStopValue">
            <summary>
            当TP值低于多少时,
            </summary>
        </member>
        <member name="F:TradingLib.API.Const.SOCKETREPLAYTIMEOUT">
            <summary>
            在查询服务端是否有服务存在时,通过HelloServer来确认服务端服务存在,设定helloserver回报延迟
            </summary>
        </member>
        <member name="F:TradingLib.API.Const.SENDHEARTBEATMS">
            <summary>
            多少秒内没有收到服务端消息,则请求心跳回报,用于检测服务端是否存活 这里增加时间间隔到30秒
            </summary>
        </member>
        <member name="F:TradingLib.API.Const.HEARTBEATDEADMS">
            <summary>
            在多少个请求间隔内没有得到服务端的心跳请求回报,则认为与服务端的连接丢失,客户端会尝试重新建立连接
            </summary>
        </member>
        <member name="F:TradingLib.API.Const.DEFAULTWAIT">
            <summary>
            默认检查服务器心跳回报间隔 20MS(心跳维护线程的刷新频率,每5MS检查上次服务器心跳时间)
            </summary>
        </member>
        <member name="F:TradingLib.API.Const.HEARTBEATPERIOD">
            <summary>
            默认向服务端发送心跳信息间隔 30秒(每30秒告诉服务器,客户端在运行)
            </summary>
        </member>
        <member name="F:TradingLib.API.Const.RECONNECTDELAY">
            <summary>
            断开连接后多少秒尝试连接一次服务器 默认5秒尝试一次连接
            </summary>
        </member>
        <member name="F:TradingLib.API.Const.RECONNECTTIMES">
             <summary>
            尝试连接次数
             </summary>
        </member>
        <member name="F:TradingLib.API.Const.CLIENTDEADTIME">
            <summary>
            客户端死亡时间,如果在多少秒内,没有收到客户端消息,则认为客户已经死亡,需要主动清理客户端列别以及SessionLoger中的数据库信息
            2个heartbeatperiod内 如果没有收到客户端的心跳信息,则认为连接失效
            </summary>
        </member>
        <member name="F:TradingLib.API.Const.CLEARDEADSESSIONPERIOD">
            <summary>
            多少时间进行一次dead client清理,4个心跳间隔周期进行一次dead client 清除
            </summary>
        </member>
        <member name="T:TradingLib.API.SymbolBasket">
            <summary>
            合约列表对象用于维护和管理一组合约
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumPacketType.UNKNOWN">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumPacketType.REQUEST">
            <summary>
            客户端过来提交上来的请求
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumPacketType.RSPRESPONSE">
            <summary>
            服务端向某个客户端应答返回
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumPacketType.NOTIFYRESPONSE">
            <summary>
            通知类返回 通知某个交易帐号的状态
            比如交易帐号同时有多个客户端登入,则需要向多个客户端发送通知
            多个具有查看某个交易帐号的管理员登入管理端，则需要同时向这些管理端发送通知
            交易客户端通过Account寻找对应客户端
            管理客户端通过Account寻找有权限的管理客户端
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumPacketType.LOCATIONNOTIFYRESPONSE">
            <summary>
            设定通知类型为定向地址通知
            </summary>
        </member>
        <member name="T:TradingLib.API.IPacket">
            <summary>
            通讯消息Message用于系统底层通讯
            Package基于Message构成了具体消息的逻辑结构
            </summary>
        </member>
        <member name="M:TradingLib.API.IPacket.Deserialize(System.String)">
            <summary>
            序列化字符串到对象
            </summary>
            <param name="packetstr"></param>
        </member>
        <member name="M:TradingLib.API.IPacket.Serialize">
            <summary>
            将对象内容序列化成字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.IPacket.ToString">
            <summary>
            输出string用于打印
            </summary>
            <returns></returns>
        </member>
        <member name="P:TradingLib.API.IPacket.PacketType">
            <summary>
            对应的逻辑包类别
            </summary>
        </member>
        <member name="P:TradingLib.API.IPacket.FrontID">
            <summary>
            前置ID
            </summary>
        </member>
        <member name="P:TradingLib.API.IPacket.ClientID">
            <summary>
            请求数据包客户端Client
            </summary>
        </member>
        <member name="P:TradingLib.API.IPacket.Data">
            <summary>
            获得消息具体内容
            </summary>
        </member>
        <member name="P:TradingLib.API.IPacket.Type">
            <summary>
            对应的消息类型
            </summary>
        </member>
        <member name="P:TradingLib.API.IPacket.Content">
            <summary>
            对应的消息内容
            </summary>
        </member>
        <member name="T:TradingLib.API.PositionDetail">
            <summary>
            持仓明细
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionDetail.Account">
            <summary>
            交易帐号
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionDetail.OpenDate">
            <summary>
            开仓日期
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionDetail.OpenTime">
            <summary>
            开仓时间
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionDetail.Settleday">
            <summary>
            结算日 表明该持仓明细记录属于哪个结算日
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionDetail.Side">
            <summary>
            方向 多或空
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionDetail.IsHisPosition">
            <summary>
            是否是历史持仓
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionDetail.Volume">
            <summary>
            数量
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionDetail.OpenPrice">
            <summary>
            开仓价格
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionDetail.TradeID">
            <summary>
            成交编号
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionDetail.LastSettlementPrice">
            <summary>
            昨结算价
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionDetail.SettlementPrice">
            <summary>
            今结算价
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionDetail.CloseAmount">
            <summary>
            平仓金额
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionDetail.CloseVolume">
            <summary>
            平仓量
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionDetail.HedgeFlag">
            <summary>
            投机套保标识
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionDetail.oSymbol">
            <summary>
            合约信息
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionDetail.Exchange">
            <summary>
            交易所
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionDetail.Symbol">
            <summary>
            合约
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionDetail.SecCode">
            <summary>
            品种信息
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionDetail.Margin">
            <summary>
            投资者保证金
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionDetail.CloseProfitByDate">
            <summary>
            盯市平仓盈亏
             SUM（平昨量 *（平仓价 - 昨结算价）* 合约乘数）+SUM（平今量 *（平仓价 - 开仓价）* 合约乘数） -- 多头
             SUM（平昨量 *（昨结算价 - 平仓价）* 合约乘数）+SUM（平今量 *（开仓价 - 平仓价）* 合约乘数） -- 空头
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionDetail.CloseProfitByTrade">
            <summary>
            逐笔平仓盈亏 
            SUM（平仓量 * （平仓价 - 开仓价）* 合约乘数） -- 多头
            SUM（平仓量 * （开仓价 - 平仓价）* 合约乘数） -- 空头
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionDetail.PositionProfitByDate">
            <summary>
            浮动盈亏 盯市
            今仓 (开仓价格-结算价)*手数*乘数
            
            在结算过程中 盯市浮动盈亏会计入结算单并反映在帐户权益上
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionDetail.PositionProfitByTrade">
            <summary>
            浮动盈亏 逐笔
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionDetail.Broker">
            <summary>
            接口Token如果是接口侧的平仓明细则有BrokerToken字段
            分帐户侧没有Broker
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionDetail.Breed">
            <summary>
            数据来源
            1.分帐户侧
            2.接口侧
            3.路由侧
            </summary>
        </member>
        <member name="T:TradingLib.API.OrderField">
            <summary>
            Ordering of fields in SENDORDER and ORDERNOTIFY messages
            </summary>
        </member>
        <member name="P:TradingLib.API.Tick.Symbol">
            <summary>
            symbol for tick
            </summary>
        </member>
        <member name="P:TradingLib.API.Tick.Date">
            <summary>
            tick date
            </summary>
        </member>
        <member name="P:TradingLib.API.Tick.Time">
            <summary>
            tick time in 24 format (4:59pm => 1659)
            </summary>
        </member>
        <member name="P:TradingLib.API.Tick.Datetime">
            <summary>
            date and time represented as long, eg 8:05pm on 4th of July:
            200907042005.
            this is not guaranteed to be set.
            </summary>
        </member>
        <member name="P:TradingLib.API.Tick.Depth">
            <summary>
            depth of last bid/ask quote
            </summary>
        </member>
        <member name="P:TradingLib.API.Tick.Size">
            <summary>
            size of last trade
            </summary>
        </member>
        <member name="P:TradingLib.API.Tick.Trade">
            <summary>
            trade price
            </summary>
        </member>
        <member name="P:TradingLib.API.Tick.Exchange">
            <summary>
            trade exchange
            </summary>
        </member>
        <member name="P:TradingLib.API.Tick.BidPrice">
            <summary>
            bid price
            </summary>
        </member>
        <member name="P:TradingLib.API.Tick.BidSize">
            <summary>
            normal bid size (size/100 for equities, /1 for others)
            </summary>
        </member>
        <member name="P:TradingLib.API.Tick.StockBidSize">
            <summary>
            tick.bs*100 (only for equities)
            </summary>
        </member>
        <member name="P:TradingLib.API.Tick.BidExchange">
            <summary>
            bid exchange
            </summary>
        </member>
        <member name="P:TradingLib.API.Tick.AskPrice">
            <summary>
            offer price
            </summary>
        </member>
        <member name="P:TradingLib.API.Tick.AskSize">
            <summary>
            normal ask size (size/100 for equities, /1 for others)
            </summary>
        </member>
        <member name="P:TradingLib.API.Tick.StockAskSize">
            <summary>
            tick.os*100 (only for equities)
            </summary>
        </member>
        <member name="P:TradingLib.API.Tick.AskExchange">
            <summary>
            ask exchange
            </summary>
        </member>
        <member name="P:TradingLib.API.Tick.symidx">
            <summary>
            index of symbol associated with this tick.
            this is not guaranteed to be set
            </summary>
        </member>
        <member name="P:TradingLib.API.Tick.UpperLimit">
            <summary>
            涨停价
            </summary>
        </member>
        <member name="P:TradingLib.API.Tick.LowerLimit">
            <summary>
            跌停价
            </summary>
        </member>
        <member name="T:TradingLib.API.QSEnumTickContentType">
            <summary>
            定义了行情传输过程中的内容类别
            根据不同的内容可以解析出不同的行情内容
            避免了每次都发送相同的内容 比如高开低收等不经常变化的变量
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumManagerType.ROOT">
            <summary>
            超级管理员
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumManagerType.AGENT">
            <summary>
            代理商
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumManagerType.ACCOUNTENTER">
            <summary>
            财务人员角色
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumManagerType.RISKER">
            <summary>
            风控管理员角色
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumManagerType.MONITER">
            <summary>
            观察员
            </summary>
        </member>
        <member name="P:TradingLib.API.RouterItem.ID">
            <summary>
            全局序号
            </summary>
        </member>
        <member name="P:TradingLib.API.RouterItem.priority">
            <summary>
            优先级
            </summary>
        </member>
        <member name="P:TradingLib.API.RouterItem.RouteGroup">
            <summary>
            路由组ID 所属路由组
            </summary>
        </member>
        <member name="P:TradingLib.API.RouterItem.Vendor">
            <summary>
            实盘帐号ID
            </summary>
        </member>
        <member name="P:TradingLib.API.RouterItem.rule">
            <summary>
            接受委托规则
            </summary>
        </member>
        <member name="P:TradingLib.API.RouterItem.Active">
            <summary>
            是否激活
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumRuleType.OrderRule">
            <summary>
            委托风控规则
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumRuleType.AccountRule">
            <summary>
            帐户风控规则
            </summary>
        </member>
        <member name="M:TradingLib.API.IRule.FromRuleItem(TradingLib.API.IRuleItem)">
            <summary>
            从RuleItem进行初始化设置
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:TradingLib.API.IRule.ID">
            <summary>
            全局ID
            </summary>
        </member>
        <member name="P:TradingLib.API.IRule.Enable">
            <summary>
            标记规则是否有效
            </summary>
        </member>
        <member name="P:TradingLib.API.IRule.Value">
            <summary>
            变量参考值
            </summary>
        </member>
        <member name="P:TradingLib.API.IRule.Compare">
            <summary>
            逻辑关系 大于,小于,等于
            </summary>
        </member>
        <member name="P:TradingLib.API.IRule.SymbolSet">
            <summary>
            该规则所应用品种集合字符串 以','分开
            </summary>
        </member>
        <member name="P:TradingLib.API.IRule.RuleDescription">
            <summary>
            生成规则的描述,人可以阅读并理解
            </summary>
        </member>
        <member name="P:TradingLib.API.Settlement.Account">
            <summary>
            交易帐号
            </summary>
        </member>
        <member name="P:TradingLib.API.Settlement.SettleDay">
            <summary>
            结算日
            </summary>
        </member>
        <member name="P:TradingLib.API.Settlement.SettleTime">
            <summary>
            结算时间
            </summary>
        </member>
        <member name="P:TradingLib.API.Settlement.RealizedPL">
            <summary>
            平仓盈亏
            </summary>
        </member>
        <member name="P:TradingLib.API.Settlement.UnRealizedPL">
            <summary>
            浮动盈亏 盯市盈亏
            </summary>
        </member>
        <member name="P:TradingLib.API.Settlement.Commission">
            <summary>
            手续费
            </summary>
        </member>
        <member name="P:TradingLib.API.Settlement.CashIn">
            <summary>
            入金
            </summary>
        </member>
        <member name="P:TradingLib.API.Settlement.CashOut">
            <summary>
            出金
            </summary>
        </member>
        <member name="P:TradingLib.API.Settlement.LastEquity">
            <summary>
            昨日权益
            </summary>
        </member>
        <member name="P:TradingLib.API.Settlement.NowEquity">
            <summary>
            当前权益
            </summary>
        </member>
        <member name="P:TradingLib.API.Settlement.Confirmed">
            <summary>
            结算确认
            </summary>
        </member>
        <member name="T:TradingLib.API.OrderAction">
            <summary>
            委托操作接口
            删除或者修改委托
            </summary>
        </member>
        <member name="P:TradingLib.API.OrderAction.ActionFlag">
            <summary>
            委托操作标识
            </summary>
        </member>
        <member name="P:TradingLib.API.OrderAction.Account">
            <summary>
            交易帐号
            </summary>
        </member>
        <member name="P:TradingLib.API.OrderAction.OrderID">
            <summary>
            服务端委托唯一编号
            </summary>
        </member>
        <member name="P:TradingLib.API.OrderAction.FrontID">
            <summary>
            前置编号
            </summary>
        </member>
        <member name="P:TradingLib.API.OrderAction.SessionID">
            <summary>
            会话编号,每次建立的会话都有一个唯一的SessionID分配给客户端,同时客户端还绑有UUID用于通讯寻址
            通过组合SessionID和OrderRef就可以定位某个委托
            或者通过ExchOrderID来进行唯一定位
            </summary>
        </member>
        <member name="P:TradingLib.API.OrderAction.OrderRef">
            <summary>
            客户端委托引用
            </summary>
        </member>
        <member name="P:TradingLib.API.OrderAction.Exchagne">
            <summary>
            交易所编号
            </summary>
        </member>
        <member name="P:TradingLib.API.OrderAction.OrderExchID">
            <summary>
            交易所委托编号类似于CTP的OrderSysID
            </summary>
        </member>
        <member name="P:TradingLib.API.OrderAction.Symbol">
            <summary>
            合约
            </summary>
        </member>
        <member name="P:TradingLib.API.OrderAction.RequestID">
            <summary>
            请求 ID
            </summary>
        </member>
        <member name="M:TradingLib.API.IConnecter.Start">
            <summary>
            启动服务
            </summary>
        </member>
        <member name="M:TradingLib.API.IConnecter.Stop">
            <summary>
            停止服务
            </summary>
        </member>
        <member name="P:TradingLib.API.IConnecter.Token">
            <summary>
            连接标识
            </summary>
        </member>
        <member name="P:TradingLib.API.IConnecter.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:TradingLib.API.IConnecter.IsLive">
            <summary>
            当前服务状态是否有效
            </summary>
        </member>
        <member name="E:TradingLib.API.IConnecter.Connected">
            <summary>
            连接成功事件
            </summary>
        </member>
        <member name="E:TradingLib.API.IConnecter.Disconnected">
            <summary>
            连接断开事件
            </summary>
        </member>
        <member name="M:TradingLib.API.IDataFeed.RegisterSymbols(TradingLib.API.SymbolBasket)">
            <summary>
            订阅一组合约的行情,指定该组合约通过哪个数据通道进行发送
            用于兼容FastTickSrv 在FastTick模式下
            行情服务器对接所有行情通道接口,在接受客户端的行情订阅时需要明确指定某组合约通过哪个通道进行订阅
            </summary>
            <param name="symbols"></param>
            <param name="type"></param>
        </member>
        <member name="E:TradingLib.API.IDataFeed.GotTickEvent">
            <summary>
            获得行情回报
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumTaskType.SPECIALTIME">
            <summary>
            特定时间,比如在几点几分几秒执行某个任务
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumTaskType.CIRCULATE">
            <summary>
            循环往复,比如每隔多少时间执行某个任务
            </summary>
        </member>
        <member name="T:TradingLib.API.Domain">
            <summary>
            域接口
            </summary>
        </member>
        <member name="P:TradingLib.API.Domain.ID">
            <summary>
            域ID
            </summary>
        </member>
        <member name="P:TradingLib.API.Domain.Name">
            <summary>
            域名称
            </summary>
        </member>
        <member name="P:TradingLib.API.Domain.LinkMan">
            <summary>
            联系人
            </summary>
        </member>
        <member name="P:TradingLib.API.Domain.Mobile">
            <summary>
            手机号码
            </summary>
        </member>
        <member name="P:TradingLib.API.Domain.QQ">
            <summary>
            QQ号码
            </summary>
        </member>
        <member name="P:TradingLib.API.Domain.Email">
            <summary>
            邮箱
            </summary>
        </member>
        <member name="P:TradingLib.API.Domain.DateExpired">
            <summary>
            过期日
            </summary>
        </member>
        <member name="P:TradingLib.API.Domain.DateCreated">
            <summary>
            创建日
            </summary>
        </member>
        <member name="P:TradingLib.API.Domain.Super">
            <summary>
            是否是超级域
            </summary>
        </member>
        <member name="P:TradingLib.API.Domain.Dedicated">
            <summary>
            独立安装标识
            </summary>
        </member>
        <member name="P:TradingLib.API.Domain.AccLimit">
            <summary>
            帐户数目限制
            </summary>
        </member>
        <member name="P:TradingLib.API.Domain.RouterGroupLimit">
            <summary>
            路由组数量限制
            </summary>
        </member>
        <member name="P:TradingLib.API.Domain.RouterItemLimit">
            <summary>
            路由组内路由项目数量限制
            </summary>
        </member>
        <member name="P:TradingLib.API.Domain.VendorLimit">
            <summary>
            实盘帐户数量限制
            </summary>
        </member>
        <member name="P:TradingLib.API.Domain.InterfaceList">
            <summary>
            接口列表
            </summary>
        </member>
        <member name="P:TradingLib.API.Domain.FinSPList">
            <summary>
            配资服务计划列表
            </summary>
        </member>
        <member name="P:TradingLib.API.Domain.Module_Agent">
            <summary>
            代理模块
            </summary>
        </member>
        <member name="P:TradingLib.API.Domain.Module_SubAgent">
            <summary>
            是否支持多级代理
            </summary>
        </member>
        <member name="P:TradingLib.API.Domain.Module_FinService">
            <summary>
            配资模块
            </summary>
        </member>
        <member name="P:TradingLib.API.Domain.Module_PayOnline">
            <summary>
            在线出入金模块
            </summary>
        </member>
        <member name="P:TradingLib.API.Domain.Router_Live">
            <summary>
            实盘路由
            </summary>
        </member>
        <member name="P:TradingLib.API.Domain.Router_Sim">
            <summary>
            模拟路由
            </summary>
        </member>
        <member name="P:TradingLib.API.Domain.Misc_InsertTrade">
            <summary>
            调试插入成交
            </summary>
        </member>
        <member name="P:TradingLib.API.Domain.CFG_SyncVendor_ID">
            <summary>
            同步实盘帐户ID
            </summary>
        </member>
        <member name="T:TradingLib.API.SecurityFamily">
            <summary>
            证券品种簇
            用于定义某一个证券品种
            </summary>
        </member>
        <member name="P:TradingLib.API.SecurityFamily.Code">
            <summary>
            品种代号
            </summary>
        </member>
        <member name="P:TradingLib.API.SecurityFamily.Name">
            <summary>
            品种名称
            </summary>
        </member>
        <member name="P:TradingLib.API.SecurityFamily.Currency">
            <summary>
            货币类别
            </summary>
        </member>
        <member name="P:TradingLib.API.SecurityFamily.Type">
            <summary>
            品种类别
            </summary>
        </member>
        <member name="P:TradingLib.API.SecurityFamily.Exchange">
            <summary>
            所属交易所
            </summary>
        </member>
        <member name="P:TradingLib.API.SecurityFamily.Multiple">
            <summary>
            乘数
            </summary>
        </member>
        <member name="P:TradingLib.API.SecurityFamily.PriceTick">
            <summary>
            最小价格变动
            </summary>
        </member>
        <member name="P:TradingLib.API.SecurityFamily.Tradeable">
            <summary>
            是否可交易
            </summary>
        </member>
        <member name="P:TradingLib.API.SecurityFamily.UnderLaying">
            <summary>
            底层证券
            某个衍生品证券会依赖于底层证券
            比如沪深300股指期货依赖于沪深300，沪深300股指期权依赖于沪深300
            沪深300不可交易，而起衍生品证券可以进行交易
            </summary>
        </member>
        <member name="P:TradingLib.API.SecurityFamily.EntryCommission">
            <summary>
            开仓手续费
            </summary>
        </member>
        <member name="P:TradingLib.API.SecurityFamily.ExitCommission">
            <summary>
            平仓手续费
            </summary>
        </member>
        <member name="P:TradingLib.API.SecurityFamily.Margin">
            <summary>
            保证金比例
            </summary>
        </member>
        <member name="P:TradingLib.API.SecurityFamily.ExtraMargin">
            <summary>
            额外保证金字段
            用于在基本保证金外提供额外质押
            </summary>
        </member>
        <member name="P:TradingLib.API.SecurityFamily.MaintanceMargin">
            <summary>
            过夜保证金,如果需要过夜则需要提供Maintance保证金
            </summary>
        </member>
        <member name="P:TradingLib.API.SecurityFamily.MarketTime">
            <summary>
            交易品种的交易时间段
            </summary>
        </member>
        <member name="P:TradingLib.API.SecurityFamily.IsMarketTime">
            <summary>
            是否是开市时间
            </summary>
        </member>
        <member name="P:TradingLib.API.SecurityFamily.IsFlatTime">
            <summary>
            是否在强平时间段内
            </summary>
        </member>
        <member name="T:TradingLib.API.Order">
            <summary>
            Order
            </summary>
        </member>
        <member name="M:TradingLib.API.Order.Fill(TradingLib.API.Order)">
            <summary>
            try to fill order against another order
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.Order.Fill(TradingLib.API.Tick)">
            <summary>
            try to fill order against trade
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.Order.Fill(TradingLib.API.Tick,System.Boolean,System.Boolean)">
            <summary>
            try to fill order against trade or bid/ask
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.Order.Fill(TradingLib.API.Tick,System.Boolean)">
            <summary>
            try to fill order as OPG order
            </summary>
            <param name="t"></param>
            <param name="fillOPG"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.API.Order.id">
            <summary>
            系统内部编号long
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.Account">
            <summary>
            account to place inventory if order is executed
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.Date">
            <summary>
            委托提交日期 date in  date format (2010/03/05 = 20100305)
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.Time">
            <summary>
            委托提交时间 time including seconds 1:35:07PM = 133507
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.Symbol">
            <summary>
            合约字头
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.LocalSymbol">
            <summary>
            本地合约编号 用于多交易所时 合约字段冲突时 本地合约唯一标识
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.oSymbol">
            <summary>
            合约对象
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.TimeInForce">
            <summary>
            TIF设置 MOC,IOC 等委托扩展指令
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.OffsetFlag">
            <summary>
            开平标志
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.HedgeFlag">
            <summary>
            投机/套保标识
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.Size">
            <summary>
            signed size of order (-100 = sell 100)
            委托数量根据成交情况会发生变化 带方向
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.TotalSize">
            <summary>
            初始委托总数量 带方向
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.FilledSize">
            <summary>
            已成交数量 绝对值
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.UnsignedSize">
            <summary>
            unsigned size of order
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.Side">
            <summary>
            true if buy, otherwise sell
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.LimitPrice">
            <summary>
            price of order. (0 for market)
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.StopPrice">
            <summary>
            stop price if applicable
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.trail">
            <summary>
            trail amount if applicable
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.Exchange">
            <summary>
            交易所
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.SecurityType">
            <summary>
            品种类别
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.Currency">
            <summary>
            货币类别
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.OrderSource">
            <summary>
            该委托触发来源
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.ForceClose">
            <summary>
            是否强平
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.ForceCloseReason">
            <summary>
            强平原因
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.Status">
            <summary>
            委托状态
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.Comment">
            <summary>
            order comment
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.isFilled">
            <summary>
            whether order has been filled
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.isLimit">
            <summary>
            limit order
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.isStop">
            <summary>
            stop order
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.isTrail">
            <summary>
            trail order
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.isMarket">
            <summary>
            market order
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.isValid">
            <summary>
            order is valid
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.OrderSeq">
            <summary>
            委托流水号 由系统统一分配
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.OrderRef">
            <summary>
            客户端委托引用
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.OrderSysID">
            <summary>
            委托交易所编号 用于实现CTP字段 服务端通过将OrderSeq赋值给OrderExchID实现
            与交易所字段组合使用 形成委托一ID
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.FrontIDi">
            <summary>
            标注该委托来自于哪个前置
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.SessionIDi">
            <summary>
            标注该委托来自于哪个客户端
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.RequestID">
            <summary>
            客户端的请求ID 
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.Broker">
            <summary>
            该委托是通过哪个成交接口发出
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.BrokerLocalOrderID">
            <summary>
            Broker端 本地委托编号
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.BrokerRemoteOrderID">
            <summary>
            Broker端 远端委托编号
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.FatherBreed">
            <summary>
            委托分解父源
            表明该委托是分解的那个源的委托
            如果分帐户侧委托在路由出分解则 则成交侧分解的就是路由侧的委托
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.FatherID">
            <summary>
            父委托编号
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.Breed">
            <summary>
            委托分解源
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.CopyID">
            <summary>
            本地CopyID
            </summary>
        </member>
        <member name="P:TradingLib.API.Order.IsEntryPosition">
            <summary>
            该成交是否是开仓
            </summary>
            <returns></returns>
        </member>
        <member name="P:TradingLib.API.Order.PositionSide">
            <summary>
            仓位操作方向
            代表是多头操作还是空头操作
            </summary>
        </member>
        <member name="T:TradingLib.API.QSEnumOffsetFlag">
            <summary>
            标识委托的开平标志
            作用:
            原来委托没有开平标志,开平操作完全是根据当前持仓情况进行,不具备排他性检验。比如客户端当前提交平仓操作，底层是一个与当前
            持仓相反的普通委托,客户端多次提交后会造成 平仓的同时开出反向仓位的问题。如果加入开平标识,则在orderrouter处理中就可以进行判断
            
            关于Enum byte 不改变原有Enum的顺序 btye强制转换后 会以对应设定数字或默认数字进行转换
            </summary>
        </member>
        <member name="M:TradingLib.API.IBroker.SendOrder(TradingLib.API.Order)">
            <summary>
            向Broker发送Order
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:TradingLib.API.IBroker.CancelOrder(System.Int64)">
            <summary>
            向broker取消一个order
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:TradingLib.API.IBroker.GotTick(TradingLib.API.Tick)">
            <summary>
            用于交易通道中需要有Tick进行驱动的逻辑,比如委托触发等
            </summary>
            <param name="k"></param>
        </member>
        <member name="M:TradingLib.API.IBroker.GetPositionMetric(System.String)">
            <summary>
            获得某个合约的持仓状态统计数据
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.IBroker.GetPositionAdjustment(TradingLib.API.Order)">
            <summary>
            计算开仓委托提交后预计持仓增加量
            返回0标识不增加或则减少
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.IBroker.Start(System.String@)">
            <summary>
            启动 并输出msg
            </summary>
            <param name="msg"></param>
        </member>
        <member name="E:TradingLib.API.IBroker.GotFillEvent">
            <summary>
            当有成交时候回报客户端
            </summary>
        </member>
        <member name="E:TradingLib.API.IBroker.GotOrderEvent">
            <summary>
            委托正确回报时回报客户端
            </summary>
        </member>
        <member name="E:TradingLib.API.IBroker.GotOrderErrorEvent">
            <summary>
            委托错误回报
            </summary>
        </member>
        <member name="E:TradingLib.API.IBroker.GotOrderActionErrorEvent">
            <summary>
            委托操作错误回报
            </summary>
        </member>
        <member name="E:TradingLib.API.IBroker.GotCancelEvent">
            <summary>
            撤单正确回报时回报客户端
            </summary>
        </member>
        <member name="E:TradingLib.API.IBroker.GetSymbolTickEvent">
            <summary>
            请求获得某个symbol的Tick快照数据
            </summary>
        </member>
        <member name="P:TradingLib.API.IBroker.Orders">
            <summary>
            获得成交接口所有委托
            </summary>
        </member>
        <member name="P:TradingLib.API.IBroker.Trades">
            <summary>
            获得成交接口所有成交
            </summary>
        </member>
        <member name="P:TradingLib.API.IBroker.Positions">
            <summary>
            获得成交接口所有持仓
            </summary>
        </member>
        <member name="P:TradingLib.API.IBroker.PositionMetrics">
            <summary>
            返回所有持仓状态统计数据
            </summary>
        </member>
        <member name="M:TradingLib.API.Position.Adjust(TradingLib.API.Trade)">
            <summary>
            用成交数据更新持仓状态
            </summary>
            <param name="newFill"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.Position.Adjust(TradingLib.API.PositionDetail)">
            <summary>
            用持仓明细更新持仓状态 用于从隔夜持仓初始化持仓状态
            </summary>
            <param name="newPositiondetail"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.Position.GotTick(TradingLib.API.Tick)">
            <summary>
            持仓响应行情更新
            </summary>
            <param name="k"></param>
        </member>
        <member name="P:TradingLib.API.Position.Account">
            <summary>
            交易帐户
            </summary>
        </member>
        <member name="P:TradingLib.API.Position.Symbol">
            <summary>
            合约
            </summary>
        </member>
        <member name="P:TradingLib.API.Position.AvgPrice">
            <summary>
            持仓均价
            </summary>
        </member>
        <member name="P:TradingLib.API.Position.Size">
            <summary>
            持仓数量
            </summary>
        </member>
        <member name="P:TradingLib.API.Position.UnsignedSize">
            <summary>
            持仓数量 绝对值
            </summary>
        </member>
        <member name="P:TradingLib.API.Position.isLong">
            <summary>
            是否是多头
            </summary>
        </member>
        <member name="P:TradingLib.API.Position.isShort">
            <summary>
            是否是空头
            </summary>
        </member>
        <member name="P:TradingLib.API.Position.isFlat">
            <summary>
            是否为无头寸
            </summary>
        </member>
        <member name="P:TradingLib.API.Position.FlatSize">
            <summary>
            平仓数量
            </summary>
        </member>
        <member name="P:TradingLib.API.Position.isValid">
            <summary>
            是否有效
            </summary>
        </member>
        <member name="P:TradingLib.API.Position.oSymbol">
            <summary>
            对应的合约对象 可以通过合约对象获得更多相关数据
            </summary>
        </member>
        <member name="P:TradingLib.API.Position.DirectionType">
            <summary>
            该持仓数据所描述的持仓类别
            Positon提现了某个类型的持仓的当前状态，可以单独维护多头持仓，空头持仓，或者是净持仓
            </summary>
        </member>
        <member name="P:TradingLib.API.Position.ClosedPL">
            <summary>
            平仓盈亏点数
            </summary>
        </member>
        <member name="P:TradingLib.API.Position.UnRealizedPL">
            <summary>
            浮动盈亏点数
            </summary>
        </member>
        <member name="P:TradingLib.API.Position.LastPrice">
            <summary>
            最新价格
            </summary>
        </member>
        <member name="P:TradingLib.API.Position.Highest">
            <summary>
            开仓以来最高价
            </summary>
        </member>
        <member name="P:TradingLib.API.Position.Lowest">
            <summary>
            开仓以来最低价
            </summary>
        </member>
        <member name="P:TradingLib.API.Position.SettlementPrice">
            <summary>
            当日结算价格 用于收盘后获得结算价格 进行持仓结算
            </summary>
        </member>
        <member name="P:TradingLib.API.Position.LastSettlementPrice">
            <summary>
            昨日结算价格
            </summary>
        </member>
        <member name="P:TradingLib.API.Position.Trades">
            <summary>
            返回日内所有成交数据
            </summary>
        </member>
        <member name="P:TradingLib.API.Position.PositionDetailYdRef">
            <summary>
            历史持仓明细 不做具体业务操作
            </summary>
        </member>
        <member name="P:TradingLib.API.Position.PositionDetailTotal">
            <summary>
            当前持仓明细 包括昨日与今日
            </summary>
        </member>
        <member name="P:TradingLib.API.Position.PositionDetailYdNew">
            <summary>
            昨日持仓明细更新 如果当日有平仓 且昨日持仓明细发生变化 通过这里的明细提现
            </summary>
        </member>
        <member name="P:TradingLib.API.Position.PositionDetailTodayNew">
            <summary>
            当日新开仓持仓明细
            </summary>
        </member>
        <member name="P:TradingLib.API.Position.PositionCloseDetail">
            <summary>
            当日平仓明细
            </summary>
        </member>
        <member name="E:TradingLib.API.Position.NewPositionCloseDetailEvent">
            <summary>
            新的平仓明细生成事件
            </summary>
        </member>
        <member name="P:TradingLib.API.Position.OpenAmount">
            <summary>
            开仓金额
            </summary>
        </member>
        <member name="P:TradingLib.API.Position.OpenVolume">
            <summary>
            开仓数量
            </summary>
        </member>
        <member name="P:TradingLib.API.Position.CloseAmount">
            <summary>
            平仓金额
            </summary>
        </member>
        <member name="P:TradingLib.API.Position.CloseVolume">
            <summary>
            平仓数量
            </summary>
        </member>
        <member name="T:TradingLib.API.QSEnumPositionDirectionType">
            <summary>
            持仓回报持仓标识
            表面该持仓回报的持仓类型
            
            </summary>
        </member>
        <member name="M:TradingLib.API.BarList.newTick(TradingLib.API.Tick)">
            <summary>
            add tick to the bar
            </summary>
            <param name="k"></param>
        </member>
        <member name="M:TradingLib.API.BarList.newPoint(System.String,System.Decimal,System.Int32,System.Int32,System.Int32)">
            <summary>
            add point to bar (allows for negative values)
            </summary>
            <param name="p"></param>
            <param name="time"></param>
            <param name="date"></param>
            <param name="size"></param>
        </member>
        <member name="M:TradingLib.API.BarList.Has(System.Int32,TradingLib.API.BarInterval)">
            <summary>
            check for minimum amount of bars, if they are present returns true
            </summary>
            <param name="MinBars"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.BarList.Has(System.Int32)">
            <summary>
            returns true if minimum # of bars present in interval
            </summary>
            <param name="MinBars"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.BarList.Reset">
            <summary>
            clears contents of a list, erases all data.
            </summary>
        </member>
        <member name="M:TradingLib.API.BarList.Open">
            <summary>
            gets array of opening prices for all bars in list, ordered by their index.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.BarList.Close">
            <summary>
            gets array of closing prices for all bars in list, ordered by their index.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.BarList.High">
            <summary>
            gets array of high prices for all bars in list, ordered by their index.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.BarList.Low">
            <summary>
            gets array of low prices for all bars in list, ordered by their index.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.BarList.OpenDouble">
            <summary>
            gets array of opening prices for all bars in list, ordered by their index.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.BarList.CloseDouble">
            <summary>
            gets array of closing prices for all bars in list, ordered by their index.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.BarList.HighDouble">
            <summary>
            gets array of high prices for all bars in list, ordered by their index.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.BarList.LowDouble">
            <summary>
            gets array of low prices for all bars in list, ordered by their index.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.BarList.VolDouble">
            <summary>
            gets array of volumes for all bars in list, ordered by their index.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.BarList.Date">
            <summary>
            gets array of dates for all bars in list, ordered by their index.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.BarList.Time">
            <summary>
            gets array of times for all bars in list, ordered by their index.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.BarList.Vol">
            <summary>
            gets array of volumes for all bars in list, ordered by their index.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.BarList.IntervalCount(TradingLib.API.BarInterval)">
            <summary>
            gets count of bars for a specific interval
            </summary>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.BarList.IntervalCount(System.Int32)">
            <summary>
            gets count of bars for a specific interval
            </summary>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.API.BarList.Symbol">
            <summary>
            symbol bar represents
            </summary>
        </member>
        <member name="P:TradingLib.API.BarList.First">
            <summary>
            index of first bar
            </summary>
        </member>
        <member name="P:TradingLib.API.BarList.Last">
            <summary>
            index of last bar
            </summary>
        </member>
        <member name="P:TradingLib.API.BarList.Count">
            <summary>
            count of all bars
            </summary>
        </member>
        <member name="P:TradingLib.API.BarList.RecentBar">
            <summary>
            most recently occuring bar
            </summary>
        </member>
        <member name="P:TradingLib.API.BarList.Item(System.Int32)">
            <summary>
            get a bar from list using it's index.  
            index = 0 is oldest bar.  index = Last is newest bar.
            index = -1 is one bar back.  index = -5 is 5 bars back
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.API.BarList.Item(System.Int32,TradingLib.API.BarInterval)">
            <summary>
            get a bar from list using it's index and interval
            index = 0 is oldest bar.  index = Last is newest bar.
            index = -1 is one bar back.  index = -5 is 5 bars back
            </summary>
            <param name="index"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.API.BarList.DefaultCustomInterval">
            <summary>
            default interval for bar when getting bar data (in interval units)
            </summary>
        </member>
        <member name="P:TradingLib.API.BarList.DefaultInterval">
            <summary>
            default interval for bar when getting bar data (in BarIntervals)
            </summary>
        </member>
        <member name="P:TradingLib.API.BarList.isValid">
            <summary>
            true if bar has symbol and some data
            </summary>
        </member>
        <member name="E:TradingLib.API.BarList.GotNewBar">
            <summary>
            called when new bar is created.
            this happens after first tick in the new bar.
            last full bar will have index -1
            </summary>
        </member>
        <member name="P:TradingLib.API.BarList.Intervals">
            <summary>
            gets a list of intervals available on the bar.
            </summary>
        </member>
        <member name="P:TradingLib.API.BarList.CustomIntervals">
            <summary>
            gets list of all standard and custom intervals available on the bar
            </summary>
        </member>
        <member name="T:TradingLib.API.ILocation">
            <summary>
            客户端位置
            </summary>
        </member>
        <member name="P:TradingLib.API.ILocation.FrontID">
            <summary>
            前置编号
            </summary>
        </member>
        <member name="P:TradingLib.API.ILocation.ClientID">
            <summary>
            客户端编号
            </summary>
        </member>
        <member name="T:TradingLib.API.MessageTypes">
            <summary>
            交易协议,消息信息类别
            </summary>
        </member>
        <member name="T:TradingLib.API.IAccountExp">
            <summary>
            暴露给风控规则使用的账户,避免IAccount暴露过多内部函数
            </summary>
        </member>
        <member name="T:TradingLib.API.IFinanceTotal">
            <summary>
            帐户财务信息总计接口
            </summary>
        </member>
        <member name="P:TradingLib.API.IFinanceTotal.LastEquity">
            <summary>
            上期权益
            </summary>
        </member>
        <member name="P:TradingLib.API.IFinanceTotal.NowEquity">
            <summary>
            当前权益
            </summary>
        </member>
        <member name="P:TradingLib.API.IFinanceTotal.RealizedPL">
            <summary>
            平仓利润
            </summary>
        </member>
        <member name="P:TradingLib.API.IFinanceTotal.UnRealizedPL">
            <summary>
            未平仓利润
            </summary>
        </member>
        <member name="P:TradingLib.API.IFinanceTotal.SettleUnRealizedPL">
            <summary>
            帐户当日结算盯市盈亏 以结算价来计算收盘后的浮动盈亏
            </summary>
        </member>
        <member name="P:TradingLib.API.IFinanceTotal.Commission">
            <summary>
            手续费
            </summary>
        </member>
        <member name="P:TradingLib.API.IFinanceTotal.Profit">
            <summary>
            净利
            </summary>
        </member>
        <member name="P:TradingLib.API.IFinanceTotal.CashIn">
            <summary>
            入金
            </summary>
        </member>
        <member name="P:TradingLib.API.IFinanceTotal.CashOut">
            <summary>
            出金
            </summary>
        </member>
        <member name="P:TradingLib.API.IFinanceTotal.Margin">
            <summary>
            保证金占用
            </summary>
        </member>
        <member name="P:TradingLib.API.IFinanceTotal.MarginFrozen">
            <summary>
            保证金冻结
            </summary>
        </member>
        <member name="P:TradingLib.API.IFinanceTotal.MoneyUsed">
            <summary>
            总占用资金 = 所有品种占用资金之和
            总资金使用量 = 占用保证金 + 冻结保证金
            </summary>
        </member>
        <member name="P:TradingLib.API.IFinanceTotal.TotalLiquidation">
            <summary>
            总净值 帐户当前权益=总净值
            </summary>
        </member>
        <member name="P:TradingLib.API.IFinanceTotal.AvabileFunds">
            <summary>
            帐户总可用资金=总净值 - 总资金使用量
            </summary>
        </member>
        <member name="P:TradingLib.API.IFinanceTotal.Credit">
            <summary>
            信用金额
            </summary>
        </member>
        <member name="T:TradingLib.API.IAccCal">
            <summary>
            帐户计算类公共接口
            </summary>
        </member>
        <member name="M:TradingLib.API.IAccCal.CalOrderFundRequired(TradingLib.API.Order,System.Decimal)">
            <summary>
            计算某个委托所占用资金
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.IAccCal.GetFundAvabile(TradingLib.API.Symbol)">
            <summary>
            获得某个合约的可用资金
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.IAccTradingInfo.GetPosition(System.String,System.Boolean)">
            <summary>
            获得某个合约的持仓对象
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.API.IAccTradingInfo.AnyPosition">
            <summary>
            是否有任何持仓
            </summary>
        </member>
        <member name="P:TradingLib.API.IAccTradingInfo.Positions">
            <summary>
            获得所有持仓对象
            </summary>
        </member>
        <member name="P:TradingLib.API.IAccTradingInfo.PositionsLong">
            <summary>
            多头持仓维护器
            </summary>
        </member>
        <member name="P:TradingLib.API.IAccTradingInfo.PositionsShort">
            <summary>
            空头持仓维护器
            </summary>
        </member>
        <member name="P:TradingLib.API.IAccTradingInfo.Orders">
            <summary>
            获得所有委托对象
            </summary>
        </member>
        <member name="P:TradingLib.API.IAccTradingInfo.Trades">
            <summary>
            获得所有成交对象
            </summary>
        </member>
        <member name="P:TradingLib.API.IAccTradingInfo.YdPositions">
            <summary>
            获得所有隔夜持仓数据
            </summary>
        </member>
        <member name="T:TradingLib.API.IAccOperation">
            <summary>
            帐户操作接口
            包含激活 冻结 强迫等操作
            </summary>
        </member>
        <member name="M:TradingLib.API.IAccOperation.InactiveAccount">
            <summary>
            冻结帐户
            </summary>
        </member>
        <member name="M:TradingLib.API.IAccOperation.ActiveAccount">
            <summary>
            激活帐户
            </summary>
        </member>
        <member name="M:TradingLib.API.IAccOperation.FlatPosition(TradingLib.API.QSEnumOrderSource,System.String)">
            <summary>
            强平帐户所有持仓
            </summary>
            <param name="source"></param>
            <param name="comment"></param>
        </member>
        <member name="M:TradingLib.API.IAccOperation.FlatPosition(TradingLib.API.Position,TradingLib.API.QSEnumOrderSource,System.String)">
            <summary>
            平掉某个特定持仓
            </summary>
            <param name="source"></param>
            <param name="comment"></param>
            <param name="pos"></param>
        </member>
        <member name="M:TradingLib.API.IAccOperation.CancelOrder(TradingLib.API.QSEnumOrderSource,System.String)">
            <summary>
            撤掉帐户下所有委托
            </summary>
        </member>
        <member name="M:TradingLib.API.IAccOperation.CancelOrder(System.String,TradingLib.API.QSEnumOrderSource,System.String)">
            <summary>
            撤掉帐户下某个合约的所有委托
            </summary>
            <param name="symbol"></param>
            <param name="source"></param>
            <param name="cancelreason"></param>
        </member>
        <member name="M:TradingLib.API.IAccOperation.CancelOrder(TradingLib.API.Order,TradingLib.API.QSEnumOrderSource,System.String)">
            <summary>
            撤掉帐户下的某个委托
            </summary>
            <param name="order"></param>
            <param name="source"></param>
            <param name="cancelreason"></param>
        </member>
        <member name="P:TradingLib.API.IAccountExp.ID">
            <summary>
            账户ID
            </summary>
        </member>
        <member name="P:TradingLib.API.IAccountExp.OrderRouteType">
            <summary>
            账户委托转发通道类型 模拟还是实盘
            </summary>
        </member>
        <member name="P:TradingLib.API.IAccountExp.Category">
            <summary>
            账户类型 配资客户还是交易员
            </summary>
        </member>
        <member name="P:TradingLib.API.IAccountExp.Execute">
            <summary>
            帐户激活或者冻结
            </summary>
        </member>
        <member name="P:TradingLib.API.IAccountExp.IntraDay">
            <summary>
            是否日内交易
            </summary>
        </member>
        <member name="P:TradingLib.API.IAccountExp.SettleDateTime">
            <summary>
            上次结算日
            </summary>
        </member>
        <member name="M:TradingLib.API.IAccConfig.GetCommissionConfig(TradingLib.API.Symbol)">
            <summary>
            获得某个合约的手续费设置
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="T:TradingLib.API.GenericTrackerI">
            <summary>
            generic interface that can be used with any type of tracker
            </summary>
        </member>
        <member name="M:TradingLib.API.GenericTrackerI.Clear">
            <summary>
            clears all tracked values and labels
            </summary>
        </member>
        <member name="M:TradingLib.API.GenericTrackerI.Display(System.String)">
            <summary>
            display value of a tracked value for a given label
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.GenericTrackerI.Display(System.Int32)">
            <summary>
            display tracked value for a given index
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.GenericTrackerI.getlabel(System.Int32)">
            <summary>
            get label associated with an index
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.GenericTrackerI.getindex(System.String)">
            <summary>
            get index associated with a given label
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.GenericTrackerI.addindex(System.String)">
            <summary>
            gets index associated with a given label, adding index if it doesn't exist
            (default value of index will be used)
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.GenericTrackerI.Value(System.Int32)">
            <summary>
            gets value of given index
            </summary>
        </member>
        <member name="M:TradingLib.API.GenericTrackerI.Value(System.String)">
            <summary>
            gets value of given label
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.GenericTrackerI.ValueDecimal(System.Int32)">
            <summary>
            attempts to get decimal value of index
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.GenericTrackerI.ValueDecimal(System.String)">
            <summary>
            attempts to get decimal value of a label
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.API.GenericTrackerI.Name">
            <summary>
            name of tracker
            </summary>
        </member>
        <member name="P:TradingLib.API.GenericTrackerI.Count">
            <summary>
            get total number of labels/values
            </summary>
        </member>
        <member name="P:TradingLib.API.GenericTrackerI.TrackedType">
            <summary>
            gets type of tracked values
            </summary>
        </member>
        <member name="E:TradingLib.API.GenericTrackerI.NewTxt">
            <summary>
            called when new text label is added
            </summary>
        </member>
        <member name="P:TradingLib.API.Bar.BarStartTime">
            <summary>
            开始时间
            </summary>
        </member>
        <member name="P:TradingLib.API.Bar.BarEndTime">
            <summary>
            结束时间
            </summary>
        </member>
        <member name="P:TradingLib.API.Bar.EmptyBar">
            <summary>
            该Bar是否为空
            </summary>
        </member>
        <member name="T:TradingLib.API.BarInterval">
            <summary>
            
            </summary>
        </member>
        <member name="F:TradingLib.API.BarInterval.CustomVol">
            <summary>
            custom volume bars
            </summary>
        </member>
        <member name="F:TradingLib.API.BarInterval.CustomTicks">
            <summary>
            custom tick bars
            </summary>
        </member>
        <member name="F:TradingLib.API.BarInterval.CustomTime">
            <summary>
            custom interval length
            </summary>
        </member>
        <member name="F:TradingLib.API.BarInterval.Minute">
            <summary>
            One-minute intervals
            </summary>
        </member>
        <member name="F:TradingLib.API.BarInterval.FiveMin">
            <summary>
            Five-minute interval
            </summary>
        </member>
        <member name="F:TradingLib.API.BarInterval.FifteenMin">
            <summary>
            FifteenMinute intervals
            </summary>
        </member>
        <member name="F:TradingLib.API.BarInterval.ThirtyMin">
            <summary>
            Hour-long intervals
            </summary>
        </member>
        <member name="F:TradingLib.API.BarInterval.Hour">
            <summary>
            Hour-long intervals
            </summary>
        </member>
        <member name="F:TradingLib.API.BarInterval.Day">
            <summary>
            Day-long intervals
            </summary>
        </member>
        <member name="T:TradingLib.API.IBrokerClearCentre">
            <summary>
            用于Broker  Connecter连接插件访问部分iclearcentre功能
            </summary>
        </member>
        <member name="M:TradingLib.API.IBrokerClearCentre.GetOrdersViaBroker(System.String)">
            <summary>
            返回某个交易通道的所有委托
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.IBrokerClearCentre.GetTradesViaBroker(System.String)">
            <summary>
            获得某个broker的所有成交记录(日内)
            </summary>
            <param name="broker"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.IBrokerClearCentre.SentOrder(System.Int64,TradingLib.API.QSEnumOrderBreedType)">
            <summary>
            成交接口 加载成交侧委托,需要恢复日内委托关系链
            需要找到成交侧委托的父委托,父委托有可能是路由委托也有可能是直接帐户委托
            这里需要判断然后从清算中心或路由中心获得对应的委托对象
            </summary>
            <param name="id"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.IBrokerClearCentre.SelectBrokerOrders(System.String)">
            <summary>
            获得日内成交接口的所有委托
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.IBrokerClearCentre.SelectBrokerTrades(System.String)">
            <summary>
            获得日内成交接口的所有成交
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.IBrokerClearCentre.SelectBrokerPositionDetails(System.String)">
            <summary>
            获得成交接口上个结算日所有持仓数据
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:TradingLib.API.QSEnumOrderBreedType">
            <summary>
            委托产生类别
            在设计结构中委托起源于3个地方
            1.分帐户侧，交易客户端，管理端发起的委托
            2.委托路由，委托路由如果需要将委托分拆成多个委托，则分拆后的委托属于委托路由
            3.成交侧，成交侧如果需要将委托分拆成多个委托，则分拆后的委托属于成交侧
            这里相当于是2级分解
            分帐户侧分解成路由侧，路由侧委托在成交接口侧再次进行分解
            
            成交则通过委托便后进行关联
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumOrderBreedType.ACCT">
            <summary>
            Account产生的委托
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumOrderBreedType.ROUTER">
            <summary>
            OrderRouter产生的委托
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumOrderBreedType.BROKER">
            <summary>
            Broker产生的委托
            </summary>
        </member>
        <member name="T:TradingLib.API.QSEnumDataFeedTypes">
            <summary>
            FastTickSrv中请求启动某个数据通道或者向某个数据通道请求某组合约需要指定对应的通道类型/名称
            与本地exchagne_index -> DataFeed 通过交易所编然后通过 合约的交易所来获得对应的数据通道接口进行操作不同
            在定义SecurityFamily时我们可以预先制定该合约所对应的数据通道/或者按照一定的规则来获得对应的数据通道
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumConnectorType.DataFeed">
            <summary>
            行情通道
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumConnectorType.Broker">
            <summary>
            成交通道
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumOptionSide.CALL">
            <summary>
            看涨期权
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumOptionSide.PUT">
            <summary>
            看跌期权
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumOptionSide.NULL">
            <summary>
            无
            </summary>
        </member>
        <member name="T:TradingLib.API.QSEnumOrderSource">
            <summary>
            委托来源
            </summary>
        </member>
        <member name="T:TradingLib.API.Vendor">
            <summary>
            系统内的成交帐户对象
            该对象描述了某个实盘帐户的信息，姓名 所属期货公司
            是系统内的结算实体，该对象需要配置对应的成交通道配置,用于路由系统进行交易
            </summary>
        </member>
        <member name="P:TradingLib.API.Vendor.ID">
            <summary>
            数据库编号
            </summary>
        </member>
        <member name="P:TradingLib.API.Vendor.Name">
            <summary>
            帐户姓名
            </summary>
        </member>
        <member name="P:TradingLib.API.Vendor.FutCompany">
            <summary>
            期货公司
            </summary>
        </member>
        <member name="P:TradingLib.API.Vendor.Description">
            <summary>
            描述信息
            </summary>
        </member>
        <member name="P:TradingLib.API.Vendor.LastEquity">
            <summary>
            上次结算权益
            </summary>
        </member>
        <member name="P:TradingLib.API.Vendor.Broker">
            <summary>
            成交接口
            </summary>
        </member>
        <member name="P:TradingLib.API.Vendor.MarginLimit">
            <summary>
            保证金限制
            </summary>
        </member>
        <member name="P:TradingLib.API.Vendor.Domain">
            <summary>
            域
            </summary>
        </member>
        <member name="T:TradingLib.API.PositionRound">
            <summary>
            持仓回合记录接口
            详细记录了每个交易回合的相关数据
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionRound.Account">
            <summary>
            帐户编号
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionRound.oSymbol">
            <summary>
            合约信息
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionRound.Symbol">
            <summary>
            合约
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionRound.Security">
            <summary>
            品种SecurityCode
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionRound.Type">
            <summary>
            证券品种
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionRound.Multiple">
            <summary>
            乘数
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionRound.EntryTime">
            <summary>
            入场时间
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionRound.EntrySize">
            <summary>
            开仓手数
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionRound.EntryPrice">
            <summary>
            开仓均价
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionRound.EntryCommission">
            <summary>
            开仓手续费
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionRound.ExitTime">
            <summary>
            平仓时间
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionRound.ExitSize">
            <summary>
            平仓数量
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionRound.ExitPrice">
            <summary>
            平仓均价
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionRound.ExitCommission">
            <summary>
            平仓手续费
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionRound.Highest">
            <summary>
            持仓期间最高价
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionRound.Lowest">
            <summary>
            持仓期间最低价
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionRound.Points">
            <summary>
            平均每手盈亏点数
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionRound.TotalPoints">
            <summary>
            累计盈亏点数
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionRound.Profit">
            <summary>
            盈利
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionRound.Commissoin">
            <summary>
            累计手续费
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionRound.NetProfit">
            <summary>
            净盈利
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionRound.WL">
            <summary>
            盈亏标识
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionRound.Size">
            <summary>
            交易数量
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionRound.Side">
            <summary>
            持仓方向标识
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionRound.HoldSize">
            <summary>
            当前持仓手数
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionRound.IsOpened">
            <summary>
            持仓回合是否打开
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionRound.IsClosed">
            <summary>
            持仓回合是否关闭
            </summary>
        </member>
        <member name="T:TradingLib.API.QSEnumOrderStatus">
            <summary>
            委托状态
            1.客户端向服务端发送委托 Placed,表明已经经过风控检查,并且被清算中心记录
            2.服务端将委托转发到对应的成交接口,如果对应的接口接收了委托则成交接口返回gotorder到服务端,则表明委托已经Open等待成交
            委托经过风控检验 则该委托状态变为placed 表明已提交到系统
            交易系统将经过风控的委托 通过BrokerRouter进行提交到对应成交接口,此时如果仍然为placed,同时broker需要有一定的时间来回报该委托, 如果同时有其他委托进入系统,则风控规则就会漏过该委托
            因此当系统提交委托到Broker时,委托状态就发生变化,用于标识该委托需要纳入风控保证金计算,如果Broker拒绝则释放该保证金,如果Broker接受则状态改变继续计算保证金
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumOrderStatus.Submited">
            <summary>
            委托已经通过接口正常提交,但是没有获得成交端的任何返回,成交侧可能拒绝也可能接受
            在其他系统中，如果Submited是表明该委托已经处于待成交状态,那么该状态对应于PendingSubmited
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumOrderStatus.Opened">
            <summary>
            表明委托已经被成交侧接受,处于待成交状态
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumOrderStatus.Filled">
            <summary>
            委托被全部成交
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumOrderStatus.PartFilled">
            <summary>
            委托被部分成交
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumOrderStatus.Canceled">
            <summary>
            委托被取消
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumOrderStatus.Reject">
            <summary>
            委托被拒绝
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumOrderStatus.PreSubmited">
            <summary>
            如果是系统模拟的委托,则返回预提交状态，当模拟的委托条件触发,提交到成交侧时,状态更新为Submited
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumOrderStatus.Unknown">
            <summary>
            状态未知
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionCloseDetail.Account">
            <summary>
            交易帐号
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionCloseDetail.Settleday">
            <summary>
            结算日，平仓时所在结算日
            通过交易日与结算日可以判断是今仓还是昨仓
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionCloseDetail.Side">
            <summary>
            方向
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionCloseDetail.IsCloseYdPosition">
            <summary>
            平昨仓还是平今仓
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionCloseDetail.OpenDate">
            <summary>
            开仓日期
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionCloseDetail.OpenTime">
            <summary>
            开仓时间
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionCloseDetail.OpenTradeID">
            <summary>
            开仓成交编号
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionCloseDetail.CloseDate">
            <summary>
            平仓日期
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionCloseDetail.CloseTime">
            <summary>
            平仓时间
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionCloseDetail.CloseTradeID">
            <summary>
            平仓成交编号
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionCloseDetail.OpenPrice">
            <summary>
            开仓价格
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionCloseDetail.LastSettlementPrice">
            <summary>
            昨结算价
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionCloseDetail.ClosePrice">
            <summary>
            平仓价格
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionCloseDetail.CloseVolume">
            <summary>
            平仓量
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionCloseDetail.CloseAmount">
            <summary>
            平仓金额
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionCloseDetail.CloseProfitByDate">
            <summary>
            盯市平仓盈亏金额
            平当日仓 (开仓-平仓)*手数*乘数
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionCloseDetail.CloseProfitByTrade">
            <summary>
            逐笔平仓盈亏金额
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionCloseDetail.ClosePointByDate">
            <summary>
            盯市平仓盈亏点数
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionCloseDetail.oSymbol">
            <summary>
            合约信息
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionCloseDetail.Exchange">
            <summary>
            交易所
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionCloseDetail.Symbol">
            <summary>
            合约
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionCloseDetail.SecCode">
            <summary>
            品种代码
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionCloseDetail.Broker">
            <summary>
            接口Token如果是接口侧的平仓明细则有BrokerToken字段
            分帐户侧没有Broker
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionCloseDetail.Breed">
            <summary>
            数据来源
            1.分帐户侧
            2.接口侧
            3.路由侧
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumHedgeFlag.Hedge">
            <summary>
            套保
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumHedgeFlag.Arbitrage">
            <summary>
            逃离
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumHedgeFlag.Speculation">
            <summary>
            投机
            </summary>
        </member>
        <member name="T:TradingLib.API.QSEnumAccountCategory">
            <summary>
            交易帐户类别
            </summary>
        </member>
        <member name="T:TradingLib.API.QSEnumOrderTransferType">
            <summary>
            委托单转发类型,转发到实盘交易接口或者模拟交易接口
            </summary>
        </member>
        <member name="T:TradingLib.API.TradeField">
            <summary>
            Order of fields in a TRADENOTIFY message
            </summary>
        </member>
        <member name="P:TradingLib.API.IMarketTime.Name">
            <summary>
            时间段名称
            </summary>
        </member>
        <member name="P:TradingLib.API.IMarketTime.Description">
            <summary>
            时间段描述
            </summary>
        </member>
        <member name="P:TradingLib.API.IMarketTime.IsOpenTime">
            <summary>
            是否是开市时间
            </summary>
        </member>
        <member name="P:TradingLib.API.IMarketTime.IsFlatTime">
            <summary>
            是否是在强平时间段
            </summary>
        </member>
        <member name="P:TradingLib.API.IRuleItem.ID">
            <summary>
            数据库全局ID
            </summary>
        </member>
        <member name="P:TradingLib.API.IRuleItem.RuleName">
            <summary>
            风控规则名称
            </summary>
        </member>
        <member name="P:TradingLib.API.IRuleItem.Compare">
            <summary>
            风控比较逻辑
            </summary>
        </member>
        <member name="P:TradingLib.API.IRuleItem.Value">
            <summary>
            风控参考值
            </summary>
        </member>
        <member name="P:TradingLib.API.IRuleItem.SymbolSet">
            <summary>
            品种集合
            </summary>
        </member>
        <member name="P:TradingLib.API.IRuleItem.Enable">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="P:TradingLib.API.IRuleItem.RuleType">
            <summary>
            风控规则类别
            </summary>
        </member>
        <member name="T:TradingLib.API.RouterGroup">
            <summary>
            
            </summary>
        </member>
        <member name="M:TradingLib.API.RouterGroup.GetBroker(System.String)">
            <summary>
            按token返回IBroker成交接口
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.RouterGroup.GetBroker(TradingLib.API.Order,System.Decimal)">
            <summary>
            获得默认开仓Broker
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.RouterGroup.AppendRouterItem(TradingLib.API.RouterItem)">
            <summary>
            将路由添加到路由组
            </summary>
            <param name="broker"></param>
            <param name="priority"></param>
        </member>
        <member name="M:TradingLib.API.RouterGroup.RemoveRouterItem(TradingLib.API.RouterItem)">
            <summary>
            将路由从路由组删除
            </summary>
            <param name="broker"></param>
        </member>
        <member name="P:TradingLib.API.RouterGroup.RouterItems">
            <summary>
            路由项目
            </summary>
        </member>
        <member name="P:TradingLib.API.RouterGroup.ID">
            <summary>
            全局ID
            </summary>
        </member>
        <member name="P:TradingLib.API.RouterGroup.Name">
            <summary>
            路由组名称
            </summary>
        </member>
        <member name="P:TradingLib.API.RouterGroup.Strategy">
            <summary>
            路由策略
            </summary>
        </member>
        <member name="P:TradingLib.API.RouterGroup.Domain">
            <summary>
            主域ID
            </summary>
        </member>
        <member name="T:TradingLib.API.QSEnumTimeInForce">
            <summary>
            list of accepted special order instructions
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumTimeInForce.DAY">
            <summary>
            day order
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumTimeInForce.MOC">
            <summary>
            market on close
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumTimeInForce.OPG">
            <summary>
            opening order
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumTimeInForce.IOC">
            <summary>
            immediate or cancel
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumTimeInForce.GTC">
            <summary>
            good till canceled
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumTimeInForce.PEG2MID">
            <summary>
            pegged to mid-market
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumTimeInForce.PEG2MKT">
            <summary>
            pegged to market
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumTimeInForce.PEG2PRI">
            <summary>
            pegged to primary
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumTimeInForce.PEG2BST">
            <summary>
            pegged to best
            </summary>
        </member>
        <member name="T:TradingLib.API.QSNoServerException">
            <summary>
            服务端没有应答hellserver,则触发该IP无服务异常
            </summary>
        </member>
        <member name="T:TradingLib.API.QSAsyncServerError">
            <summary>
            
            </summary>
        </member>
        <member name="T:TradingLib.API.QSClearCentreLoadSymbolTableError">
            <summary>
            
            </summary>
        </member>
        <member name="T:TradingLib.API.QSClearCentreLoadAccountError">
            <summary>
            加载账户信息异常
            </summary>
        </member>
        <member name="T:TradingLib.API.QSClearCentreResotreError">
            <summary>
            清算中心从数据库恢复交易信息异常
            </summary>
        </member>
        <member name="T:TradingLib.API.QSClearCentreSQLError">
            <summary>
            在TLServer初始化过程中发生的数据库异常
            </summary>
        </member>
        <member name="T:TradingLib.API.QSTLServerInitError">
            <summary>
            TLServer初始化异常
            </summary>
        </member>
        <member name="T:TradingLib.API.QSTLServerMQSQLError">
            <summary>
            在TLServer初始化过程中发生的数据库异常
            </summary>
        </member>
        <member name="T:TradingLib.API.QSTradingServerUpdateAccountError">
            <summary>
            更新账户状态异常
            </summary>
        </member>
        <member name="T:TradingLib.API.QSTradingServerValidAccountError">
            <summary>
            验证账户异常
            </summary>
        </member>
        <member name="T:TradingLib.API.QSTradingServerRegistSymbolError">
            <summary>
            请求市场数据异常
            </summary>
        </member>
        <member name="T:TradingLib.API.QSTradingServerCancleError">
            <summary>
            取消委托异常
            </summary>
        </member>
        <member name="T:TradingLib.API.QSTradingServerSendOrderError">
            <summary>
            发送委托异常
            </summary>
        </member>
        <member name="T:TradingLib.API.QSTradingServerBARREQUESTError">
            <summary>
            请求Bar数据异常
            </summary>
        </member>
        <member name="T:TradingLib.API.QSTradingServerRESUMEError">
            <summary>
            请求恢复交易数据异常
            </summary>
        </member>
        <member name="T:TradingLib.API.QSTradingServerQRYACCOUNTINFOError">
            <summary>
            请求查询账户信息异常
            </summary>
        </member>
        <member name="T:TradingLib.API.QSTradingServerREQCHANGEPASSError">
            <summary>
            请求修改密码异常
            </summary>
        </member>
        <member name="T:TradingLib.API.QSTradingServerQRYCANOPENPOSITIONError">
            <summary>
            查询可开仓数量异常
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumSessionType.CLIENT">
            <summary>
            交易客户端session
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumSessionType.MANAGER">
            <summary>
            管理端session
            </summary>
        </member>
        <member name="T:TradingLib.API.ISession">
            <summary>
            在扩展模块相应网络端消息时,函数调用需要提供一个支持ISession接口的对象,用于标注客户端位置并向该客户端端发送消息
            </summary>
        </member>
        <member name="P:TradingLib.API.ISession.Location">
            <summary>
            获得该会话对端地址
            </summary>
        </member>
        <member name="P:TradingLib.API.ISession.SessionType">
            <summary>
            回话类型
            </summary>
        </member>
        <member name="P:TradingLib.API.ISession.Authorized">
            <summary>
            是否已经认证授权
            </summary>
        </member>
        <member name="P:TradingLib.API.ISession.AuthorizedID">
            <summary>
            授权ID
            交易帐户授权ID为交易帐号
            管理员帐户授权ID为管理员登入ID
            </summary>
        </member>
        <member name="P:TradingLib.API.ISession.FrontIDi">
            <summary>
            前置编号 整数
            </summary>
        </member>
        <member name="P:TradingLib.API.ISession.SessionIDi">
            <summary>
            客户连接编号 整数
            </summary>
        </member>
        <member name="P:TradingLib.API.ISession.ContirbID">
            <summary>
            对应的扩展模块编号
            </summary>
        </member>
        <member name="P:TradingLib.API.ISession.CMDStr">
            <summary>
            对应的扩展模块命令
            </summary>
        </member>
        <member name="P:TradingLib.API.ISession.RequestID">
            <summary>
            对端请求编号
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionMetric.Symbol">
            <summary>
            合约
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionMetric.Token">
            <summary>
            brokertoken
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionMetric.LongHoldSize">
            <summary>
            多头持有仓位
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionMetric.ShortHoldSize">
            <summary>
            空头持仓仓位
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionMetric.LongPendingEntrySize">
            <summary>
            多头待开数量
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionMetric.LongPendingExitSize">
            <summary>
            多头待平数量
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionMetric.LongCanExitSize">
            <summary>
            多方可以平掉的数量
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionMetric.ShortPendingEntrySize">
            <summary>
            空头待开数量
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionMetric.ShortPendingExitSize">
            <summary>
            空头待平数量
            </summary>
        </member>
        <member name="P:TradingLib.API.PositionMetric.ShortCanExitSaize">
            <summary>
            空头可以平掉的数量
            </summary>
        </member>
        <member name="T:TradingLib.API.Providers">
            <summary>
            data feed and broker providers known to 
            </summary>
        </member>
        <member name="P:TradingLib.API.IExchange.EXCode">
            <summary>
            交易所代码
            </summary>
        </member>
        <member name="P:TradingLib.API.IExchange.Name">
            <summary>
            交易所名称
            </summary>
        </member>
        <member name="P:TradingLib.API.IExchange.Country">
            <summary>
            所在国家
            </summary>
        </member>
        <member name="P:TradingLib.API.IExchange.Index">
            <summary>
            交易所编号 
            国家+交易所代码
            </summary>
        </member>
        <member name="P:TradingLib.API.IExchange.Title">
            <summary>
            简称
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumRouterStrategy.Priority">
            <summary>
            优先级
            按设定的优先级顺序进行选择数字越小优先级越大
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumRouterStrategy.Stochastic">
            <summary>
            随机
            随机的从接口队列中获得可用队列
            </summary>
        </member>
        <member name="T:TradingLib.API.ILogItem">
            <summary>
            日志内容接口
            </summary>
        </member>
        <member name="M:TradingLib.API.ILogItem.ToString">
            <summary>
            生成用于显示的字符串
            </summary>
        </member>
        <member name="P:TradingLib.API.ILogItem.Time">
            <summary>
            日志产生时间
            </summary>
        </member>
        <member name="P:TradingLib.API.ILogItem.Millisecond">
            <summary>
            日志产生时的毫秒时间戳
            </summary>
        </member>
        <member name="P:TradingLib.API.ILogItem.Programe">
            <summary>
            日志发送者 说明该日志是从哪个功能模块发送
            </summary>
        </member>
        <member name="P:TradingLib.API.ILogItem.Level">
            <summary>
            日志级别 通过日志级别 我们可以进行日志过滤
            </summary>
        </member>
        <member name="P:TradingLib.API.ILogItem.Message">
            <summary>
            日志消息
            </summary>
        </member>
        <member name="T:TradingLib.API.QSEnumArgParseType">
            <summary>
            扩展调用参数解析方式
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumArgParseType.Json">
            <summary>
            将扩展请求部分所有参数以Json字符串的形式提供,被调用函数自行解析该Json字符串
            可以传递对象,通过Json反序列化可以生成对应的对象 如预先有相关对象侧可以使用该方式来进行参数传递
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumArgParseType.TNetString">
            <summary>
            TNetString 用标签字符串传递参数,通过TnetString来进行参数打包
            参数可以带有任何字符串,如果提供的参数本身没有对象进行描述,且含有,等特殊符号则
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumArgParseType.CommaSeparated">
            <summary>
            逗号分隔的方式传递参数
            调用参数较少，简单拼接就可以进行参数传递
            </summary>
        </member>
        <member name="T:TradingLib.API.Symbol">
            <summary>
            合约接口
            演示更新
            </summary>
        </member>
        <member name="P:TradingLib.API.Symbol.Symbol">
            <summary>
            合约代码
            </summary>
        </member>
        <member name="P:TradingLib.API.Symbol.TickSymbol">
            <summary>
            计价合约,异化合约不存在对应的合约行情
            需要通过底层合约获得对应的行情合约
            </summary>
        </member>
        <member name="P:TradingLib.API.Symbol.ULSymbol">
            <summary>
            底层合约用于异化合约的生成
            </summary>
        </member>
        <member name="P:TradingLib.API.Symbol.SecurityFamily">
            <summary>
            合约隶属品种
            </summary>
        </member>
        <member name="P:TradingLib.API.Symbol.EntryCommission">
            <summary>
            开仓手续费
            </summary>
        </member>
        <member name="P:TradingLib.API.Symbol.ExitCommission">
            <summary>
            平仓手续费
            </summary>
        </member>
        <member name="P:TradingLib.API.Symbol.Margin">
            <summary>
            保证金比例/保证金数额
            </summary> 
        </member>
        <member name="P:TradingLib.API.Symbol.ExtraMargin">
            <summary>
            额外保证金字段
            用于在基本保证金外提供额外质押
            </summary>
        </member>
        <member name="P:TradingLib.API.Symbol.MaintanceMargin">
            <summary>
            过夜保证金,如果需要过夜则需要提供Maintance保证金
            </summary>
        </member>
        <member name="P:TradingLib.API.Symbol.Multiple">
            <summary>
            乘数
            </summary>
        </member>
        <member name="P:TradingLib.API.Symbol.FullName">
            <summary>
            全称
            </summary>
        </member>
        <member name="P:TradingLib.API.Symbol.SecurityType">
            <summary>
            品种类别
            </summary>
        </member>
        <member name="P:TradingLib.API.Symbol.Currency">
            <summary>
            货币类别
            </summary>
        </member>
        <member name="P:TradingLib.API.Symbol.Tradeable">
            <summary>
            是否可交易
            </summary>
        </member>
        <member name="P:TradingLib.API.Symbol.IsTradeable">
            <summary>
            综合判断获得是否可交易标识
            </summary>
        </member>
        <member name="P:TradingLib.API.Symbol.IsMarketTime">
            <summary>
            检查是否是市场开市时间
            </summary>
        </member>
        <member name="P:TradingLib.API.Symbol.IsFlatTime">
            <summary>
            是否在强平时间段内
            </summary>
        </member>
        <member name="P:TradingLib.API.Symbol.ExpireDate">
            <summary>
            合约到期日
            </summary>
        </member>
        <member name="P:TradingLib.API.Symbol.OptionSide">
            <summary>
            期权 方向
            </summary>
        </member>
        <member name="P:TradingLib.API.Symbol.Strike">
            <summary>
            期权中的行权价
            </summary>
        </member>
        <member name="P:TradingLib.API.Symbol.UnderlayingSymbol">
            <summary>
            底层依赖合约 比如股指期权依赖于股指期货
            </summary>
        </member>
        <member name="T:TradingLib.API.BarRequestField">
            <summary>
            Order of fields in a BARREQUEST message
            </summary>
        </member>
        <member name="T:TradingLib.API.CommissionConfig">
            <summary>
            手续费参数
            </summary>
        </member>
        <member name="P:TradingLib.API.CommissionConfig.IsValid">
            <summary>
            是否有效
            </summary>
        </member>
        <member name="P:TradingLib.API.CommissionConfig.Account">
            <summary>
            交易帐号
            </summary>
        </member>
        <member name="P:TradingLib.API.CommissionConfig.Symbol">
            <summary>
            合约
            </summary>
        </member>
        <member name="P:TradingLib.API.CommissionConfig.OpenRatioByVolume">
            <summary>
            开仓手续费 按手数
            </summary>
        </member>
        <member name="P:TradingLib.API.CommissionConfig.OpenRatioByMoney">
            <summary>
            开仓手续费 按金额
            </summary>
        </member>
        <member name="P:TradingLib.API.CommissionConfig.CloseRatioByVolume">
            <summary>
            平仓手续费 按手数
            </summary>
        </member>
        <member name="P:TradingLib.API.CommissionConfig.CloseRatioByMoney">
            <summary>
            平仓手续费 按金额
            </summary>
        </member>
        <member name="P:TradingLib.API.CommissionConfig.CloseTodayRatioByVolume">
            <summary>
            平仓手续费 按手数
            </summary>
        </member>
        <member name="P:TradingLib.API.CommissionConfig.CloseTodayRatioByMoney">
            <summary>
            平仓手续费 按金额
            </summary>
        </member>
    </members>
</doc>

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TradingLib.API.Ex</name>
    </assembly>
    <members>
        <member name="T:TradingLib.API.IMessageExchange">
            <summary>
            核心消息交换
            用于接收客户端的消息进行处理并转发成相关的操作逻辑到核心与扩展模块
            同时接受核心组件与扩展组件产生的消息回报转发给对应的客户端
            </summary>
        </member>
        <member name="M:TradingLib.API.IMessageExchange.Send(TradingLib.API.IPacket)">
            <summary>
            向某个地址的客户端发送一条消息
            </summary>
        </member>
        <member name="M:TradingLib.API.IMessageExchange.GetNotifyTargets(System.String)">
            <summary>
            获得某个交易帐户的Client对象
            </summary>
            <param name="account"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.IMessageExchange.SentRouterOrder(System.Int64)">
            <summary>
            获得某个Router分解委托
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.IMessageExchange.SendOrder(TradingLib.API.Order)">
            <summary>
            发送委托
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:TradingLib.API.IMessageExchange.CancelOrder(System.Int64)">
            <summary>
            取消委托
            </summary>
            <param name="oid"></param>
        </member>
        <member name="T:TradingLib.API.IUtil">
            <summary>
            工具类操作 系统内核暴露出来的相关操作
            </summary>
        </member>
        <member name="M:TradingLib.API.IUtil.GetAvabilePrice(System.String)">
            <summary>
            获得某个合约当前可用价格
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.IUtil.GetTickSnapshot(System.String)">
            <summary>
            获得某个合约的市场快照
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.IUtil.SendOrder(TradingLib.API.Order)">
            <summary>
            发送委托
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:TradingLib.API.IUtil.CancelOrder(System.Int64)">
            <summary>
            取消委托
            </summary>
            <param name="oid"></param>
        </member>
        <member name="T:TradingLib.API.IPlugin">
            <summary>
            插件基础接口
            系统其他插件需要继承该接口并扩展不同插件所需要实现的功能
            系统可以从IXXXXPlugin通过PluginHelper生成对应的对象,并通过IPlugin所提供的信息进行加载使其正常工作
            </summary>
        </member>
        <member name="P:TradingLib.API.IPlugin.Name">
            <summary>
            插件名称
            </summary>
        </member>
        <member name="P:TradingLib.API.IPlugin.Description">
            <summary>
            插件描述
            </summary>
        </member>
        <member name="P:TradingLib.API.IPlugin.Version">
            <summary>
            版本
            </summary>
        </member>
        <member name="P:TradingLib.API.IPlugin.Author">
            <summary>
            姓名
            </summary>
        </member>
        <member name="P:TradingLib.API.IPlugin.Compnay">
            <summary>
            公司
            </summary>
        </member>
        <member name="P:TradingLib.API.IPlugin.Id">
            <summary>
            类全名
            </summary>
        </member>
        <member name="T:TradingLib.API.IClearCentreSrv">
            <summary>
            清算中心接口
            帐户操作类接口
            所有交易信息
            成交侧交易信息
            帐户认证与出入金操作
            </summary>
        </member>
        <member name="T:TradingLib.API.IAccountOperation">
            <summary>
            定义了账户操作接口
            </summary>
        </member>
        <member name="M:TradingLib.API.IAccountOperation.InactiveAccount(System.String)">
            <summary>
            禁止某个账户进行交易
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:TradingLib.API.IAccountOperation.ActiveAccount(System.String)">
            <summary>
            激活某个交易账户 允许其进行交易
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:TradingLib.API.IAccountOperation.Accounts">
            <summary>
            获得清算中心下所有交易账户
            </summary>
        </member>
        <member name="P:TradingLib.API.IAccountOperation.Item(System.String)">
            <summary>
            返回某个交易账户,通过交易帐号
            </summary>
            <param name="accid"></param>
            <returns></returns>
        </member>
        <member name="T:TradingLib.API.ITotalAccountInfo">
            <summary>
            获得柜台系统总的交易信息
            </summary>
        </member>
        <member name="M:TradingLib.API.ITotalAccountInfo.SentOrder(System.Int64)">
            <summary>
            通过order id找到对应的Order
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.API.ITotalAccountInfo.TotalOrders">
            <summary>
            所有委托
            </summary>
        </member>
        <member name="P:TradingLib.API.ITotalAccountInfo.TotalPositions">
            <summary>
            所有持仓
            </summary>
        </member>
        <member name="P:TradingLib.API.ITotalAccountInfo.TotalTrades">
            <summary>
            所有成交
            </summary>
        </member>
        <member name="T:TradingLib.API.IBrokerTradingInfo">
            <summary>
            broker对应的交易信息
            </summary>
        </member>
        <member name="M:TradingLib.API.IBrokerTradingInfo.SelectBrokerOrders(System.String)">
            <summary>
            获得日内成交接口的所有委托
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.IBrokerTradingInfo.SelectBrokerTrades(System.String)">
            <summary>
            获得日内成交接口的所有成交
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.IBrokerTradingInfo.SelectBrokerPositionDetails(System.String)">
            <summary>
            获得成交接口上个结算日所有持仓数据
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.IBrokerTradingInfo.SelectRouterOrders">
            <summary>
            获得路右侧委托
            </summary>
            <returns></returns>
        </member>
        <member name="T:TradingLib.API.IAuthCashOperation">
            <summary>
            认证和出入金请求接口
            认证交易帐户
            提交出入金请求，确认出入金请求
            直接从帐户扣费
            </summary>
        </member>
        <member name="M:TradingLib.API.IAuthCashOperation.RequestCashOperation(System.String,System.Decimal,TradingLib.API.QSEnumCashOperation,System.String@,TradingLib.API.QSEnumCashOPSource,System.String)">
            <summary>
            请求一个资金操作
            请求入金或出金
            </summary>
            <param name="account"></param>
            <param name="amount"></param>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.IAuthCashOperation.CashOperation(System.String,System.Decimal,System.String,System.String)">
            <summary>
            直接进行出入金操作
            </summary>
            <param name="id"></param>
            <param name="ammount"></param>
            <param name="comment"></param>
        </member>
        <member name="M:TradingLib.API.IAuthCashOperation.ConfirmCashOperation(System.String)">
            <summary>
            确认某个入金记录
            用于在线入金时的自动调用
            </summary>
            <param name="opref"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.IAuthCashOperation.VaildAccount(System.String,System.String)">
            <summary>
            验证交易帐户
            </summary>
            <param name="account"></param>
            <param name="pass"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.IClearCentreSrv.GetAvabilePrice(System.String)">
            <summary>
            获得某个合约的当前市场价格
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.IClearCentreSrv.RestoreFromMysql">
            <summary>
            从数据库恢复当日交易数据/交易数据每日结算，因此恢复当前交易状态只需要恢复当日数据即可
            </summary>
        </member>
        <member name="M:TradingLib.API.IClearCentreSrv.VaildAccount(System.String,System.String)">
            <summary>
            验证某交易账户
            </summary>
            <param name="ac"></param>
            <param name="pass"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.IClearCentreSrv.CashOperationSafe(System.String,System.Decimal,System.String,System.String@)">
            <summary>
            安全出入金操作,主要用于web端的交互
            </summary>
            <param name="accid"></param>
            <param name="ammount"></param>
            <param name="comment"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="E:TradingLib.API.IClearCentreSrv.newSymbolTickRequest">
            <summary>
            请求获得某个symbol的Tick数据
            </summary>
        </member>
        <member name="E:TradingLib.API.IClearCentreSrv.AccountAddEvent">
            <summary>
            添加交易帐号
            </summary>
        </member>
        <member name="E:TradingLib.API.IClearCentreSrv.AccountDelEvent">
            <summary>
            删除交易帐号
            </summary>
        </member>
        <member name="E:TradingLib.API.IClearCentreSrv.AccountActiveEvent">
            <summary>
            激活交易帐号
            </summary>
        </member>
        <member name="E:TradingLib.API.IClearCentreSrv.AccountInActiveEvent">
            <summary>
            冻结交易帐号
            </summary>
        </member>
        <member name="E:TradingLib.API.IClearCentreSrv.AccountChangedEvent">
            <summary>
            帐户修改事件
            </summary>
        </member>
        <member name="T:TradingLib.API.QSContribCommandHandleType">
            <summary>
            扩展命令处理类别
            1.响应消息源消息
            2.绑定到其他扩展模块事件
            </summary>
        </member>
        <member name="M:TradingLib.API.IMessageMgr.Send(TradingLib.API.IPacket)">
            <summary>
            将IPacket放到缓存 进行发送
            </summary>
            <param name="packet"></param>
        </member>
        <member name="M:TradingLib.API.IMessageMgr.GetNotifyTargets(System.Predicate{TradingLib.Common.Manager})">
            <summary>
            获得某个通知列表
            </summary>
            <param name="predictate"></param>
            <returns></returns>
        </member>
        <member name="T:TradingLib.API.IServiceManager">
            <summary>
            服务管理接口
            系统包含
            1.核心服务管理
            2.数据成交路由通道管理
            3.扩展模块管理
            </summary>
        </member>
        <member name="M:TradingLib.API.IRouterManager.FindBroker(System.String)">
            <summary>
            查找成交路由
            </summary>
            <param name="fullname"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.IRouterManager.FindDataFeed(System.String)">
            <summary>
            查找行情路由
            </summary>
            <param name="fullname"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.IRouterManager.GetAvabilePrice(System.String)">
            <summary>
            获得某个合约当前有效价格
            通过DataRouter进行获取
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.IRouterManager.GetTickSnapshot(System.String)">
            <summary>
            获得市场快照
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.IRouterManager.IsSymbolTickLive(System.String)">
            <summary>
            判定合约行情是否处于live状态
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.API.IRouterManager.DefaultSimBroker">
            <summary>
            默认的模拟成交接口
            </summary>
        </member>
        <member name="P:TradingLib.API.IRouterManager.DefaultDataFeed">
            <summary>
            默认行情通道
            </summary>
        </member>
        <member name="T:TradingLib.API.IAccountService">
            <summary>
            定义了帐户服务类接口
            普通帐户注册了特定的服务后会给该帐户绑定特定的服务
            特定的服务有对应的风控规则和保证金计算规则以及其他特性
            后期根据系统的开发逐步完善
            如何实现
            
            </summary>
        </member>
        <member name="M:TradingLib.API.IAccountService.CanTakeOrder(TradingLib.API.Order,System.String@)">
            <summary>
            检查是否可以接受委托
            这样就可以绕过保证金检查,比如实现1000元开一手股指
            保证金计算部分
            异化的保证金计算
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.IAccountService.CanTradeSymbol(TradingLib.API.Symbol,System.String@)">
            <summary>
            是否可以交易某个合约
            限定合约部分
            比如秘籍级别与衍生证券登记的关系
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.IAccountService.CanOpenSize(TradingLib.API.Symbol,System.Boolean,TradingLib.API.QSEnumOffsetFlag)">
            <summary>
            返回帐户可某个合约的手数
            逻辑中包含一些特殊的保证金处理
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.IAccountService.GetFundAvabile(TradingLib.API.Symbol)">
            <summary>
            获得某个合约的可用资金
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.IAccountService.GetCommissionConfig(TradingLib.API.Symbol)">
            <summary>
            获得某个合约的手续费设置
            返回null则用默认手续费
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.API.IAccountService.SN">
            <summary>
            返回AccountService的唯一标识
            </summary>
        </member>
        <member name="P:TradingLib.API.IAccountService.Account">
            <summary>
            该服务所绑定的Account
            </summary>
        </member>
        <member name="P:TradingLib.API.IAccountService.IsAvabile">
            <summary>
            当前服务是否可用
            </summary>
        </member>
        <member name="T:TradingLib.API.IAccount">
            <summary>
            底层帐户接口
            集成了财务数据,交易信息,风控检查,帐户操作等几大功能接口
            IFinanceTotal:交易帐户总财务数据接口
            IFinanceFut:交易帐户期货财务数据接口
            IFinanceOpt:交易帐户期权财务数据接口
            IFinacneINNOV:交易帐户异化财务数据接口
            IAccCal:交易帐户计算类接口
            IAccTradingInfo:交易帐户交易信息类接口
            IGeneralCehck:交易帐户通用检查,是否可以交易某合约,资金是否够交易某委托等
            IAccRiskCheck:交易帐户风控规则检查,添加删除委托风控规则或帐户风控规则
            IAccOperation:交易帐户操作接口
            </summary>
        </member>
        <member name="T:TradingLib.API.IGeneralCheck">
            <summary>
            帐户核心常规检查 用于主风控逻辑的相关检查
            合约交易权限检查
            委托保证金检查
            可开数量等
            </summary>
        </member>
        <member name="M:TradingLib.API.IGeneralCheck.CanFundTakeOrder(TradingLib.API.Order,System.String@)">
            <summary>
            检查某个帐户是否可以接受某个委托 
            用于保证金资金检查
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.IGeneralCheck.CanTakeSymbol(TradingLib.API.Symbol,System.String@)">
            <summary>
            检查某个帐号是否能够交易某个合约
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.IGeneralCheck.CanOpenSize(TradingLib.API.Symbol,System.Boolean,TradingLib.API.QSEnumOffsetFlag)">
            <summary>
            返回帐户可某个合约的手数
            逻辑中包含一些特殊的保证金处理
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="T:TradingLib.API.IRiskRule">
            <summary>
            帐户风控检查接口
            用于加载帐户的委托风控规则和帐户风控规则
            </summary>
        </member>
        <member name="M:TradingLib.API.IRiskRule.CheckOrder(TradingLib.API.Order,System.String@)">
            <summary>
            检查委托
            </summary>
            <param name="o"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.IRiskRule.CheckAccount(System.String@)">
            <summary>
            检查账户状态
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.API.IRiskRule.ClearOrderCheck">
            <summary>
            清除委托检查
            </summary>
        </member>
        <member name="M:TradingLib.API.IRiskRule.AddOrderCheck(TradingLib.API.IOrderCheck)">
            <summary>
            添加委托检查
            </summary>
            <param name="rc"></param>
        </member>
        <member name="M:TradingLib.API.IRiskRule.DelOrderCheck(System.Int32)">
            <summary>
            删除委托检查
            </summary>
            <param name="rc"></param>
        </member>
        <member name="M:TradingLib.API.IRiskRule.ClearAccountCheck">
            <summary>
            清除账户检查
            </summary>
        </member>
        <member name="M:TradingLib.API.IRiskRule.AddAccountCheck(TradingLib.API.IAccountCheck)">
            <summary>
            添加账户检查
            </summary>
            <param name="rc"></param>
        </member>
        <member name="M:TradingLib.API.IRiskRule.DelAccountCheck(System.Int32)">
            <summary>
            删除账户检查
            </summary>
            <param name="rc"></param>
        </member>
        <member name="P:TradingLib.API.IRiskRule.RuleItemLoaded">
            <summary>
            帐户规则是否加载过
            </summary>
        </member>
        <member name="P:TradingLib.API.IRiskRule.OrderChecks">
            <summary>
            所有委托检查规则
            </summary>
        </member>
        <member name="P:TradingLib.API.IRiskRule.AccountChecks">
            <summary>
            所有帐户检查规则
            </summary>
        </member>
        <member name="M:TradingLib.API.IAccount.Deposit(System.Decimal)">
            <summary>
            入金接口
            </summary>
            <param name="amount"></param>
        </member>
        <member name="M:TradingLib.API.IAccount.Withdraw(System.Decimal)">
            <summary>
            出金接口
            </summary>
            <param name="amount"></param>
        </member>
        <member name="M:TradingLib.API.IAccount.Reset">
            <summary>
            重置账户状态,用于每日造成开盘时,重置数据 
            </summary>
        </member>
        <member name="P:TradingLib.API.IAccount.ID">
            <summary>
            交易帐号对应的数据库全局ID
            </summary>
        </member>
        <member name="P:TradingLib.API.IAccount.Execute">
            <summary>
            是否可以进行交易
            </summary>
        </member>
        <member name="P:TradingLib.API.IAccount.IntraDay">
            <summary>
            是否日内交易
            </summary>
        </member>
        <member name="P:TradingLib.API.IAccount.OrderRouteType">
            <summary>
            账户委托转发通道类型
            </summary>
        </member>
        <member name="P:TradingLib.API.IAccount.Category">
            <summary>
            账户类型
            </summary>
        </member>
        <member name="P:TradingLib.API.IAccount.MAC">
            <summary>
            MAC地址 用于标注客户端硬件
            </summary>
        </member>
        <member name="P:TradingLib.API.IAccount.Name">
            <summary>
            帐户Name 用于储存帐户名称
            </summary>
        </member>
        <member name="P:TradingLib.API.IAccount.Broker">
            <summary>
            帐户
            </summary>
        </member>
        <member name="P:TradingLib.API.IAccount.BankID">
            <summary>
            银行
            </summary>
        </member>
        <member name="P:TradingLib.API.IAccount.BankAC">
            <summary>
            银行帐号
            </summary>
        </member>
        <member name="P:TradingLib.API.IAccount.CreatedTime">
            <summary>
            账户建立时间
            </summary>
        </member>
        <member name="P:TradingLib.API.IAccount.SettleDateTime">
            <summary>
            上次结算日
            </summary>
        </member>
        <member name="P:TradingLib.API.IAccount.SettlementConfirmTimeStamp">
            <summary>
            确认结算日期
            </summary>
        </member>
        <member name="P:TradingLib.API.IAccount.PosLock">
            <summary>
            是否允许锁仓
            </summary>
        </member>
        <member name="P:TradingLib.API.IAccount.SideMargin">
            <summary>
            单向大边
            </summary>
        </member>
        <member name="P:TradingLib.API.IAccount.CreditSeparate">
            <summary>
            客户端信用额度分开显示
            </summary>
        </member>
        <member name="P:TradingLib.API.IAccount.Mgr_fk">
            <summary>
            帐号隶属于哪个管理员
            可以属于超级管理员Root
            或者属于代理Agent
            在用于添加时候就自动进行了绑定
            </summary>
        </member>
        <member name="P:TradingLib.API.IAccount.RG_FK">
            <summary>
            路由组ID 用于将某个帐户绑定到某个路由组上面,然后这组用户下单就会下单路由组内的成交接口上
            </summary>
        </member>
        <member name="P:TradingLib.API.IAccount.Commission_ID">
            <summary>
            手续费模板ID
            </summary>
        </member>
        <member name="P:TradingLib.API.IAccount.Margin_ID">
            <summary>
            保证金模板ID
            </summary>
        </member>
        <member name="P:TradingLib.API.IAccount.Domain">
            <summary>
            域ID
            </summary>
        </member>
        <member name="P:TradingLib.API.IAccount.UserID">
            <summary>
            该帐号所绑定的全局UserID
            </summary>
        </member>
        <member name="P:TradingLib.API.IAccount.Deleted">
            <summary>
            删除标志，如果已经删除 则管理端不显示，下次启动不会加载
            </summary>
        </member>
        <member name="T:TradingLib.API.IContrib">
            <summary>
            外围功能插件接口
            </summary>
        </member>
        <member name="M:TradingLib.API.IContrib.OnLoad">
            <summary>
            加载
            </summary>
        </member>
        <member name="M:TradingLib.API.IContrib.OnDestory">
            <summary>
            销毁
            </summary>
        </member>
        <member name="M:TradingLib.API.IContrib.Start">
            <summary>
            启动
            </summary>
        </member>
        <member name="M:TradingLib.API.IContrib.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="T:TradingLib.API.QSEnumCommandSource">
            <summary>
            命令源
            交易客户端的命令
            Web管理端的命令
            命令行终端的命令
            都是在得到消息时,调用对应的命令执行
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumCommandSource.MessageExchange">
            <summary>
            交易消息交换,来自于客户端消息
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumCommandSource.MessageMgr">
            <summary>
            管理消息交换,来自于管理端消息
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumCommandSource.MessageWeb">
            <summary>
            web端消息交换,来自于web端消息
            </summary>
        </member>
        <member name="F:TradingLib.API.QSEnumCommandSource.CLI">
            <summary>
            命令行,该类命令用于响应命令行的交互输入
            </summary>
        </member>
        <member name="T:TradingLib.API.ITransport">
            <summary>
            底层数据传输接口
            </summary>
        </member>
        <member name="M:TradingLib.API.ITransport.Start">
            <summary>
            启动服务
            </summary>
        </member>
        <member name="M:TradingLib.API.ITransport.Stop">
            <summary>
            停止服务
            </summary>
        </member>
        <member name="M:TradingLib.API.ITransport.Send(System.Byte[],System.String,System.String)">
            <summary>
            向某个客户端发送消息
            </summary>
            <param name="body">消息内容</param>
            <param name="address">客户端地址</param>
            <param name="front">前置地址</param>
        </member>
        <member name="M:TradingLib.API.ITransport.SendTick(TradingLib.API.Tick)">
            <summary>
            向行情分发系统发送行情数据
            </summary>
            <param name="k">Tick数据</param>
        </member>
        <member name="M:TradingLib.API.ITransport.SendTickHeartBeat">
            <summary>
            向行情系统分发行情心跳,用于告知客户端行情连接有效[停盘时,可能行情通道没有数据发送]
            </summary>
        </member>
        <member name="P:TradingLib.API.ITransport.IsLive">
            <summary>
            当前服务状态是否有效
            </summary>
        </member>
        <member name="P:TradingLib.API.ITransport.ProviderName">
            <summary>
            服务标识
            </summary>
        </member>
        <member name="E:TradingLib.API.ITransport.GotTLMessageEvent">
            <summary>
            收到客户端提交上来的消息,类别,消息体,前置,客户端地址
            </summary>
        </member>
        <member name="P:TradingLib.API.ITransport.EnableTPTracker">
            <summary>
            是否启用流控
            </summary>
        </member>
        <member name="P:TradingLib.API.ITransport.NumWorkers">
            <summary>
            消息处理线程数量
            </summary>
        </member>
        <member name="T:TradingLib.API.IContribPlugin">
            <summary>
            外围功能模块插件,用于保存该插件的相关信息,从而可以通过插件系统进行创建，加载该插件
            </summary>
        </member>
        <member name="P:TradingLib.API.ISettleCentre.LastSettleday">
            <summary>
            上次结算日
            </summary>
        </member>
        <member name="P:TradingLib.API.ISettleCentre.CurrentTradingday">
            <summary>
            当前交易日
            </summary>
        </member>
        <member name="P:TradingLib.API.ISettleCentre.SettleTime">
            <summary>
            获得当前结算时间
            </summary>
        </member>
        <member name="P:TradingLib.API.ISettleCentre.NextTradingday">
            <summary>
            下个交易日
            </summary>
        </member>
        <member name="P:TradingLib.API.ISettleCentre.IsTradingday">
            <summary>
            当前是否是交易日
            </summary>
        </member>
        <member name="P:TradingLib.API.ISettleCentre.IsNormal">
            <summary>
            结算中心是否处于正常状态
            </summary>
        </member>
        <member name="P:TradingLib.API.ISettleCentre.IsInSettle">
            <summary>
            结算中心是否处于结算状态
            正常工作状态下在交易完成后的一段时间内进行结算工作用于保存交易记录，生成结算记录和更新帐户结算权益
            </summary>
        </member>
        <member name="T:TradingLib.API.ITask">
            <summary>
            任务接口
            在TLCtx中托管任务调度,任务列表使用ITask
            接口
            接口就是预留的规范，在使用时还没有具体的实现，在后期其他组件中才有实现该接口的相关对象定义
            </summary>
        </member>
        <member name="P:TradingLib.API.ITask.UUID">
            <summary>
            所属对象UUID
            </summary>
        </member>
        <member name="P:TradingLib.API.ITask.TaskName">
            <summary>
            任务名称
            </summary>
        </member>
        <member name="P:TradingLib.API.ITask.TaskType">
            <summary>
            任务类别 定时/循环
            </summary>
        </member>
        <member name="P:TradingLib.API.ITask.TaskInterval">
            <summary>
            任务间隔
            </summary>
        </member>
        <member name="P:TradingLib.API.ITask.TaskHour">
            <summary>
            定时任务小时
            </summary>
        </member>
        <member name="P:TradingLib.API.ITask.TaskMinute">
            <summary>
            定时任务分钟
            </summary>
        </member>
        <member name="P:TradingLib.API.ITask.TaskSecend">
            <summary>
            定时任务秒
            </summary>
        </member>
        <member name="M:TradingLib.API.IRiskCentre.CheckAccount(TradingLib.API.IAccount)">
            <summary>
            执行某个帐户的帐户风控规则检查,比如损失超过多少执行强平等
            </summary>
            <param name="a"></param>
        </member>
        <member name="M:TradingLib.API.IRiskCentre.FlatPosition(System.String,TradingLib.API.QSEnumOrderSource,System.String)">
            <summary>
            强平某个交易帐户的所有持仓
            </summary>
            <param name="accid"></param>
            <param name="source"></param>
            <param name="comment"></param>
        </member>
        <member name="M:TradingLib.API.IRiskCentre.FlatPosition(TradingLib.API.Position,TradingLib.API.QSEnumOrderSource,System.String)">
            <summary>
            强平某个持仓
            </summary>
            <param name="pos"></param>
            <param name="ordersource"></param>
            <param name="comment"></param>
        </member>
        <member name="M:TradingLib.API.IRiskCentre.CancelOrder(System.String,TradingLib.API.QSEnumOrderSource,System.String)">
            <summary>
            撤掉帐户下所有委托
            </summary>
        </member>
        <member name="M:TradingLib.API.IRiskCentre.CancelOrder(System.String,System.String,TradingLib.API.QSEnumOrderSource,System.String)">
            <summary>
            撤掉帐户下某个合约的所有委托
            </summary>
            <param name="symbol"></param>
            <param name="source"></param>
            <param name="cancelreason"></param>
        </member>
        <member name="M:TradingLib.API.IRiskCentre.CancelOrder(TradingLib.API.Order,TradingLib.API.QSEnumOrderSource,System.String)">
            <summary>
            撤掉帐户下的某个为头
            </summary>
            <param name="order"></param>
            <param name="source"></param>
            <param name="cancelreason"></param>
        </member>
        <member name="P:TradingLib.API.IRiskCentre.MarketOpenTimeCheck">
            <summary>
            时间检查标志
            </summary>
        </member>
    </members>
</doc>

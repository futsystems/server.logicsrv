<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TradingLib.Common</name>
    </assembly>
    <members>
        <member name="F:TradingLib.Common.ConfigHelper._conf">
            <summary>
            根据键值获取配置文件
            </summary>
            <param name="key">键值</param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.ConfigHelper.GetConfig">
            <summary>
            获取所有配置文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.ConfigHelper.GetConfig(System.String,System.String)">
            <summary>
            根据键值获取配置文件
            </summary>
            <param name="key">键值</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.ConfigHelper.SetConfig(System.String,System.String)">
            <summary>
            写配置文件,如果节点不存在则自动创建
            </summary>
            <param name="key">键值</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.ConfigHelper.SetConfig(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            写配置文件(用键值创建),如果节点不存在则自动创建
            </summary>
            <param name="dict">键值集合</param>
            <returns></returns>
        </member>
        <member name="T:TradingLib.Common.SafeEnumerable`1">
            <summary>
            A thread-safe IEnumerable implementation
            See: http://www.codeproject.com/KB/cs/safe_enumerable.aspx
            </summary>
        </member>
        <member name="T:TradingLib.Common.RequestPacket">
            <summary>
            请求逻辑包父类
            </summary>
        </member>
        <member name="T:TradingLib.Common.PacketBase">
            <summary>
            Message用于包结构的打包与解包
            Packket将具体的Message解析成对应的逻辑数据
            在系统内寻址有2种方案
            1.通过frontid,uuid进行寻址
            2.通过Account进行寻址,某个交易帐号可能有多个登入,因此通知类的消息就要通过Account寻址然后进行广播
            </summary>
        </member>
        <member name="F:TradingLib.Common.PacketBase._type">
            <summary>
            默认消息类型为未知类型
            </summary>
        </member>
        <member name="M:TradingLib.Common.PacketBase.Serialize">
            <summary>
            序列化成字符串 由子类提供序列化函数
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.PacketBase.Deserialize(System.String)">
            <summary>
            反序列化成对象
            </summary>
            <param name="reqstr"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.PacketBase.ContentSerialize">
            <summary>
            逻辑包内容序列化
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.PacketBase.ContentDeserialize(System.String)">
            <summary>
            逻辑包内容反序列化
            </summary>
            <param name="contentstr"></param>
        </member>
        <member name="P:TradingLib.Common.PacketBase.FrontID">
            <summary>
            请求数据包前置ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.PacketBase.ClientID">
            <summary>
            请求数据包客户端Client
            </summary>
        </member>
        <member name="P:TradingLib.Common.PacketBase.RequestID">
            <summary>
            逻辑数据包RequestID
            </summary>
        </member>
        <member name="P:TradingLib.Common.PacketBase.Data">
            <summary>
            Packet对应的底层传输的二进制数据 用于提供给底层传输传进行传输
            </summary>
        </member>
        <member name="P:TradingLib.Common.PacketBase.Type">
            <summary>
            消息类型
            </summary>
        </member>
        <member name="P:TradingLib.Common.PacketBase.Content">
            <summary>
            消息内容
            消息内容需要序列化对应的逻辑数据包
            </summary>
        </member>
        <member name="P:TradingLib.Common.PacketBase.IsValid">
            <summary>
            消息逻辑包是否有效 做一个消息的初步检验
            </summary>
        </member>
        <member name="M:TradingLib.Common.RequestPacket.SetSource(System.String,System.String)">
            <summary>
            设定请求数据包地址信息
            用于服务端接收到数据后,创建对应的packet,并设定对应的地址信息
            用于服务端解析到请求数据包时填入
            </summary>
            <param name="frontid"></param>
            <param name="clientid"></param>
        </member>
        <member name="M:TradingLib.Common.RequestPacket.SetRequestID(System.Int32)">
            <summary>
            设定请求ID,用于客户端发起请求生成请求逻辑包时候填充请求ID
            </summary>
            <param name="requestid"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.QryTradeRequest.Account">
            <summary>
            交易帐号
            </summary>
        </member>
        <member name="P:TradingLib.Common.QryTradeRequest.Symbol">
            <summary>
            合约
            </summary>
        </member>
        <member name="P:TradingLib.Common.QryTradeRequest.ExchID">
            <summary>
            交易所ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.QryTradeRequest.StartTime">
            <summary>
            开始时间
            </summary>
        </member>
        <member name="P:TradingLib.Common.QryTradeRequest.EndTime">
            <summary>
            结束时间
            </summary>
        </member>
        <member name="P:TradingLib.Common.QryTradeRequest.TradeID">
            <summary>
            成交编号
            </summary>
        </member>
        <member name="T:TradingLib.Common.RspResponsePacket">
            <summary>
            查询回报逻辑数据包
            用于回报客户端的查询,包含IsLast,RspIno信息
            该数据包区别于交易过程中的Notify数据包
            </summary>
        </member>
        <member name="T:TradingLib.Common.ResponsePacket">
            <summary>
            回复逻辑包父类
            系统内部存在不同种类的响应
            </summary>
        </member>
        <member name="M:TradingLib.Common.ResponsePacket.BindRequest(TradingLib.Common.RequestPacket)">
            <summary>
            1.一问一答的响应，响应包用于应答某个请求,响应可以是是1个或者多个，响应包从Request获得请求者的地址信息 前置ID，客户端ID，以及对应的RequestID
            并且将请求的FrontID RequestID数据传递给Response,从而系统可以准确的将该Response发送到对应的客户端
            通过FrontID,ClientID进行寻址
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:TradingLib.Common.ResponsePacket.BindAccount(System.String)">
            <summary>
            将该response绑定到对应的交易帐号,通过交易帐号寻址
            交易客户端通过Account寻找对应的登入客户端
            </summary>
            <param name="account"></param>
        </member>
        <member name="M:TradingLib.Common.ResponsePacket.BindLocation(System.Collections.Generic.IEnumerable{TradingLib.API.ILocation})">
            <summary>
            设定该通知所指定的地址
            3.绑定通知地址，在某些通讯逻辑中直接绑定了该响应包的发送地址，按照设定的发送地址列表进行通知
            </summary>
            <param name="location"></param>
        </member>
        <member name="M:TradingLib.Common.ResponsePacket.BindSession(TradingLib.API.ISession)">
            <summary>
            扩展模块的回复消息通过ISession进行客户端定位
            第一种类型的变种，用于从ISession获得地址信息 进行发送
            </summary>
            <param name="session"></param>
        </member>
        <member name="P:TradingLib.Common.ResponsePacket.Account">
            <summary>
            该逻辑数据包底层对应帐户Account
            2.绑定Account通过Account进行通知寻址
            在交易消息交换中，绑定了某个account的通知包需要遍历该account的所有客户端连接并发送通知。某个account可以有多个交易客户端等同，需要同步通知到每个交易客户端
            在管理消息交换中，绑定了某个account的通知包需要按照权限逻辑找到有权限查看该帐户的管理端进行通知
            </summary>
        </member>
        <member name="M:TradingLib.Common.RspResponsePacket.ContentSerialize">
            <summary>
            将IsLast,RspIno附加到消息体的第一第二区域,具体内容放在第三区域
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.RspResponsePacket.ContentDeserialize(System.String)">
            <summary>
            将回报消息进行解析,首先解析第一第二区域到IsLast,RspIno字段,然后调用具体内容的解析函数解析具体的内容到子类对象
            </summary>
            <param name="reqstr"></param>
        </member>
        <member name="M:TradingLib.Common.RspResponsePacket.ResponseSerialize">
            <summary>
            具体内容序列化
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.RspResponsePacket.ResponseDeserialize(System.String)">
            <summary>
            具体内容反序列化
            </summary>
            <param name="content"></param>
        </member>
        <member name="P:TradingLib.Common.RspResponsePacket.IsLast">
            <summary>
            是否是最后一条回复
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspResponsePacket.RspInfo">
            <summary>
            查询回报信息 用于传递错误信息或内容
            </summary>
        </member>
        <member name="T:TradingLib.Common.ErrorNotifyResponsePacket">
            <summary>
            错误的汇报消息类型
            比如插入委托或者委托操作失败 会附上具体的错误内容
            OnErrRtnOrderInsert
            OnErrRtnOrderAction
            </summary>
        </member>
        <member name="T:TradingLib.Common.NotifyResponsePacket">
            <summary>
            通知类型的逻辑包,用于生成成交回报,委托回报,持仓更新回报等数据包 通知类的数据包不包含RspInfo
            这些包调用OnRtnOrder,OnRtnTrade
            
            </summary>
        </member>
        <member name="T:TradingLib.Common.MGRQryAcctServiceRequest">
            <summary>
            查询帐户服务
            查询某个帐户的服务如果服务存在则返回服务信息
            每个服务的信息不同 通过json格式返回
            接收端进行处理
            </summary>
        </member>
        <member name="P:TradingLib.Common.MGRQryAcctServiceRequest.TradingAccount">
            <summary>
            交易帐号
            </summary>
        </member>
        <member name="P:TradingLib.Common.MGRQryAcctServiceRequest.ServiceName">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="T:TradingLib.Common.PositionCloseDetailImpl">
            <summary>
            平仓明细
            </summary>
        </member>
        <member name="M:TradingLib.Common.PositionCloseDetailImpl.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionCloseDetailImpl.Account">
            <summary>
            交易帐号
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionCloseDetailImpl.Settleday">
            <summary>
            平仓所在结算日
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionCloseDetailImpl.Side">
            <summary>
            方向
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionCloseDetailImpl.IsCloseYdPosition">
            <summary>
            平昨仓还是平今仓
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionCloseDetailImpl.LastSettlementPrice">
            <summary>
            昨结算价
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionCloseDetailImpl.OpenDate">
            <summary>
            开仓日期
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionCloseDetailImpl.OpenTime">
            <summary>
            开仓时间
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionCloseDetailImpl.OpenTradeID">
            <summary>
            开仓成交编号
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionCloseDetailImpl.OpenPrice">
            <summary>
            开仓价格
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionCloseDetailImpl.CloseDate">
            <summary>
            平仓日期
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionCloseDetailImpl.CloseTime">
            <summary>
            平仓时间
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionCloseDetailImpl.CloseTradeID">
            <summary>
            平仓成交编号
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionCloseDetailImpl.ClosePrice">
            <summary>
            平仓价格
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionCloseDetailImpl.CloseVolume">
            <summary>
            平仓量
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionCloseDetailImpl.CloseProfitByDate">
            <summary>
            盯市平仓盈亏金额
            平当日仓 (开仓-平仓)*手数*乘数
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionCloseDetailImpl.CloseProfitByTrade">
            <summary>
            逐笔平仓盈亏金额
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionCloseDetailImpl.ClosePointByDate">
            <summary>
            盯市平仓盈亏点数
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionCloseDetailImpl.CloseAmount">
            <summary>
            平仓金额
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionCloseDetailImpl.oSymbol">
            <summary>
            合约信息
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionCloseDetailImpl.Exchange">
            <summary>
            交易所
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionCloseDetailImpl.Broker">
            <summary>
            接口Token如果是接口侧的平仓明细则有BrokerToken字段
            分帐户侧没有Broker
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionCloseDetailImpl.Breed">
            <summary>
            数据来源
            1.分帐户侧
            2.接口侧
            3.路由侧
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionCloseDetailImpl.Domain_ID">
            <summary>
            域ID
            </summary>
        </member>
        <member name="M:TradingLib.Common.TikUtil.EPF2TIK(System.String[])">
            <summary>
            converts EPF files to tradelink tick files in current directory
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:TradingLib.Common.TikUtil.GetFiles">
            <summary>
            finds a group of files with a given extension
            </summary>
            <param name="EXT"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TikUtil.TicksToFile(TradingLib.API.Tick[])">
            <summary>
            create file from ticks
            </summary>
            <param name="ticks"></param>
        </member>
        <member name="M:TradingLib.Common.TikUtil.TicksToFile(TradingLib.API.Tick[],TradingLib.API.DebugDelegate)">
            <summary>
            create file from ticks
            </summary>
            <param name="ticks"></param>
            <param name="debs"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TikUtil.TicksToFile(TradingLib.API.Tick[],TradingLib.API.DebugDelegate,TradingLib.Common.TikWriter)">
            <summary>
            create file from ticks
            </summary>
            <param name="ticks"></param>
            <param name="debs"></param>
            <param name="tw"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TikUtil.Barlist2Tick(TradingLib.API.BarList)">
            <summary>
            create ticks from bars on default interval
            </summary>
            <param name="bl"></param>
            <returns></returns>
        </member>
        <member name="T:TradingLib.Common.StopOrder">
            <summary>
            A stop-loss order.
            </summary>
        </member>
        <member name="T:TradingLib.Common.OrderImpl">
            <summary>
            Specify an order to buy or sell a quantity of a security.
            由委托产生成交
            1.调用order.fill(tick) order.fill(order)的方式来触发成交,
            2.当有成交产生时会填写order内部字段 xDate xTime xPrice xSize
            其余属性Trade和Order均相同
            3.交由其他组件填充其他书信字段比如BrokerSide,AccountSide相关属性
            </summary>
        </member>
        <member name="T:TradingLib.Common.TradeImpl">
            <summary>
            A trade or execution of a stock order.  Also called a fill.
            </summary>
        </member>
        <member name="F:TradingLib.Common.TradeImpl._brokerLocalOrderID">
            <summary>
            Broker端 本地委托编号
            系统有2种方式将成交与委托联系起来
            1.近端委托编号进行关联 自己按一定方式维护唯一编号,成交端发送成交回报时按该编号关联委托
            2.远端委托编号进行关联 由成交端在委托回报中设定远端委托编号,成交端发送成交回报时候按该编号关联委托
            </summary>
        </member>
        <member name="F:TradingLib.Common.TradeImpl._brokerRemoteOrderID">
            <summary>
            Broker端 远端委托编号
            </summary>
        </member>
        <member name="F:TradingLib.Common.TradeImpl._brokerTradeID">
            <summary>
            Broker端的成交编号 由Broker按一定规则赋值
            </summary>
        </member>
        <member name="M:TradingLib.Common.TradeImpl.#ctor">
            <summary>
            域ID
            </summary>
        </member>
        <member name="M:TradingLib.Common.TradeImpl.Serialize(TradingLib.API.Trade)">
            <summary>
            Serialize trade as a string
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TradeImpl.Deserialize(System.String)">
            <summary>
            Deserialize string to Trade
            </summary>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.TradeImpl.Account">
            <summary>
            交易账号
            </summary>
        </member>
        <member name="P:TradingLib.Common.TradeImpl.xDate">
            <summary>
            成交日期
            </summary>
        </member>
        <member name="P:TradingLib.Common.TradeImpl.xTime">
            <summary>
            成交时间
            </summary>
        </member>
        <member name="P:TradingLib.Common.TradeImpl.Symbol">
            <summary>
            合约
            </summary>
        </member>
        <member name="P:TradingLib.Common.TradeImpl.LocalSymbol">
            <summary>
            本地合约编号
            </summary>
        </member>
        <member name="P:TradingLib.Common.TradeImpl.oSymbol">
            <summary>
            合约对象
            </summary>
        </member>
        <member name="P:TradingLib.Common.TradeImpl.Side">
            <summary>
            成交方向
            </summary>
        </member>
        <member name="P:TradingLib.Common.TradeImpl.xSize">
            <summary>
            成交数量
            </summary>
        </member>
        <member name="P:TradingLib.Common.TradeImpl.UnsignedSize">
            <summary>
            数量绝对值
            </summary>
        </member>
        <member name="P:TradingLib.Common.TradeImpl.xPrice">
            <summary>
            成交价格
            </summary>
        </member>
        <member name="P:TradingLib.Common.TradeImpl.OffsetFlag">
            <summary>
            开平标识
            </summary>
        </member>
        <member name="P:TradingLib.Common.TradeImpl.HedgeFlag">
            <summary>
            投机 套保标识
            </summary>
        </member>
        <member name="P:TradingLib.Common.TradeImpl.Commission">
            <summary>
            手续费
            </summary>
        </member>
        <member name="P:TradingLib.Common.TradeImpl.Profit">
            <summary>
            平仓盈亏
            </summary>
        </member>
        <member name="P:TradingLib.Common.TradeImpl.Exchange">
            <summary>
            交易所
            </summary>
        </member>
        <member name="P:TradingLib.Common.TradeImpl.SecurityType">
            <summary>
            品种
            </summary>
        </member>
        <member name="P:TradingLib.Common.TradeImpl.SecurityCode">
            <summary>
            品种code
            </summary>
        </member>
        <member name="P:TradingLib.Common.TradeImpl.Currency">
            <summary>
            货币
            </summary>
        </member>
        <member name="P:TradingLib.Common.TradeImpl.isValid">
            <summary>
            判断有效成交
            </summary>
        </member>
        <member name="P:TradingLib.Common.TradeImpl.isFilled">
            <summary>
            判定是否有成交
            Order继承自Trade 通过xprice和xsize进行判断是否有成交 xprice xsize均不为0 则表明有有效成交
            </summary>
        </member>
        <member name="P:TradingLib.Common.TradeImpl.IsEntryPosition">
            <summary>
            是否是开仓
            </summary>
        </member>
        <member name="P:TradingLib.Common.TradeImpl.PositionSide">
            <summary>
            持仓方向
            </summary>
        </member>
        <member name="P:TradingLib.Common.TradeImpl.Broker">
            <summary>
            Broker标识
            </summary>
        </member>
        <member name="P:TradingLib.Common.TradeImpl.TradeID">
            <summary>
            成交编号
            </summary>
        </member>
        <member name="P:TradingLib.Common.TradeImpl.OrderSeq">
            <summary>
            委托流水号
            </summary>
        </member>
        <member name="P:TradingLib.Common.TradeImpl.OrderRef">
            <summary>
            客户端委托引用
            </summary>
        </member>
        <member name="P:TradingLib.Common.TradeImpl.OrderSysID">
            <summary>
            委托交易所编号
            </summary>
        </member>
        <member name="P:TradingLib.Common.TradeImpl.FatherBreed">
            <summary>
            分解父源
            </summary>
        </member>
        <member name="P:TradingLib.Common.TradeImpl.FatherID">
            <summary>
            父委托编号
            </summary>
        </member>
        <member name="P:TradingLib.Common.TradeImpl.Breed">
            <summary>
            委托分解源
            </summary>
        </member>
        <member name="M:TradingLib.Common.OrderImpl.#ctor(TradingLib.API.Order)">
            <summary>
            复制一个Order得到一个全新的副本,对其中一个副本的数据操作不会影响到另外一个副本的数据
            系统内部复制委托需要同时复制对应的合约对象引用,用于保持对底层基本信息的快速引用
            </summary>
            <param name="copythis"></param>
        </member>
        <member name="M:TradingLib.Common.OrderImpl.Fill(TradingLib.API.Tick)">
            <summary>
            Fills this order with a tick(trade price)
            用最新成交价去成交一个委托
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.OrderImpl.Fill(TradingLib.API.Tick,System.Boolean,System.Boolean)">
            <summary>
            fill against bid and ask rather than trade
            
            </summary>
            <param name="k"></param>
            <param name="smart"></param>
            <param name="fillOPG"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.OrderImpl.FillBidAsk(TradingLib.API.Tick,System.Boolean)">
            <summary>
            fill against bid and ask rather than trade
            </summary>
            <param name="k"></param>
            <param name="OPG"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.OrderImpl.FillBidAsk(TradingLib.API.Tick)">
            <summary>
            fill against bid and ask rather than trade
            </summary>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.OrderImpl.Fill(TradingLib.API.Order)">
            <summary>
            Try to fill incoming order against this order.  If orders match.
            </summary>
            <param name="o"></param>
            <returns>order can be cast to valid Trade and function returns true.  Otherwise, false</returns>
        </member>
        <member name="M:TradingLib.Common.OrderImpl.Serialize(TradingLib.API.Order)">
            <summary>
            Serialize order as a string
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.OrderImpl.Deserialize(System.String)">
            <summary>
            Deserialize string to Order
            委托解析不包含oSymbol定义,只能获得基本的相关信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.OrderImpl.Date">
            <summary>
            日期
            </summary>
        </member>
        <member name="P:TradingLib.Common.OrderImpl.Time">
            <summary>
            时间
            </summary>
        </member>
        <member name="P:TradingLib.Common.OrderImpl.TimeInForce">
            <summary>
            TIF指令
            </summary>
        </member>
        <member name="P:TradingLib.Common.OrderImpl.Size">
            <summary>
            剩余当前数量
            </summary>
        </member>
        <member name="P:TradingLib.Common.OrderImpl.TotalSize">
            <summary>
            所有数量
            </summary>
        </member>
        <member name="P:TradingLib.Common.OrderImpl.FilledSize">
            <summary>
            成交手数
            </summary>
        </member>
        <member name="P:TradingLib.Common.OrderImpl.UnsignedSize">
            <summary>
            当前委托数量 无符号
            </summary>
        </member>
        <member name="P:TradingLib.Common.OrderImpl.LimitPrice">
            <summary>
            Limit价格
            </summary>
        </member>
        <member name="P:TradingLib.Common.OrderImpl.StopPrice">
            <summary>
            Stop价格
            </summary>
        </member>
        <member name="P:TradingLib.Common.OrderImpl.trail">
            <summary>
            trail
            </summary>
        </member>
        <member name="P:TradingLib.Common.OrderImpl.OrderSource">
            <summary>
            委托来源
            </summary>
        </member>
        <member name="P:TradingLib.Common.OrderImpl.Status">
            <summary>
            委托状态
            </summary>
        </member>
        <member name="P:TradingLib.Common.OrderImpl.ForceClose">
            <summary>
            是否强平
            </summary>
        </member>
        <member name="P:TradingLib.Common.OrderImpl.ForceCloseReason">
            <summary>
            强平原因
            </summary>
        </member>
        <member name="P:TradingLib.Common.OrderImpl.Comment">
            <summary>
            备注/状态信息
            </summary>
        </member>
        <member name="P:TradingLib.Common.OrderImpl.FrontIDi">
            <summary>
            标注该委托来自于哪个前置
            </summary>
        </member>
        <member name="P:TradingLib.Common.OrderImpl.SessionIDi">
            <summary>
            回话编号
            </summary>
        </member>
        <member name="P:TradingLib.Common.OrderImpl.RequestID">
            <summary>
            客户端请求编号
            </summary>
        </member>
        <member name="P:TradingLib.Common.OrderImpl.CopyID">
            <summary>
            标识Copy引用
            </summary>
        </member>
        <member name="T:TradingLib.Common.BuyStop">
            <summary>
            Create a buystop order.
            </summary>
        </member>
        <member name="T:TradingLib.Common.SellStop">
            <summary>
            Create a sellstop order.
            </summary>
        </member>
        <member name="T:TradingLib.Common.TrailStop">
            <summary>
            Create a trailing stop order
            </summary>
        </member>
        <member name="T:TradingLib.Common.TrdMessage">
            <summary>
            交易服务的其他类别信息
            </summary>
        </member>
        <member name="M:TradingLib.Common.RuleBase.NeedCheckSymbol(TradingLib.API.Symbol)">
            <summary>
            是否需要检查该合约
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.RuleBase.IsInSymbolSet(TradingLib.API.Symbol)">
            <summary>
            检查合约是否在品种集合中
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.RuleBase.FromRuleItem(TradingLib.API.IRuleItem)">
            <summary>
            初始化风控项
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:TradingLib.Common.RuleBase.ValidSetting(TradingLib.Common.RuleItem,System.String@)">
            <summary>
            验证UI输入item是否有效
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.RuleBase.Account">
            <summary>
            对应交易帐号
            </summary>
        </member>
        <member name="P:TradingLib.Common.RuleBase.ID">
            <summary>
            数据库全局ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.RuleBase.Enable">
            <summary>
            是否激活
            </summary>
        </member>
        <member name="P:TradingLib.Common.RuleBase.Compare">
            <summary>
            逻辑关系
            </summary>
        </member>
        <member name="P:TradingLib.Common.RuleBase.SymbolSet">
            <summary>
            检查品种列表
            </summary>
        </member>
        <member name="P:TradingLib.Common.RuleBase.RuleDescription">
            <summary>
            该规则内容
            </summary>
        </member>
        <member name="P:TradingLib.Common.RuleBase.Title">
            <summary>
            规则名称
            </summary>
        </member>
        <member name="P:TradingLib.Common.RuleBase.Description">
            <summary>
            规则描述
            </summary>
        </member>
        <member name="P:TradingLib.Common.RuleBase.CanSetValue">
            <summary>
            是否允许设置参数值
            </summary>
        </member>
        <member name="P:TradingLib.Common.RuleBase.DefaultValue">
            <summary>
            默认值
            </summary>
        </member>
        <member name="P:TradingLib.Common.RuleBase.CanSetCompare">
            <summary>
            是否需要设置参数关系
            </summary>
        </member>
        <member name="P:TradingLib.Common.RuleBase.DefaultCompare">
            <summary>
            默认比较关系
            </summary>
        </member>
        <member name="P:TradingLib.Common.RuleBase.CanSetSymbols">
            <summary>
            是否需要设置合约列表
            </summary>
        </member>
        <member name="P:TradingLib.Common.RuleBase.ValueName">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="T:TradingLib.Common.MGRContribRequest">
            <summary>
            管理端扩展请求
            
            </summary>
        </member>
        <member name="P:TradingLib.Common.MGRContribRequest.ModuleID">
            <summary>
            模块ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.MGRContribRequest.CMDStr">
            <summary>
            命令名
            </summary>
        </member>
        <member name="P:TradingLib.Common.MGRContribRequest.Parameters">
            <summary>
            命令参数
            </summary>
        </member>
        <member name="T:TradingLib.Common.NotifyMGRContribNotify">
            <summary>
            管理端扩展回报 一个请求 多个回复 用于通知其他管理客户端
            比如管理端确认出入金请求 会同步通知登入的代理客户端
            </summary>
        </member>
        <member name="P:TradingLib.Common.NotifyMGRContribNotify.ModuleID">
            <summary>
            模块ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.NotifyMGRContribNotify.CMDStr">
            <summary>
            命令名
            </summary>
        </member>
        <member name="P:TradingLib.Common.NotifyMGRContribNotify.Result">
            <summary>
            返回的Json字符串
            </summary>
        </member>
        <member name="T:TradingLib.Common.RspMGRContribResponse">
            <summary>
            管理端扩展回报 一个请求 一个回复
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspMGRContribResponse.ModuleID">
            <summary>
            模块ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspMGRContribResponse.CMDStr">
            <summary>
            命令名
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspMGRContribResponse.Result">
            <summary>
            返回的Json字符串
            </summary>
        </member>
        <member name="T:TradingLib.Common.PositionDetailImpl">
            <summary>
            持仓明细
            结算时通过历史持仓,交易帐户的成交数据分组获得开仓记录，平仓记录(汇总)
            
            持仓明细是以成交为单位的交易历史记录，每条开仓成交会形成一条持仓明细
            有平仓成交时按照先开先平或者上期所的 平今 平昨指令，从对应的持仓明细列表中进行平仓
            
            历史持仓明细(隔夜持仓)
            当日持仓明细 由当日开仓成交形成的持仓明细
            
            当有平仓成交时按照规则从对应的持仓明细中获得对应的持仓进行平仓
            
            
            
            </summary>
        </member>
        <member name="M:TradingLib.Common.PositionDetailImpl.#ctor">
            <summary>
            默认构造函数 用于从数据库加载持仓明细对象
            </summary>
        </member>
        <member name="M:TradingLib.Common.PositionDetailImpl.#ctor(TradingLib.API.Position)">
            <summary>
            设定Position持仓对象的 持仓明细对象，用于形成工作内存数据
            </summary>
            <param name="pos"></param>
        </member>
        <member name="P:TradingLib.Common.PositionDetailImpl.Settleday">
            <summary>
            结算日 表明该持仓明细记录属于哪个结算日 如果为0 表明是今仓，在结算时保存到数据库时 赋上当交易日信息
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionDetailImpl.IsHisPosition">
            <summary>
            是否是昨仓
            从数据库加载的持仓就是历史持仓
            由当天开仓成交生成的持仓就是今仓
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionDetailImpl.Account">
            <summary>
            交易帐号
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionDetailImpl.TradeID">
            <summary>
            成交编号
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionDetailImpl.OpenDate">
            <summary>
            开仓日期
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionDetailImpl.OpenTime">
            <summary>
            开仓时间
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionDetailImpl.OpenPrice">
            <summary>
            开仓价格 记录开仓时的开仓价
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionDetailImpl.Side">
            <summary>
            方向 多或空
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionDetailImpl.Position">
            <summary>
            对应持仓信息
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionDetailImpl.LastSettlementPrice">
            <summary>
            昨结算价
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionDetailImpl.SettlementPrice">
            <summary>
            今结算价
            通过实现动态结算价 可以在不同情况下获得不同的结算价格
            正常情况下，可以通过Position获得最新价 用于计算持仓盈亏
            当结算时,持仓获得了结算价,可以通结算价格计算结算时候的盯市盈亏或逐笔盈亏
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionDetailImpl.HedgeFlag">
            <summary>
            投机套保标识
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionDetailImpl.oSymbol">
            <summary>
            合约信息
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionDetailImpl.Exchange">
            <summary>
            交易所
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionDetailImpl.Volume">
            <summary>
            数量
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionDetailImpl.CloseAmount">
            <summary>
            平仓金额 记录当前交易日的平仓金额
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionDetailImpl.CloseVolume">
            <summary>
            平仓量 记录当前交易日的平仓数量 每次平仓产生时 平仓量累加
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionDetailImpl.CloseProfitByDate">
            <summary>
            盯市平仓盈亏
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionDetailImpl.CloseProfitByTrade">
            <summary>
            逐笔平仓盈亏
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionDetailImpl.PositionProfitByDate">
            <summary>
            盯市浮动盈亏
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionDetailImpl.PositionProfitByTrade">
            <summary>
            逐笔浮动盈亏
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionDetailImpl.Margin">
            <summary>
            投资者保证金
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionDetailImpl.Broker">
            <summary>
            接口Token如果是接口侧的平仓明细则有BrokerToken字段
            分帐户侧没有Broker
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionDetailImpl.Breed">
            <summary>
            数据来源
            1.分帐户侧
            2.接口侧
            3.路由侧
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionDetailImpl.Domain_ID">
            <summary>
            域ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.MarginTemplateSetting.ID">
            <summary>
            模板ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.MarginTemplateSetting.Name">
            <summary>
            模板名称
            </summary>
        </member>
        <member name="P:TradingLib.Common.MarginTemplateSetting.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:TradingLib.Common.MarginTemplateSetting.Domain_ID">
            <summary>
            域ID
            </summary>
        </member>
        <member name="M:TradingLib.Common.MarginTemplate.AddItem(TradingLib.Common.MarginTemplateItem)">
            <summary>
            添加保证金项目
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:TradingLib.Common.MarginTemplate.Item(System.String,System.Int32)">
            <summary>
            获得某个品种某个月份的 保证金模板项目
            </summary>
            <param name="code"></param>
            <param name="month"></param>
            <returns></returns>
        </member>
        <member name="T:TradingLib.Protocol.MGRCommissionTemplateItemSetting">
            <summary>
            设置手续费模板项目
            </summary>
        </member>
        <member name="P:TradingLib.Common.CommissionTemplateItemSetting.ID">
            <summary>
            设置项ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.CommissionTemplateItemSetting.Code">
            <summary>
            品种代码
            </summary>
        </member>
        <member name="P:TradingLib.Common.CommissionTemplateItemSetting.Month">
            <summary>
            合约月份
            </summary>
        </member>
        <member name="P:TradingLib.Common.CommissionTemplateItemSetting.OpenByMoney">
            <summary>
            开仓手续费 按金额
            </summary>
        </member>
        <member name="P:TradingLib.Common.CommissionTemplateItemSetting.OpenByVolume">
            <summary>
            开仓手续费 按手数
            </summary>
        </member>
        <member name="P:TradingLib.Common.CommissionTemplateItemSetting.CloseTodayByMoney">
            <summary>
            平今手续费 按金额
            </summary>
        </member>
        <member name="P:TradingLib.Common.CommissionTemplateItemSetting.CloseTodayByVolume">
            <summary>
            平今手续费 按手数
            </summary>
        </member>
        <member name="P:TradingLib.Common.CommissionTemplateItemSetting.CloseByMoney">
            <summary>
            平仓手续费 按金额
            </summary>
        </member>
        <member name="P:TradingLib.Common.CommissionTemplateItemSetting.CloseByVolume">
            <summary>
            平仓手续费 按手数
            </summary>
        </member>
        <member name="P:TradingLib.Common.CommissionTemplateItemSetting.Percent">
            <summary>
            上浮一定百分比
            </summary>
        </member>
        <member name="P:TradingLib.Common.CommissionTemplateItemSetting.ChargeType">
            <summary>
            加收方式
            </summary>
        </member>
        <member name="P:TradingLib.Common.CommissionTemplateItemSetting.Template_ID">
            <summary>
            模板ID
            </summary>
        </member>
        <member name="P:TradingLib.Protocol.MGRCommissionTemplateItemSetting.SetAllMonth">
            <summary>
            是否设置到该品种所有月份
            </summary>
        </member>
        <member name="P:TradingLib.Protocol.MGRCommissionTemplateItemSetting.SetAllCodeMonth">
            <summary>
            是否设置到所有品种所有月份
            </summary>
        </member>
        <member name="P:TradingLib.Common.MarginTemplateItemSetting.ID">
            <summary>
            全局编号
            </summary>
        </member>
        <member name="P:TradingLib.Common.MarginTemplateItemSetting.Code">
            <summary>
            品种代码
            </summary>
        </member>
        <member name="P:TradingLib.Common.MarginTemplateItemSetting.Month">
            <summary>
            合约月份
            </summary>
        </member>
        <member name="P:TradingLib.Common.MarginTemplateItemSetting.MarginByMoney">
            <summary>
            保证金额度
            按比例 百分之多少
            </summary>
        </member>
        <member name="P:TradingLib.Common.MarginTemplateItemSetting.MarginByVolume">
            <summary>
            保证金额度
            按手数 1手多少保证金
            </summary>
        </member>
        <member name="P:TradingLib.Common.MarginTemplateItemSetting.Percent">
            <summary>
            上浮百分比
            </summary>
        </member>
        <member name="P:TradingLib.Common.MarginTemplateItemSetting.ChargeType">
            <summary>
            加收方式
            </summary>
        </member>
        <member name="P:TradingLib.Common.MarginTemplateItemSetting.Template_ID">
            <summary>
            模板ID
            </summary>
        </member>
        <member name="P:TradingLib.Protocol.MGRMarginTemplateItemSetting.SetAllMonth">
            <summary>
            是否设置到该品种所有月份
            </summary>
        </member>
        <member name="P:TradingLib.Protocol.MGRMarginTemplateItemSetting.SetAllCodeMonth">
            <summary>
            是否设置到所有品种所有月份
            </summary>
        </member>
        <member name="M:TradingLib.Common.ConfigDB.HaveConfig(System.String)">
            <summary>
            检查是否含有某个参数名称
            </summary>
            <param name="cfgname"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.ConfigDB.ReloadConfig">
            <summary>
            重新加载配置文件
            </summary>
        </member>
        <member name="M:TradingLib.Common.ConfigDB.UpdateConfig(System.String,TradingLib.Common.QSEnumCfgType,System.Object,System.String)">
            <summary>
            更新某个名称的参数
            如果该参数不存在则插入该参数
            </summary>
            <param name="cfgname"></param>
            <param name="type"></param>
            <param name="value"></param>
            <param name="description"></param>
        </member>
        <member name="P:TradingLib.Common.ConfigDB.Item(System.String)">
            <summary>
            获得某个参数的配置对象
            </summary>
            <param name="cfgname"></param>
            <returns></returns>
        </member>
        <member name="T:TradingLib.Common.UIAccess">
            <summary>
            管理端界面权限
            用于控制管理端的界面元素的现实
            </summary>
        </member>
        <member name="P:TradingLib.Common.UIAccess.id">
            <summary>
            数据库ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.UIAccess.domain_id">
            <summary>
            域ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.UIAccess.name">
            <summary>
            界面权限名称
            </summary>
        </member>
        <member name="P:TradingLib.Common.UIAccess.desp">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:TradingLib.Common.UIAccess.r_execution">
            <summary>
            是否有权进行交易操作
            </summary>
        </member>
        <member name="P:TradingLib.Common.UIAccess.r_simacc">
            <summary>
            默认帐号添加规则
            在有实盘的情况下默认添加实盘帐户，并且帐户类型和路由列表不可选
            如果没有实盘帐号则隐藏具体的帐户类型
            如果允许代理添加模拟帐号,则代理可以自行选择帐号类型
            </summary>
        </member>
        <member name="T:TradingLib.Common.TickTracker">
            <summary>
            keep track of bid/ask and last data for symbols
            其实TickTracker维护了一个市场行情快照
            当不同的合约有成交数据 报价数据产生时,用于更新本地行情快照 将最新的数据更新到对应的字段
            当使用时 通过symbol进行索引 获得对应的行情快照
            </summary>
        </member>
        <member name="M:TradingLib.Common.TickTracker.ValueDecimal(System.Int32)">
            <summary>
            gets decimal value of last trade price for given index
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TickTracker.ValueDecimal(System.String)">
            <summary>
            gets decimal value of last trade price given label
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TickTracker.#ctor">
            <summary>
            create ticktracker
            </summary>
        </member>
        <member name="M:TradingLib.Common.TickTracker.#ctor(System.Int32)">
            <summary>
            create ticktracker with some approximate # of symbols to track
            </summary>
            <param name="estlabels"></param>
        </member>
        <member name="M:TradingLib.Common.TickTracker.addindex(System.String)">
            <summary>
            track a new symbol
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TickTracker.getindex(System.String)">
            <summary>
            get index of an existing symbol
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TickTracker.Bid(System.Int32)">
            <summary>
            get the bid
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TickTracker.Bid(System.String)">
            <summary>
            get the bid
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TickTracker.Ask(System.Int32)">
            <summary>
            get the ask
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TickTracker.Ask(System.String)">
            <summary>
            get the ask
            </summary>
            <param name="sym"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TickTracker.Last(System.Int32)">
            <summary>
            get the last trade
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TickTracker.Last(System.String)">
            <summary>
            get the last trade
            </summary>
            <param name="sym"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TickTracker.HasBid(System.Int32)">
            <summary>
            whether we have a bid
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TickTracker.HasBid(System.String)">
            <summary>
            whether we have a bid
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TickTracker.HasAsk(System.String)">
            <summary>
            whether we have a ask
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TickTracker.HasAsk(System.Int32)">
            <summary>
            whether we have a ask
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TickTracker.HasLast(System.Int32)">
            <summary>
            whether we have a last price
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TickTracker.HasLast(System.String)">
            <summary>
            whether we have a last price
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TickTracker.HasAll(System.String)">
            <summary>
            whether we have a bid/ask and last
            </summary>
            <param name="sym"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TickTracker.HasAll(System.Int32)">
            <summary>
            whether we have a bid/ask and last
            </summary>
            <param name="sym"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TickTracker.HasQuote(System.String)">
            <summary>
            whether we have a bid/ask
            </summary>
            <param name="sym"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TickTracker.HasQuote(System.Int32)">
            <summary>
            whether we have a bid/ask
            </summary>
            <param name="sym"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TickTracker.Tick(System.Int32)">
            <summary>
            get a tick in tick format
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TickTracker.Tick(System.String)">
            <summary>
            get a tick in tick format
            </summary>
            <param name="sym"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TickTracker.GetTicks">
            <summary>
            返回所有行情Tick
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TickTracker.newTick(TradingLib.API.Tick)">
            <summary>
            update the tracker with a new tick
            </summary>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="E:TradingLib.Common.TickTracker.NewTxt">
            <summary>
            called when new text label is added
            </summary>
        </member>
        <member name="P:TradingLib.Common.TickTracker.Item(System.Int32)">
            <summary>
            get a tick in tick format
            </summary>
            <param name="sym"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.TickTracker.Item(System.String)">
            <summary>
            get a tick in tick format
            </summary>
            <param name="sym"></param>
            <returns></returns>
        </member>
        <member name="T:TradingLib.Common.BidTracker">
            <summary>
            track only bid price
            </summary>
        </member>
        <member name="T:TradingLib.Common.GenericTracker`1">
            <summary>
            Used to track any type of item by both text label and index values
            label 文字标识
            idx 序列标识
            记录是按照顺序进行的，因此我们只要保证添加数据的时候 没有其他线程在添加数据 就可以做到添加数据同步
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:TradingLib.Common.GenericTracker`1.UNKNOWN">
            <summary>
            text label has no index
            </summary>
        </member>
        <member name="M:TradingLib.Common.GenericTracker`1.Reset">
            <summary>
            将缓存的实例重置为默认值
            </summary>
        </member>
        <member name="M:TradingLib.Common.GenericTracker`1.Reset(System.Int32)">
            <summary>
            将某个序号的实例重置到默认值
            </summary>
            <param name="idx"></param>
        </member>
        <member name="M:TradingLib.Common.GenericTracker`1.Reset(System.String)">
            <summary>
            将某个标签对应的实例重置到默认值
            </summary>
            <param name="txt"></param>
        </member>
        <member name="M:TradingLib.Common.GenericTracker`1.ValueDecimal(System.String)">
            <summary>
            尝试将某个标签转换成decimal值
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker`1.ValueDecimal(System.Int32)">
            <summary>
            尝试获得某个序号的decimal值
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker`1.Value(System.String)">
            <summary>
            获得某个标签的实例
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker`1.Value(System.Int32)">
            <summary>
            获得某个序号的实例
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker`1.Display(System.Int32)">
            <summary>
            get display-ready tracked value of a given index.
            For this to work, your tracked type MUST implement ToString() otherwise it will return as empty.
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker`1.Display(System.String)">
            <summary>
            get display-ready tracked value of a given label
            获得某个标签对应实例的描述
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker`1.#ctor(System.String)">
            <summary>
            creates a tracker with given name
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:TradingLib.Common.GenericTracker`1.#ctor(System.String,`0)">
            <summary>
            creates tracker with given name and default value
            </summary>
            <param name="name"></param>
            <param name="defaultvaladd"></param>
        </member>
        <member name="M:TradingLib.Common.GenericTracker`1.#ctor">
            <summary>
            creates a tracker
            </summary>
        </member>
        <member name="M:TradingLib.Common.GenericTracker`1.#ctor(System.Int32)">
            <summary>
            creates tracker with approximate # of initial items
            </summary>
            <param name="EstCount"></param>
        </member>
        <member name="M:TradingLib.Common.GenericTracker`1.#ctor(System.Int32,System.String,`0)">
            <summary>
            记录器构造函数
            </summary>
            <param name="EstCount"></param>
        </member>
        <member name="M:TradingLib.Common.GenericTracker`1.ToLabelArray">
            <summary>
            gets array of labels tracked
            获得标签数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker`1.getindex(System.String)">
            <summary>
            获得标签对应的序号
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker`1.getlabel(System.Int32)">
            <summary>
            获得序号对应的标签
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker`1.addindex(System.String)">
            <summary>
            gets index of a label, adding it if it doesn't exist.
            initial value associated with index will be Default
            增加一个标签
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker`1.addindex(System.String,`0)">
            <summary>
            gets index of label, adding it if it doesn't exist.
            增加一个标签,如果标签存在则更新该标签对应的值
            </summary>
            <param name="txtidx">label</param>
            <param name="initialval">value to associate with label</param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker`1.Clear">
            <summary>
            clears all tracked values and labels
            清空所有记录内容
            </summary>
        </member>
        <member name="M:TradingLib.Common.GenericTracker`1.GetEnumerator">
            <summary>
            allows 'foreach' enumeration of each tracked element
            Foreach迭代生成器
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker`1.ToArray">
            <summary>
            获得实例数组
            </summary>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.GenericTracker`1.Count">
            <summary>
            返回缓存的实例数量
            </summary>
        </member>
        <member name="P:TradingLib.Common.GenericTracker`1.Default">
            <summary>
            默认值
            </summary>
        </member>
        <member name="P:TradingLib.Common.GenericTracker`1.TrackedType">
            <summary>
            记录类型
            </summary>
        </member>
        <member name="P:TradingLib.Common.GenericTracker`1.Name">
            <summary>
            记录器的名称
            </summary>
        </member>
        <member name="P:TradingLib.Common.GenericTracker`1.Item(System.Int32)">
            <summary>
            获得序号对应实例
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.GenericTracker`1.Item(System.String)">
            <summary>
            获得标签对应实例
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="E:TradingLib.Common.GenericTracker`1.NewTxt">
            <summary>
            called when new text label is added
            当增加了新标签时触发事件
            </summary>
        </member>
        <member name="T:TradingLib.Common.AskTracker">
            <summary>
            track only ask price
            </summary>
        </member>
        <member name="T:TradingLib.Common.LastTracker">
            <summary>
            track only last price
            </summary>
        </member>
        <member name="T:TradingLib.Common.SizeTracker">
            <summary>
            track only last trade size
            </summary>
        </member>
        <member name="T:TradingLib.Common.BidSizeTracker">
            <summary>
            track only last bid size
            </summary>
        </member>
        <member name="T:TradingLib.Common.AskSizeTracker">
            <summary>
            track only last ask size
            </summary>
        </member>
        <member name="T:TradingLib.Common.IsTradeTracker">
            <summary>
            whether last tick in given symbol was a trade
            </summary>
        </member>
        <member name="T:TradingLib.Common.IsBidTracker">
            <summary>
            whether last tick in given symbol had bid information
            </summary>
        </member>
        <member name="T:TradingLib.Common.IsAskTracker">
            <summary>
            whether last tick in given symbol had ask information
            </summary>
        </member>
        <member name="T:TradingLib.Common.ClientInfoBase">
            <summary>
            记录交易客户端通讯的信息
            </summary>
        </member>
        <member name="M:TradingLib.Common.ClientInfoBase.Init(System.String,System.String)">
            <summary>
            初始化客户端信息 用于记录客户端地址
            </summary>
            <param name="frontid"></param>
            <param name="clientid"></param>
        </member>
        <member name="M:TradingLib.Common.ClientInfoBase.BindState(System.Object)">
            <summary>
            绑定客户端状态对象
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:TradingLib.Common.ClientInfoBase.GetFrontType(System.String)">
            <summary>
            通过前置编号获得前置类型
            </summary>
            <param name="frontid"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.ClientInfoBase.Location">
            <summary>
            客户端IP地址
            </summary>
        </member>
        <member name="P:TradingLib.Common.ClientInfoBase.HardWareCode">
            <summary>
            连接端硬件码
            </summary>
        </member>
        <member name="P:TradingLib.Common.ClientInfoBase.IPAddress">
            <summary>
            客户端的IP地址
            </summary>
        </member>
        <member name="P:TradingLib.Common.ClientInfoBase.ProductInfo">
            <summary>
            客户名称比如Pobo记录客户端通过哪个客户端软件进行登入
            </summary>
        </member>
        <member name="P:TradingLib.Common.ClientInfoBase.HeartBeat">
            <summary>
            客户端最近心跳时间
            </summary>
        </member>
        <member name="P:TradingLib.Common.ClientInfoBase.LoginID">
            <summary>
            客户端登入ID
            登入ID与回话ISession中AuthorizedID区别
            登入按认证方式可以通过邮件或手机登入，但是回话中的Authoerized必须与对应的交易帐户所对应
            </summary>
        </member>
        <member name="P:TradingLib.Common.ClientInfoBase.Authorized">
            <summary>
            监察该客户端是否登入
            </summary>
        </member>
        <member name="P:TradingLib.Common.ClientInfoBase.FrontType">
            <summary>
            前置类别
            </summary>
        </member>
        <member name="P:TradingLib.Common.ClientInfoBase.FrontIDi">
            <summary>
            前置整数编号
            </summary>
        </member>
        <member name="P:TradingLib.Common.ClientInfoBase.SessionIDi">
            <summary>
            前置整数编号
            </summary>
        </member>
        <member name="P:TradingLib.Common.QrySettleInfoConfirmRequest.Account">
            <summary>
            交易帐号
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspQrySettleInfoConfirmResponse.ConfirmDay">
            <summary>
            确认日期
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspQrySettleInfoConfirmResponse.ConfirmTime">
            <summary>
            确认时间
            </summary>
        </member>
        <member name="T:TradingLib.Common.MGRReqChangeInvestorRequest">
            <summary>
            请求修改投资者信息
            </summary>
        </member>
        <member name="T:TradingLib.Common.RspMGRReqChangeInvestorResponse">
            <summary>
            修改投资者信息回报
            </summary>
        </member>
        <member name="T:TradingLib.Common.LoginRequest">
            <summary>
            loginType =0 UCenter登入
            loginType =1 交易帐号登入
            
            ServiceType = 0 模拟帐号
            ServiceType = 1 实盘
            </summary>
        </member>
        <member name="M:TradingLib.Common.LoginRequest.ContentSerialize">
            <summary>
            序列化
            </summary>
            <param name="lr"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.LoginRequest.ContentDeserialize(System.String)">
            <summary>
            反序列化
            </summary>
            <param name="lrstr"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.LoginResponse.ResponseSerialize">
            <summary>
            序列化
            </summary>
            <param name="lr"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.LoginResponse.ResponseDeserialize(System.String)">
            <summary>
            反序列化
            </summary>
            <param name="lrstr"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.LoginResponse.LoginID">
            <summary>
            登入ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.LoginResponse.Account">
            <summary>
            交易帐号
            </summary>
        </member>
        <member name="P:TradingLib.Common.LoginResponse.FrontUUID">
            <summary>
            前置编号
            </summary>
        </member>
        <member name="P:TradingLib.Common.LoginResponse.ClientUUID">
            <summary>
            客户ID UUID用于定位客户端的标识
            </summary>
        </member>
        <member name="P:TradingLib.Common.LoginResponse.Date">
            <summary>
            当前日期
            </summary>
        </member>
        <member name="P:TradingLib.Common.LoginResponse.FrontIDi">
            <summary>
            前置整数编号
            </summary>
        </member>
        <member name="P:TradingLib.Common.LoginResponse.SessionIDi">
            <summary>
            会话整数编号
            </summary>
        </member>
        <member name="P:TradingLib.Common.LoginResponse.AccountType">
            <summary>
            交易帐户类别
            </summary>
        </member>
        <member name="P:TradingLib.Common.LoginResponse.UserID">
            <summary>
            用户全局ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.LoginResponse.NickName">
            <summary>
            用户昵称
            </summary>
        </member>
        <member name="P:TradingLib.Common.LoginResponse.Email">
            <summary>
            邮件地址
            </summary>
        </member>
        <member name="P:TradingLib.Common.LoginResponse.Mobile">
            <summary>
            手机号码
            </summary>
        </member>
        <member name="M:TradingLib.Common.IBrokerUtils.FilterOrders(TradingLib.API.IBroker,TradingLib.API.SecurityType)">
            <summary>
            
            </summary>
            <param name="account"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TradeUtils.GetCommission(TradingLib.API.Trade)">
            <summary>
            获得某个成交的手续费
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TradeUtils.GetAmount(TradingLib.API.Trade)">
            <summary>
            返回某个成交的成交金额
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TradeUtils.GetTradStr(TradingLib.API.Trade,System.String)">
            <summary>
            获得成交字符串用于保存到文本
            </summary>
            <param name="f"></param>
            <param name="delimiter"></param>
            <returns></returns>
        </member>
        <member name="T:TradingLib.Common.PositionImpl">
            <summary>
            A position type used to describe the position in a stock or instrument.
            </summary>
        </member>
        <member name="M:TradingLib.Common.PositionImpl.op_Implicit(TradingLib.Common.PositionImpl)~System.Decimal">
            <summary>
            convert from position to decimal (price)
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.PositionImpl.op_Implicit(TradingLib.Common.PositionImpl)~System.Int32">
            <summary>
            convert from position to integer (size)
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.PositionImpl.op_Implicit(TradingLib.Common.PositionImpl)~System.Boolean">
            <summary>
            convert from
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.PositionImpl.GotTick(TradingLib.API.Tick)">
            <summary>
            是否使用盘口价格来更新最新价格
            </summary>
        </member>
        <member name="M:TradingLib.Common.PositionImpl.Adjust(TradingLib.API.Trade)">
            <summary>
            Adjusts the position by applying a new trade or fill.
            这里记录了日内所有成交,用成交更新持仓状态
            在Net类型的持仓状态下 平仓明细会发生错误
            持有多头3手，空头1手，买入平仓1手时会报 持仓方向与成交方向不符的异常
            因为Net状态下 多空是混合在一起的,因此在closeposition中需要用方向进行分组
            </summary>
            <param name="t">The new fill you want this position to reflect.</param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.PositionImpl.Adjust(TradingLib.API.PositionDetail)">
            <summary>
            用历史持仓明细数据调整当前持仓数据 用于初始化时从数据库恢复历史持仓数据
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.PositionImpl.NewPositionCloseDetail(TradingLib.API.PositionCloseDetail)">
            <summary>
            产生新的平仓明细
            </summary>
            <param name="closedetail"></param>
        </member>
        <member name="M:TradingLib.Common.PositionImpl.ClosePosition(TradingLib.API.Trade)">
            <summary>
            利用平仓成交平掉对应的持仓明细 按照先开先平或者平今平昨的平仓逻辑
            如果是净持仓 可能会导致逻辑异常 这里需要再分析一下
            平仓操作会返回一个平仓盈亏 用于填充到adjust
            </summary>
            <param name="close"></param>
        </member>
        <member name="M:TradingLib.Common.PositionImpl.LoadHisPosition(TradingLib.API.PositionDetail)">
            <summary>
            加载数据库的昨日持仓对象到工作状态
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.PositionImpl.OpenPosition(TradingLib.API.Trade)">
            <summary>
            执行开仓操作 返回一个新的持仓明细
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.PositionImpl.ClosePosition(TradingLib.API.PositionDetail,TradingLib.API.Trade,System.Int32)">
            <summary>
            执行平仓操作 返回平仓明细
            </summary>
            <param name="close"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.PositionImpl.FromPositionDetail(System.Collections.Generic.IEnumerable{TradingLib.API.PositionDetail})">
            <summary>
            从一组持仓明细生成持仓汇总
            </summary>
            <param name="details"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.PositionImpl.isValid">
            <summary>
            是否有效
            合约不为空 价格和数量同时为0 或者同时不为0
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionImpl.UnRealizedPL">
             <summary>
             浮动盈亏
             当第一次有持仓时,会造成_last为0 从而导致有一个时间片段计算的unrealziedpl为不准确的 
             在判断_last之后不会出现浮动盈亏数字异常的问题
             因此这里需要做出判断
            
             </summary>
        </member>
        <member name="P:TradingLib.Common.PositionImpl.ClosedPL">
            <summary>
            平仓盈亏
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionImpl.SettlementPrice">
            <summary>
            结算价
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionImpl.LastSettlementPrice">
            <summary>
            昨日结算价
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionImpl.Highest">
            <summary>
            最高价
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionImpl.Lowest">
            <summary>
            最低价
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionImpl.LastPrice">
            <summary>
            最新价格
            如果没有正常获得tick数据则返回持仓均价
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionImpl.Account">
            <summary>
            交易帐户
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionImpl.oSymbol">
            <summary>
            合约对象
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionImpl.Symbol">
            <summary>
            合约
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionImpl.AvgPrice">
            <summary>
            持仓均价
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionImpl.Size">
            <summary>
            持仓数量
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionImpl.UnsignedSize">
            <summary>
            持仓数量绝对值
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionImpl.FlatSize">
            <summary>
            平仓数量
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionImpl.OpenAmount">
            <summary>
            开仓金额
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionImpl.OpenVolume">
            <summary>
            开仓数量
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionImpl.CloseAmount">
            <summary>
            平仓金额
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionImpl.CloseVolume">
            <summary>
            平仓数量
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionImpl.Trades">
            <summary>
            返回该持仓当日所有成交列表
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionImpl.PositionDetailYdRef">
            <summary>
            返回该持仓当日所有历史持仓明细
            这里的数据不做具体计算,
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionImpl.PositionDetailTotal">
            <summary>
            所有持仓明细
            包括昨日结算持仓明细和当日新开仓持仓明细
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionImpl.PositionDetailYdNew">
            <summary>
            返回该持仓当日所有历史持仓明细
            这里的数据做具体计算
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionImpl.PositionDetailTodayNew">
            <summary>
            今日新开仓持仓明细列表
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionImpl.PositionCloseDetail">
            <summary>
            平仓明细
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionImpl.Domain_ID">
            <summary>
            域ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionImpl.NeedGenPositionDetails">
            <summary>
            判断是否需要生成持仓明细
            </summary>
        </member>
        <member name="T:TradingLib.Common.OrderTracker">
            <summary>
            用于记录Order状态
            </summary>
        </member>
        <member name="M:TradingLib.Common.OrderTracker.#ctor">
            <summary>
            create a tracker
            </summary>
        </member>
        <member name="M:TradingLib.Common.OrderTracker.orders_NewTxt(System.String,System.Int32)">
            <summary>
            新的委托加入到记录器,我们需要增加对应的其他list以维护数据的统一
            </summary>
            <param name="txt"></param>
            <param name="idx"></param>
        </member>
        <member name="M:TradingLib.Common.OrderTracker.isPending(System.Int64)">
            <summary>
            是否等待成交,即委托没有完全成交,并且委托没有被取消
            1.filled,partfilled 由ordertracker gotfill来记录
            2.cancel 由ordertracker gotcancel来记录
            3.reject ordertracker不进行记录,只是gotorder来记录不同的委托状态
            
            placed 是指被系统接受,并没有到达任何成交路由
            submited 是被系统提交到成交路由中心,但是没有获得对应的成交接口的回报
            opened 是指被成交接口接收 并正常返回
            
            
            保证金：系统检查保证金时由于委托提交到接口 接口返回委托有时间延迟，如果以Opened为标识来累加保证金 则会导致 某些委托躲过保证见检查 因此以锁内操作broker.sendorder中产生的submit状态来计算保证金
            
            系统可平仓位：当系统检查可平仓位时,需要检查当前等待成交的委托,比如持仓5收 当前等待成交的卖出委托3手 则可平仓位为2手。这里判断等待成交 也是要包含submit,否则会躲过成交路由检查,造成多次反向操作
            submited标识委托已经通过了BrokerRouter的开平检查,Placed只是表面委托通过了风控检查包括check1和check2
            在没有提交到成交接口之前均不用计算保证金,因为这些委托还没有确认发到成交接口 意味着 发到成交接口的委托均要到计算到资金占用里面
            在order从place->submit/Reject之间是否有时间间隙 被同一个帐户的其他委托所占用 ??
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.OrderTracker.isCompleted(System.Int64)">
            <summary>
            查看某个Order是否完全成交
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.OrderTracker.isCanceled(System.Int64)">
            <summary>
            查看某个Order是否被取消
            </summary>
            <param name="sym"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.OrderTracker.Sent(System.Int64)">
            <summary>
            返回某个Order提交委托数量
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.OrderTracker.Filled(System.Int64)">
            <summary>
            返回某个Order已成交数量
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.OrderTracker.SentOrder(System.Int64)">
            <summary>
            返回某个提交的委托(Order)
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.OrderTracker.isTracked(System.Int64)">
            <summary>
            查看某个Order是否被维护跟踪
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.OrderTracker.ToArray">
            <summary>
            返回所有委托数组
            </summary>
            <returns></returns>
        </member>
        <member name="F:TradingLib.Common.OrderTracker.r">
            <summary>
            记录一个新的Order
            如果是相同委托编号的委托,则更新委托状态
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:TradingLib.Common.OrderTracker.GotCancel(System.Int64)">
            <summary>
            记录一个Order取消
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:TradingLib.Common.OrderTracker.GotFill(TradingLib.API.Trade)">
            <summary>
            记录一笔成交
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:TradingLib.Common.OrderTracker.GetEnumerator">
            <summary>
            get orders from tracker
            </summary>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.OrderTracker.Item(System.Int32)">
            <summary>
            返回某个Order未成交数量(记录序号)
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.OrderTracker.Item(System.Int64)">
            <summary>
            返回某个Order未成交数量(委托编号)
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="T:TradingLib.Common.MarketOrderFlat">
            <summary>
            create market order to flat all or part of a position
            </summary>
        </member>
        <member name="M:TradingLib.Common.MarketOrderFlat.#ctor(TradingLib.API.Position)">
            <summary>
            flat 100% of a position
            </summary>
            <param name="current"></param>
        </member>
        <member name="M:TradingLib.Common.MarketOrderFlat.#ctor(TradingLib.API.Position,System.Decimal,System.Boolean,System.Int32)">
            <summary>
            flat specified % of a position. 
            if the position is an odd-lot, optionally normalize to a standard lot size (if normalizeSize = true)
            if normalizing, specify lot size
            </summary>
            <param name="current"></param>
            <param name="percent"></param>
            <param name="normalizeSize"></param>
            <param name="MinimumLotSize"></param>
        </member>
        <member name="M:TradingLib.Common.MarketOrderFlat.#ctor(TradingLib.API.Position,System.Decimal)">
            <summary>
            flat portion of position, normalizing to 100 shares to avoid odd lots.
            </summary>
            <param name="current"></param>
            <param name="percent"></param>
        </member>
        <member name="M:TradingLib.Common.OrderUtils.IsPending(TradingLib.API.Order)">
            <summary>
            判断委托是否处于pending状态
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.OrderUtils.CanCancel(TradingLib.API.Order)">
            <summary>
            判断某个委托是否可以被撤销
            通过Broker提交的委托 状态为Opened或者PartFilled这样的委托可以通过Broker进行撤单
            这里有一个时间间隙
            MsgExch通过Broker.sendorder后的委托状态为Submited,在Submited和Broker返回接受后委托跟新为Opened之间有一个很小的时间间隙
            在这个间隙内委托无法撤销,系统不确定委托是否正常提交到broker 提交到broker后的最终状态就是Opened或者Reject
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.OrderUtils.CalFundRequired(TradingLib.API.Order,System.Decimal,System.Decimal)">
            <summary>
            
            </summary>
            <param name="o">委托</param>
            <param name="price">当前市场价格</param>
            <param name="defaultfundrequired">默认返回的资金需求</param>
            <returns></returns>
        </member>
        <member name="T:TradingLib.Common.MGRReqOpenClearCentreRequest">
            <summary>
            开启清算中心
            </summary>
        </member>
        <member name="T:TradingLib.Common.MGRReqCloseClearCentreRequest">
            <summary>
            关闭清算中心
            </summary>
        </member>
        <member name="T:TradingLib.Common.Location">
            <summary>
            用于保存客户端的位置信息
            记录前置编号,客户端UUID,以及全局分配的SessionID
            </summary>
        </member>
        <member name="P:TradingLib.Common.Location.FrontID">
            <summary>
            前置地址
            </summary>
        </member>
        <member name="P:TradingLib.Common.Location.ClientID">
            <summary>
            客户端UUID
            </summary>
        </member>
        <member name="T:TradingLib.Common.MGRReqInsertTradeRequest">
            <summary>
            管理端请求插入委托
            </summary>
        </member>
        <member name="T:TradingLib.Mixins.JsonObject.JsonWrapperBank">
            <summary>
            银行
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperBank.ID">
            <summary>
            银行编号
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperBank.Name">
            <summary>
            银行
            </summary>
        </member>
        <member name="T:TradingLib.Mixins.JsonObject.JsonWrapperBankAccount">
            <summary>
            代理 银行信息
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperBankAccount.mgr_fk">
            <summary>
            主域ID
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperBankAccount.Name">
            <summary>
            姓名
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperBankAccount.Bank_AC">
            <summary>
            银行帐户号码
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperBankAccount.Branch">
            <summary>
            开户支行信息
            </summary>
        </member>
        <member name="T:TradingLib.Mixins.JsonObject.JsonWrapperAgentFinanceInfoLite">
            <summary>
            代理财务信息 精简
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperAgentFinanceInfoLite.BaseMGRFK">
            <summary>
            主域编号
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperAgentFinanceInfoLite.Balance">
            <summary>
            当前权益信息
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperAgentFinanceInfoLite.PendingDeposit">
            <summary>
            待处理提现金额
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperAgentFinanceInfoLite.PendingWithDraw">
            <summary>
            待处理充值金额
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperAgentFinanceInfoLite.CashIn">
            <summary>
            充值金额
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperAgentFinanceInfoLite.CashOut">
            <summary>
            提现记录
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperAgentPaymentInfo.BaseMGRFK">
            <summary>
            主域编号
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperAgentPaymentInfo.Name">
            <summary>
            代理姓名
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperAgentPaymentInfo.Mobile">
            <summary>
            代理手机号码
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperAgentPaymentInfo.QQ">
            <summary>
            代理QQ号码
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperAgentPaymentInfo.BankAccount">
            <summary>
            银行帐户信息
            </summary>
        </member>
        <member name="T:TradingLib.Mixins.JsonObject.JsonWrapperAgentFinanceInfo">
            <summary>
            代理财务信息 全面
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperAgentFinanceInfo.BaseMGRFK">
            <summary>
            主域编号
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperAgentFinanceInfo.BankAccount">
            <summary>
            银行帐户信息
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperAgentFinanceInfo.Balance">
            <summary>
            当前权益信息
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperAgentFinanceInfo.PendingDeposit">
            <summary>
            待处理提现金额
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperAgentFinanceInfo.PendingWithDraw">
            <summary>
            待处理充值金额
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperAgentFinanceInfo.CashIn">
            <summary>
            充值金额
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperAgentFinanceInfo.CashOut">
            <summary>
            提现记录
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperAgentFinanceInfo.LastSettle">
            <summary>
            Balance对应的最近结算信息
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperAgentFinanceInfo.LatestCashOperations">
            <summary>
            近期出入金操作
            </summary>
        </member>
        <member name="T:TradingLib.Mixins.JsonObject.JsonWrapperAgentBalance">
            <summary>
            代理帐户余额记录
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperAgentBalance.mgr_fk">
            <summary>
            主域编号
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperAgentBalance.Balance">
            <summary>
            当前权益
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperAgentBalance.Settleday">
            <summary>
            结算日
            </summary>
        </member>
        <member name="T:TradingLib.Mixins.JsonObject.JsonWrapperAgentSettle">
            <summary>
            代理结算记录
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperAgentSettle.mgr_fk">
            <summary>
            主域编号
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperAgentSettle.Settleday">
            <summary>
            结算日
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperAgentSettle.Profit_Fee">
            <summary>
            直客收入
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperAgentSettle.Profit_Commission">
            <summary>
            代理佣金收入
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperAgentSettle.CashIn">
            <summary>
            资金流入 入金
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperAgentSettle.CashOut">
            <summary>
            资金流出 出金
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperAgentSettle.LastEquity">
            <summary>
            上日权益
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperAgentSettle.NowEquity">
            <summary>
            结算后权益
            </summary>
        </member>
        <member name="T:TradingLib.Mixins.JsonObject.JsonWrapperAccountBankAC">
            <summary>
            交易帐户对应的银行帐户信息
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperAccountBankAC.Name">
            <summary>
            姓名
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperAccountBankAC.Bank">
            <summary>
            银行名称
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperAccountBankAC.BankAC">
            <summary>
            银行帐户
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperAccountBankAC.Branch">
            <summary>
            开户分行
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperAccountBankAC.AgentInfo">
            <summary>
            代理信息
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperAccountBankAC.Account">
            <summary>
            交易帐号
            </summary>
        </member>
        <member name="T:TradingLib.Mixins.JsonObject.JsonWrapperReceivableAccount">
            <summary>
            收款银行
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperReceivableAccount.ID">
            <summary>
            收款银行ID
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperReceivableAccount.Bank_ID">
            <summary>
            银行ID
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperReceivableAccount.BankName">
            <summary>
            银行名称
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperReceivableAccount.Name">
            <summary>
            姓名
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperReceivableAccount.Bank_AC">
            <summary>
            银行帐号
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperReceivableAccount.Branch">
            <summary>
            分行地址
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperReceivableAccount.Domain_ID">
            <summary>
            域ID
            </summary>
        </member>
        <member name="T:TradingLib.Mixins.JsonObject.JsonWrapperCashOperation">
            <summary>
            出入金操作
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperCashOperation.mgr_fk">
            <summary>
            主域ID
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperCashOperation.Account">
            <summary>
            交易帐户
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperCashOperation.DateTime">
            <summary>
            时间
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperCashOperation.Operation">
            <summary>
            资金操作
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperCashOperation.Amount">
            <summary>
            金额
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperCashOperation.Ref">
            <summary>
            流水号
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperCashOperation.Status">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperCashOperation.Source">
            <summary>
            出入金操作来源
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperCashOperation.RecvInfo">
            <summary>
            收款银行ID
            0表示第三方支付
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperCasnTrans.mgr_fk">
            <summary>
            管理主域ID
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperCasnTrans.Account">
            <summary>
            交易帐号
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperCasnTrans.Settleday">
            <summary>
            结算日
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperCasnTrans.DateTime">
            <summary>
            发生时间
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperCasnTrans.Amount">
            <summary>
            金额 带有方向
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperCasnTrans.TransRef">
            <summary>
            对应流水
            </summary>
        </member>
        <member name="P:TradingLib.Mixins.JsonObject.JsonWrapperCasnTrans.Comment">
            <summary>
            说明
            </summary>
        </member>
        <member name="T:TradingLib.Common.BrokerTracker">
            <summary>
            成交侧交易数据维护器
            需要维护内存交易数据和记录到数据库对应表
            同时需要在重启时加载并恢复内存数据状态
            parentid
            记录该委托对应的父委托编号
            从数据库读取属于该成交的所有委托
            OrderSpliterTracker则从子委托获得对应父委托列表,并加载相关map数据
            </summary>
        </member>
        <member name="F:TradingLib.Common.BrokerTracker._orderTk">
            <summary>
            委托管理器
            </summary>
        </member>
        <member name="F:TradingLib.Common.BrokerTracker._positionTk">
            <summary>
            持仓管理器
            </summary>
        </member>
        <member name="F:TradingLib.Common.BrokerTracker._tradeTk">
            <summary>
            成交管理器
            </summary>
        </member>
        <member name="M:TradingLib.Common.BrokerTracker.GetLongPosition(System.String)">
            <summary>
            获得某个合约的多头持仓
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.BrokerTracker.GetShortPosition(System.String)">
            <summary>
            获得某个合约的空头持仓
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.BrokerTracker.GetPosition(System.String,System.Boolean)">
            <summary>
            获得某个合约某个方向的持仓
            </summary>
            <param name="symbol"></param>
            <param name="side"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.BrokerTracker.GetPendingEntryOrders(System.String,System.Boolean)">
            <summary>
            获得某个合约某个方向的开仓委托
            </summary>
            <param name="symbol"></param>
            <param name="side"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.BrokerTracker.GetPendingExitOrders(System.String,System.Boolean)">
            <summary>
            获得某个合约某个方向的平仓委托
            </summary>
            <param name="symbol"></param>
            <param name="side"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.BrokerTracker.GotOrder(TradingLib.API.Order)">
            <summary>
            获得委托
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:TradingLib.Common.BrokerTracker.GotFill(TradingLib.API.Trade)">
            <summary>
            获得成交
            </summary>
            <param name="fill"></param>
        </member>
        <member name="M:TradingLib.Common.BrokerTracker.GotTick(TradingLib.API.Tick)">
            <summary>
            响应行情
            </summary>
            <param name="k"></param>
        </member>
        <member name="M:TradingLib.Common.BrokerTracker.GotPosition(TradingLib.API.PositionDetail)">
            <summary>
            加载历史持仓数据
            </summary>
            <param name="pos"></param>
        </member>
        <member name="P:TradingLib.Common.BrokerTracker.Orders">
            <summary>
            所有委托
            </summary>
        </member>
        <member name="P:TradingLib.Common.BrokerTracker.Positions">
            <summary>
            所有成交
            </summary>
        </member>
        <member name="P:TradingLib.Common.BrokerTracker.Trades">
            <summary>
            所有成交
            </summary>
        </member>
        <member name="P:TradingLib.Common.RouterItemSetting.ID">
            <summary>
            全局序号
            </summary>
        </member>
        <member name="P:TradingLib.Common.RouterItemSetting.priority">
            <summary>
            优先级
            </summary>
        </member>
        <member name="P:TradingLib.Common.RouterItemSetting.routegroup_id">
            <summary>
            路由组ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.RouterItemSetting.vendor_id">
            <summary>
            实盘帐号ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.RouterItemSetting.rule">
            <summary>
            接受委托规则
            </summary>
        </member>
        <member name="P:TradingLib.Common.RouterItemSetting.Active">
            <summary>
            是否激活
            </summary>
        </member>
        <member name="T:TradingLib.Common.RouterItemImpl">
            <summary>
            路由与路由组映射关系
            </summary>
        </member>
        <member name="P:TradingLib.Common.RouterItemImpl.RouteGroup">
            <summary>
            路由组ID 所属路由组
            </summary>
        </member>
        <member name="P:TradingLib.Common.RouterItemImpl.Vendor">
            <summary>
            实盘帐号对象
            </summary>
        </member>
        <member name="P:TradingLib.Common.RouterGroupSetting.ID">
            <summary>
            全局ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.RouterGroupSetting.Name">
            <summary>
            路由组名称
            </summary>
        </member>
        <member name="P:TradingLib.Common.RouterGroupSetting.Strategy">
            <summary>
            策略名 决定了该成交路由组工作运行策略
            </summary>
        </member>
        <member name="P:TradingLib.Common.RouterGroupSetting.domain_id">
            <summary>
            域ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.RouterGroupSetting.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="M:TradingLib.Common.RouterGroupImpl.GetVendors">
            <summary>
            返回所有Vendor
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.RouterGroupImpl.GetBroker(System.String)">
            <summary>
            获得IBroker成交路由
            路由选择主体逻辑
            1.开仓时由策略选择 按路由有限顺序或随机选择成交路由
            2.平仓时,按所平持仓所在通道进行选择,这里涉及到拆单的问题，比如第一次开仓在A帐户,第二次开仓在B帐户,平仓时一起平仓，则委托需要拆成2个 一个从A下单,另一个从B下单
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.RouterGroupImpl.GetVendorsForOpen">
            <summary>
            返回所有可用开仓的Vendor
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.RouterGroupImpl.GetVendorsForOpenSorted">
            <summary>
            按优先级别排序获得可开仓Vendor
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.RouterGroupImpl.GetBroker(TradingLib.API.Order,System.Decimal)">
            <summary>
            返回默认的开仓通道，根据策略给出当前可用的开仓通道
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.RouterGroupImpl.GetBrokers">
            <summary>
            获得所有成交通道 
            不保证成交通道已经启动或逻辑上可用
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.RouterGroupImpl.AppendRouterItem(TradingLib.API.RouterItem)">
            <summary>
            将Broker添加到路由组
            </summary>
            <param name="broker"></param>
        </member>
        <member name="M:TradingLib.Common.RouterGroupImpl.RemoveRouterItem(TradingLib.API.RouterItem)">
            <summary>
            将Broker从路由组删除
            </summary>
            <param name="broker"></param>
        </member>
        <member name="P:TradingLib.Common.RouterGroupImpl.Domain">
            <summary>
            域
            </summary>
        </member>
        <member name="P:TradingLib.Common.RouterGroupImpl.RouterItems">
            <summary>
            返回所有路由项目
            </summary>
        </member>
        <member name="T:TradingLib.Common.PositionAdjustmentResult">
            <summary>
            净持仓操作结果 
            只针对开仓做处理,平仓的话按照在那里开仓就在哪里平仓的原则,不管保证金变化,均要在该通道进行平仓
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionAdjustmentResult.LongEntry">
            <summary>
            多头开仓数量
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionAdjustmentResult.LongExit">
             <summary>
            多头平仓数量
             </summary>
        </member>
        <member name="P:TradingLib.Common.PositionAdjustmentResult.ShortEntry">
            <summary>
            空头开仓数量
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionAdjustmentResult.ShortExit">
            <summary>
            空头平仓数量
            </summary>
        </member>
        <member name="T:TradingLib.Common.PositionMetricImpl">
            <summary>
            经持仓状态度量 用于判断是否可以进行净持仓操作
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionMetricImpl.Symbol">
            <summary>
            合约
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionMetricImpl.LongHoldSize">
            <summary>
            多头持有仓位
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionMetricImpl.LongPendingEntrySize">
            <summary>
            多头待开数量
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionMetricImpl.LongPendingExitSize">
            <summary>
            多头待平数量
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionMetricImpl.LongCanExitSize">
            <summary>
            多方可以平掉的数量
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionMetricImpl.ShortHoldSize">
            <summary>
            空头持仓仓位
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionMetricImpl.ShortPendingEntrySize">
            <summary>
            空头待开数量
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionMetricImpl.ShortPendingExitSize">
            <summary>
            空头待平数量
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionMetricImpl.ShortCanExitSaize">
            <summary>
            空头可以平掉的数量
            </summary>
        </member>
        <member name="P:TradingLib.Common.DomainImpl.ID">
            <summary>
            域ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.DomainImpl.Name">
            <summary>
            域名称
            </summary>
        </member>
        <member name="P:TradingLib.Common.DomainImpl.LinkMan">
            <summary>
            联系人
            </summary>
        </member>
        <member name="P:TradingLib.Common.DomainImpl.Mobile">
            <summary>
            手机号码
            </summary>
        </member>
        <member name="P:TradingLib.Common.DomainImpl.QQ">
            <summary>
            QQ号码
            </summary>
        </member>
        <member name="P:TradingLib.Common.DomainImpl.Email">
            <summary>
            邮箱
            </summary>
        </member>
        <member name="P:TradingLib.Common.DomainImpl.AccLimit">
            <summary>
            帐户数目限制
            </summary>
        </member>
        <member name="P:TradingLib.Common.DomainImpl.DateExpired">
            <summary>
            过期日
            </summary>
        </member>
        <member name="P:TradingLib.Common.DomainImpl.DateCreated">
            <summary>
            创建日
            </summary>
        </member>
        <member name="P:TradingLib.Common.DomainImpl.Super">
            <summary>
            是否是超级域
            </summary>
        </member>
        <member name="P:TradingLib.Common.DomainImpl.Dedicated">
            <summary>
            独立安装标识
            </summary>
        </member>
        <member name="P:TradingLib.Common.DomainImpl.RouterGroupLimit">
            <summary>
            路由组数量限制
            </summary>
        </member>
        <member name="P:TradingLib.Common.DomainImpl.RouterItemLimit">
            <summary>
            路由组内路由项目数量限制
            </summary>
        </member>
        <member name="P:TradingLib.Common.DomainImpl.VendorLimit">
            <summary>
            实盘帐户数量限制
            </summary>
        </member>
        <member name="P:TradingLib.Common.DomainImpl.InterfaceList">
            <summary>
            接口列表
            </summary>
        </member>
        <member name="P:TradingLib.Common.DomainImpl.FinSPList">
            <summary>
            配资服务计划列表
            </summary>
        </member>
        <member name="P:TradingLib.Common.DomainImpl.Module_Agent">
            <summary>
            代理模块
            </summary>
        </member>
        <member name="P:TradingLib.Common.DomainImpl.Module_SubAgent">
            <summary>
            是否支持多级代理
            </summary>
        </member>
        <member name="P:TradingLib.Common.DomainImpl.Module_FinService">
            <summary>
            配资模块
            </summary>
        </member>
        <member name="P:TradingLib.Common.DomainImpl.Module_PayOnline">
            <summary>
            在线出入金模块
            </summary>
        </member>
        <member name="P:TradingLib.Common.DomainImpl.Router_Live">
            <summary>
            实盘路由
            </summary>
        </member>
        <member name="P:TradingLib.Common.DomainImpl.Router_Sim">
            <summary>
            模拟路由
            </summary>
        </member>
        <member name="P:TradingLib.Common.DomainImpl.Misc_InsertTrade">
            <summary>
            调试插入成交
            </summary>
        </member>
        <member name="P:TradingLib.Common.DomainImpl.CFG_SyncVendor_ID">
            <summary>
            
            </summary>
        </member>
        <member name="P:TradingLib.Common.GlobalConfig.FlatTimeAheadOfMarketClose">
            <summary>
            收盘前提前多少时间强平持仓
            </summary>
        </member>
        <member name="P:TradingLib.Common.GlobalConfig.MainDomain">
            <summary>
            全局主域
            </summary>
        </member>
        <member name="P:TradingLib.Common.GlobalConfig.DefaultAccountLen">
            <summary>
            默认帐户长度
            </summary>
        </member>
        <member name="P:TradingLib.Common.GlobalConfig.PrefixReal">
            <summary>
            实盘交易帐户前缀
            </summary>
        </member>
        <member name="P:TradingLib.Common.GlobalConfig.PrefixSim">
            <summary>
            模拟交易帐户前缀
            </summary>
        </member>
        <member name="P:TradingLib.Common.GlobalConfig.DefaultBroker">
            <summary>
            默认期货公司
            </summary>
        </member>
        <member name="P:TradingLib.Common.GlobalConfig.DefaultBankID">
            <summary>
            默认银行
            </summary>
        </member>
        <member name="P:TradingLib.Common.GlobalConfig.DefaultBankAC">
            <summary>
            默认银行帐号
            </summary>
        </member>
        <member name="P:TradingLib.Common.GlobalConfig.IsDevelop">
            <summary>
            是否处于开发模式
            </summary>
        </member>
        <member name="P:TradingLib.Common.GlobalConfig.DefaultPassword">
            <summary>
            默认交易帐户密码
            创建交易帐号时，如果没有设定密码则使用默认密码
            </summary>
        </member>
        <member name="P:TradingLib.Common.GlobalConfig.VendorName">
            <summary>
            平台名称
            </summary>
        </member>
        <member name="P:TradingLib.Common.GlobalConfig.DealerPrompt">
            <summary>
            交易员登入提示
            </summary>
        </member>
        <member name="P:TradingLib.Common.GlobalConfig.SimPrompt">
            <summary>
            模拟交易帐号登入提示
            </summary>
        </member>
        <member name="P:TradingLib.Common.GlobalConfig.RealPrompt">
            <summary>
            实盘帐户登入提示
            </summary>
        </member>
        <member name="P:TradingLib.Common.GlobalConfig.NeedStartDefaultConnector">
            <summary>
            是否需要同步启动默认通道
            </summary>
        </member>
        <member name="T:TradingLib.Common.PositionTracker">
            <summary>
            easily trade positions for a collection of securities.
            automatically builds positions from existing positions and new trades.
            管理交易仓位
            </summary>
        </member>
        <member name="M:TradingLib.Common.PositionTracker.#ctor(System.String,TradingLib.API.QSEnumPositionDirectionType)">
            <summary>
            create tracker with approximate # of positions
            </summary>
            <param name="estimatedPositions"></param>
        </member>
        <member name="M:TradingLib.Common.PositionTracker.PositionTracker_NewTxt(System.String,System.Int32)">
            <summary>
            当有新的标签创建时 对外触发通知持仓对象的生成
            </summary>
            <param name="txt"></param>
            <param name="idx"></param>
        </member>
        <member name="M:TradingLib.Common.PositionTracker.GotPosition(TradingLib.API.PositionDetail)">
            <summary>
            获得一个持仓明细数据 用于加载隔夜持仓数据 生成初始化持仓状态
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:TradingLib.Common.PositionTracker.GotFill(TradingLib.API.Trade)">
            <summary>
            获得一个成交对象
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:TradingLib.Common.PositionTracker.GotTick(TradingLib.API.Tick)">
            <summary>
            用Tick行情驱动持仓对象 实时更新持仓的行情数据用于获得动态浮动盈亏
            </summary>
            <param name="k"></param>
        </member>
        <member name="M:TradingLib.Common.PositionTracker.Clear">
            <summary>
            clear all positions.  use with caution.
            also resets default account.
            </summary>
        </member>
        <member name="M:TradingLib.Common.PositionTracker.Adjust(TradingLib.API.Trade)">
            <summary>
            处理一笔成交,用于更新position状态,通过symbol+account形成唯一position标识符
            对于新的持仓 是通过从成交转化成Position获得持仓
            </summary>
            <param name="fill"></param>
            <returns>any closed PL for adjustment</returns>
        </member>
        <member name="M:TradingLib.Common.PositionTracker.Adjust(TradingLib.API.PositionDetail)">
            <summary>
            获得持仓明细数据
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.PositionTracker.DirectionType">
            <summary>
            持仓维护器 持仓方向
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionTracker.Item(System.String)">
            <summary>
            get position given positions symbol (assumes default account)
            查询某个symbol的position
            如果没有对应的持仓会返回一个空的默认持仓
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.PositionTracker.Item(System.String,System.String)">
            <summary>
            get a position in tracker given symbol and account
            通过symbol,account来查询某个position
            如果没有对应的持仓会返回一个空的默认持仓,此处并没有在PositionTracker加入该持仓
            此处持仓是通过合约symbol创建的因此没有对应oSymbol数据需要在获得PositionDetail或成交时候获得对应的Symbol数据
            </summary>
            <param name="symbol"></param>
            <param name="account"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.PositionTracker.Item(System.Int32)">
            <summary>
            get position given positions symbol (assumes default account)
            通过idx来查询position
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="E:TradingLib.Common.PositionTracker.NewSymbol">
            <summary>
            called when a new position is added to tracker.
            当有新的symbol产生position时,触发该事件
            </summary>
        </member>
        <member name="E:TradingLib.Common.PositionTracker.NewPositionEvent">
            <summary>
            当有新的持仓数据被建立时触发
            比如某个帐户原来没有持仓，新建开仓单开仓后,PositionTracker就会为他创建一个Position
            </summary>
        </member>
        <member name="T:TradingLib.Common.StopLimitOrder">
            <summary>
            Create stop limit orders.
            </summary>
        </member>
        <member name="T:TradingLib.Common.BuyStopLimit">
            <summary>
            Create buy stop limit orders.
            </summary>
        </member>
        <member name="T:TradingLib.Common.SellStopLimit">
            <summary>
            Create sell-stop limit orders.
            </summary>
        </member>
        <member name="T:TradingLib.Common.PositionTransaction">
            <summary>
            开仓或者平仓数据
            </summary>
        </member>
        <member name="M:TradingLib.Common.PositionTransaction.GenPositionOperation(System.Int32,System.Int32)">
            <summary>
            通过持仓前后数量 获得对应的仓位操作标识
            </summary>
            <param name="beforesize"></param>
            <param name="aftersize"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.PositionTransaction.#ctor(TradingLib.API.Trade,TradingLib.API.Symbol,System.Int32,System.Int32,System.Decimal,System.Decimal)">
            <summary>
            生成PositionTransaction
            </summary>
            <param name="fill"></param>
            <param name="security"></param>
            <param name="beforesize"></param>
            <param name="aftersize"></param>
            <param name="highest"></param>
            <param name="lowest"></param>
        </member>
        <member name="M:TradingLib.Common.PositionTransaction.#ctor(TradingLib.Common.PositionTransaction)">
            <summary>
            复制一个PositionTransaction
            </summary>
            <param name="copythis"></param>
        </member>
        <member name="P:TradingLib.Common.PositionTransaction.BeforeSize">
            <summary>
            该成交前仓位数量(绝对值)
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionTransaction.AfterSize">
            <summary>
            该成交后仓位数量(绝对值)
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionTransaction.Trade">
            <summary>
            该positiontransaction底层的成交记录
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionTransaction.PosOperation">
            <summary>
            仓位操作标识 开仓 加仓 减仓 平仓
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionTransaction.oSymbol">
            <summary>
            合约对象
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionTransaction.Account">
            <summary>
            交易帐户ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionTransaction.Symbol">
            <summary>
            交易合约
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionTransaction.Security">
            <summary>
            品种
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionTransaction.Time">
            <summary>
            时间
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionTransaction.Size">
            <summary>
            数量
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionTransaction.Multiple">
            <summary>
            合约乘数
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionTransaction.Price">
            <summary>
            价格
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionTransaction.Commission">
            <summary>
            手续费
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionTransaction.Highest">
            <summary>
            持仓期间最高价
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionTransaction.Lowest">
            <summary>
            持仓期间最低价
            </summary>
        </member>
        <member name="T:TradingLib.Common.Log">
            <summary>
            TradeLink logging to a file
            </summary>
        </member>
        <member name="M:TradingLib.Common.Log.#ctor(System.String)">
            <summary>
            create a log
            </summary>
            <param name="program"></param>
        </member>
        <member name="M:TradingLib.Common.Log.#ctor(System.String,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            create a log
            </summary>
            <param name="logname"></param>
            <param name="dateinlogname"></param>
            <param name="appendtolog"></param>
            <param name="path"></param>
            <param name="timestamps"></param>
        </member>
        <member name="M:TradingLib.Common.Log.GotDebug(System.String)">
            <summary>
            log something
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:TradingLib.Common.Log.Stop">
            <summary>e
            close the log
            </summary>
        </member>
        <member name="P:TradingLib.Common.Log.Date">
            <summary>
            gets current date associated with log
            </summary>
        </member>
        <member name="P:TradingLib.Common.Log.FullName">
            <summary>
            full path of log file
            </summary>
        </member>
        <member name="P:TradingLib.Common.Log.Content">
            <summary>
            contents of log file
            </summary>
        </member>
        <member name="P:TradingLib.Common.QrySettleInfoRequest.Account">
            <summary>
            交易帐号
            </summary>
        </member>
        <member name="P:TradingLib.Common.QrySettleInfoRequest.Tradingday">
            <summary>
            交易日
            </summary>
        </member>
        <member name="T:TradingLib.Common.MGRLoginRequest">
            <summary>
            管理端登入请求
            </summary>
        </member>
        <member name="P:TradingLib.Common.MgrLoginResponse.LoginID">
            <summary>
            登入ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.MgrLoginResponse.Name">
            <summary>
            姓名
            </summary>
        </member>
        <member name="P:TradingLib.Common.MgrLoginResponse.ManagerType">
            <summary>
            管理员类别
            </summary>
        </member>
        <member name="P:TradingLib.Common.MgrLoginResponse.Mobile">
            <summary>
            手机号码
            </summary>
        </member>
        <member name="P:TradingLib.Common.MgrLoginResponse.QQ">
            <summary>
            QQ号码
            </summary>
        </member>
        <member name="P:TradingLib.Common.MgrLoginResponse.BaseMGRFK">
            <summary>
            所属主域ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.MgrLoginResponse.MGRID">
            <summary>
            管理ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.MgrLoginResponse.UIAccess">
            <summary>
            界面授权权限
            </summary>
        </member>
        <member name="P:TradingLib.Common.MgrLoginResponse.Domain">
            <summary>
            域对象
            </summary>
        </member>
        <member name="P:TradingLib.Common.PermissionFieldAttr.Title">
            <summary>
            权限名称
            </summary>
        </member>
        <member name="P:TradingLib.Common.PermissionFieldAttr.Desp">
            <summary>
            权限描述
            </summary>
        </member>
        <member name="T:TradingLib.Common.QryInstrumentCommissionRateRequest">
            <summary>
            查询合约手续费
            </summary>
        </member>
        <member name="M:TradingLib.Common.QryInstrumentCommissionRateRequest.#ctor">
            <summary>
            查询合约手续费率
            </summary>
        </member>
        <member name="P:TradingLib.Common.QryInstrumentCommissionRateRequest.TradingAccount">
            <summary>
            交易帐户
            </summary>
        </member>
        <member name="P:TradingLib.Common.QryInstrumentCommissionRateRequest.Symbol">
            <summary>
            合约
            </summary>
        </member>
        <member name="T:TradingLib.Common.RspQryInstrumentCommissionRateResponse">
            <summary>
            合约手续费率回报
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspQryInstrumentCommissionRateResponse.TradingAccount">
            <summary>
            交易帐户
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspQryInstrumentCommissionRateResponse.Symbol">
            <summary>
            合约
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspQryInstrumentCommissionRateResponse.OpenRatioByMoney">
            <summary>
            开仓手续费率 按比例收取
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspQryInstrumentCommissionRateResponse.OpenRatioByVolume">
            <summary>
            开仓手续费 按量收取
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspQryInstrumentCommissionRateResponse.CloseRatioByMoney">
            <summary>
            平今手续费率 按比例收取
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspQryInstrumentCommissionRateResponse.CloseRatioByVolume">
            <summary>
            平今手续费 按量收取
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspQryInstrumentCommissionRateResponse.CloseTodayRatioByMoney">
            <summary>
            平昨手续费率 按比例收取
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspQryInstrumentCommissionRateResponse.CloseTodayRatioByVolume">
            <summary>
            平昨手续费 按量收取
            </summary>
        </member>
        <member name="M:TradingLib.Common.QryInstrumentMarginRateRequest.#ctor">
            <summary>
            查询合约手续费率
            </summary>
        </member>
        <member name="P:TradingLib.Common.QryInstrumentMarginRateRequest.TradingAccount">
            <summary>
            交易帐户
            </summary>
        </member>
        <member name="P:TradingLib.Common.QryInstrumentMarginRateRequest.Symbol">
            <summary>
            合约
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspQryInstrumentMarginRateResponse.LongMarginRatioByMoney">
            <summary>
            多头保证金你率
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspQryInstrumentMarginRateResponse.LongMarginRatioByVolume">
            <summary>
            按量
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspQryInstrumentMarginRateResponse.ShortMarginRatioByMoney">
            <summary>
            空头保证金 按金额 10%
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspQryInstrumentMarginRateResponse.ShortMarginRatioByVoume">
            <summary>
            空头保证金按量 每手5000
            </summary>
        </member>
        <member name="T:TradingLib.Common.ConnectorConfig">
            <summary>
            成交接口配置信息 
            设定服务器地址 端口 登入用户名 和密码等相关参数
            </summary>
        </member>
        <member name="P:TradingLib.Common.ConnectorConfig.ID">
            <summary>
            数据库编号
            </summary>
        </member>
        <member name="P:TradingLib.Common.ConnectorConfig.srvinfo_ipaddress">
            <summary>
            地址
            </summary>
        </member>
        <member name="P:TradingLib.Common.ConnectorConfig.srvinfo_port">
            <summary>
            端口
            </summary>
        </member>
        <member name="P:TradingLib.Common.ConnectorConfig.srvinfo_field1">
            <summary>
            扩展字段1
            </summary>
        </member>
        <member name="P:TradingLib.Common.ConnectorConfig.srvinfo_field2">
            <summary>
            扩展字段2
            </summary>
        </member>
        <member name="P:TradingLib.Common.ConnectorConfig.srvinfo_field3">
            <summary>
            扩展字段3
            </summary>
        </member>
        <member name="P:TradingLib.Common.ConnectorConfig.usrinfo_userid">
            <summary>
            登入名
            </summary>
        </member>
        <member name="P:TradingLib.Common.ConnectorConfig.usrinfo_password">
            <summary>
            登入密码
            </summary>
        </member>
        <member name="P:TradingLib.Common.ConnectorConfig.usrinfo_field1">
            <summary>
            扩展字段1
            </summary>
        </member>
        <member name="P:TradingLib.Common.ConnectorConfig.usrinfo_field2">
            <summary>
            扩展字段2
            </summary>
        </member>
        <member name="P:TradingLib.Common.ConnectorConfig.interface_fk">
            <summary>
            接口定义编号
            </summary>
        </member>
        <member name="P:TradingLib.Common.ConnectorConfig.Token">
            <summary>
            唯一标识
            </summary>
        </member>
        <member name="P:TradingLib.Common.ConnectorConfig.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:TradingLib.Common.ConnectorConfig.Interface">
            <summary>
            接口
            </summary>
        </member>
        <member name="P:TradingLib.Common.ConnectorConfig.vendor_id">
            <summary>
            对应的实盘帐户全局ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.ConnectorConfig.domain_id">
            <summary>
            域ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.ConnectorConfig.Domain">
            <summary>
            域
            </summary>
        </member>
        <member name="P:TradingLib.Common.ConnectorConfig.NeedVendor">
            <summary>
            是否需要绑定Vendor
            </summary>
        </member>
        <member name="P:TradingLib.Common.ConnectorConfig.IsValid">
            <summary>
            是否有效
            </summary>
        </member>
        <member name="T:TradingLib.Common.CommissionTemplateItem">
            <summary>
            手续费模板的设置项
            </summary>
        </member>
        <member name="M:TradingLib.Common.CommissionTemplateItem.GetItemKey">
            <summary>
            获得该手续费项目的键值
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.CommissionTemplateItem.CalCommission(TradingLib.API.Trade,TradingLib.API.QSEnumOffsetFlag)">
            <summary>
            计算手续费
            </summary>
            <param name="f"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="T:TradingLib.Common.SettlementImpl">
            <summary>
            结算记录
            </summary>
        </member>
        <member name="T:TradingLib.Common.SecurityFamilyImpl">
            <summary>
            证券品种簇定义
            </summary>
        </member>
        <member name="P:TradingLib.Common.SecurityFamilyImpl.Code">
            <summary>
            品种代号
            </summary>
        </member>
        <member name="P:TradingLib.Common.SecurityFamilyImpl.Name">
            <summary>
            品种名称
            </summary>
        </member>
        <member name="P:TradingLib.Common.SecurityFamilyImpl.Currency">
            <summary>
            货币类别
            </summary>
        </member>
        <member name="P:TradingLib.Common.SecurityFamilyImpl.Type">
            <summary>
            品种类别
            </summary>
        </member>
        <member name="P:TradingLib.Common.SecurityFamilyImpl.Exchange">
            <summary>
            所属交易所
            </summary>
        </member>
        <member name="P:TradingLib.Common.SecurityFamilyImpl.Multiple">
            <summary>
            乘数
            </summary>
        </member>
        <member name="P:TradingLib.Common.SecurityFamilyImpl.PriceTick">
            <summary>
            最小价格变动
            </summary>
        </member>
        <member name="P:TradingLib.Common.SecurityFamilyImpl.Tradeable">
            <summary>
            是否可交易
            </summary>
        </member>
        <member name="P:TradingLib.Common.SecurityFamilyImpl.UnderLaying">
            <summary>
            底层证券
            某个衍生品证券会依赖于底层证券
            比如沪深300股指期货依赖于沪深300，沪深300股指期权依赖于沪深300
            沪深300不可交易，而起衍生品证券可以进行交易
            </summary>
        </member>
        <member name="P:TradingLib.Common.SecurityFamilyImpl.EntryCommission">
            <summary>
            开仓手续费
            </summary>
        </member>
        <member name="P:TradingLib.Common.SecurityFamilyImpl.ExitCommission">
            <summary>
            平仓手续费
            </summary>
        </member>
        <member name="P:TradingLib.Common.SecurityFamilyImpl.Margin">
            <summary>
            保证金比例
            </summary>
        </member>
        <member name="P:TradingLib.Common.SecurityFamilyImpl.ExtraMargin">
            <summary>
            额外保证金字段
            用于在基本保证金外提供额外质押
            </summary>
        </member>
        <member name="P:TradingLib.Common.SecurityFamilyImpl.MaintanceMargin">
            <summary>
            过夜保证金,如果需要过夜则需要提供Maintance保证金
            </summary>
        </member>
        <member name="P:TradingLib.Common.SecurityFamilyImpl.MarketTime">
            <summary>
            交易时间段 开市时间
            </summary>
        </member>
        <member name="P:TradingLib.Common.CashTransaction.Account">
            <summary>
            交易帐号
            </summary>
        </member>
        <member name="P:TradingLib.Common.CashTransaction.Settleday">
            <summary>
            结算日
            </summary>
        </member>
        <member name="P:TradingLib.Common.CashTransaction.DateTime">
            <summary>
            出入金操作时间
            </summary>
        </member>
        <member name="P:TradingLib.Common.CashTransaction.Amount">
            <summary>
            金额
            </summary>
        </member>
        <member name="P:TradingLib.Common.CashTransaction.Comment">
            <summary>
            出入金备注
            </summary>
        </member>
        <member name="P:TradingLib.Common.CashTransaction.TransRef">
            <summary>
            出入金流水号
            </summary>
        </member>
        <member name="T:TradingLib.Common.BarListImpl">
            <summary>
            Holds a succession of bars.  Will acceptt ticks and automatically create new bars as needed.
            </summary>
        </member>
        <member name="M:TradingLib.Common.BarListImpl.Int2BarInterval(System.Int32[])">
            <summary>
            converts integer array of intervals to BarIntervals... supplying custom interval for any unrecognized interval types.
            </summary>
            <param name="intervals"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.BarListImpl.BarInterval2Int(TradingLib.API.BarInterval[])">
            <summary>
            converts array of BarIntervals to integer intervals.
            </summary>
            <param name="ints"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.BarListImpl.#ctor(System.String)">
            <summary>
            creates barlist with defined symbol and requests all intervals
            </summary>
            <param name="symbol"></param>
        </member>
        <member name="M:TradingLib.Common.BarListImpl.#ctor(TradingLib.API.BarInterval,System.String)">
            <summary>
            creates a barlist with requested interval and defined symbol
            </summary>
            <param name="interval"></param>
            <param name="symbol"></param>
        </member>
        <member name="M:TradingLib.Common.BarListImpl.#ctor(System.String,System.Int32)">
            <summary>
            creates a barlist with requested custom interval and defined symbol
            </summary>
            <param name="symbol"></param>
            <param name="interval"></param>
        </member>
        <member name="M:TradingLib.Common.BarListImpl.#ctor(System.String,System.Int32,TradingLib.API.BarInterval)">
            <summary>
            creates a barlist with custom interval and a custom type (tick/vol)
            </summary>
            <param name="symbol"></param>
            <param name="interval"></param>
            <param name="type"></param>
        </member>
        <member name="M:TradingLib.Common.BarListImpl.#ctor(TradingLib.API.BarInterval)">
            <summary>
            creates a barlist with requested interval.  symbol will be defined by first tick received
            </summary>
            <param name="interval"></param>
        </member>
        <member name="M:TradingLib.Common.BarListImpl.#ctor">
            <summary>
            creates barlist with no symbol defined and requests 5min bars
            </summary>
        </member>
        <member name="M:TradingLib.Common.BarListImpl.#ctor(System.String,TradingLib.API.BarInterval[])">
            <summary>
            creates barlist with specified symbol and requested intervals
            </summary>
            <param name="symbol"></param>
            <param name="intervals"></param>
        </member>
        <member name="M:TradingLib.Common.BarListImpl.#ctor(TradingLib.API.BarList)">
            <summary>
            make copy of a barlist.  remember you must re-setup GotNewBar events after using this.
            </summary>
            <param name="original"></param>
        </member>
        <member name="M:TradingLib.Common.BarListImpl.backfillbars(System.String,System.Decimal[],System.Int32,TradingLib.Common.BarListTracker@,System.Int32,TradingLib.API.DebugDelegate)">
            <summary>
            fill bars with arbitrary price data for a symbol
            通过固定时点的数据来生成 barlist 
            </summary>
            <param name="sym"></param>
            <param name="prices"></param>
            <param name="startdate"></param>
            <param name="blt"></param>
            <param name="interval"></param>
            <param name="debugs"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.BarListImpl.InsertBar(TradingLib.API.BarList,TradingLib.API.Bar,System.Int32)">
            <summary>
            insert a bar at particular place in the list.
            REMEMBER YOU MUST REHANDLE GOTNEWBAR EVENT AFTER CALLING THIS.
            将某个Bar插入到对应的具体位置index
            </summary>
            <param name="bl"></param>
            <param name="b"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.BarListImpl.InsertBarList(TradingLib.API.BarList,TradingLib.API.BarList)">
            <summary>
            insert one barlist into another barlist
            REMEMBER: You must re-handle the GotNewBar event after calling this method.
            You should also ensure that inserted barlist has same intervals/types as original barlist.
            </summary>
            <param name="bl"></param>
            <param name="insert"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.BarListImpl.#ctor(System.String,System.Int32[],TradingLib.API.BarInterval[])">
            <summary>
            creates a barlist with array of custom intervals
            </summary>
            <param name="symbol"></param>
            <param name="intervals"></param>
        </member>
        <member name="M:TradingLib.Common.BarListImpl.IntervalCount(TradingLib.API.BarInterval)">
            <summary>
            gets count for given bar interval
            </summary>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.BarListImpl.IntervalCount(System.Int32)">
            <summary>
            gets count for given bar interval
            </summary>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.BarListImpl.LastInterval(TradingLib.API.BarInterval)">
            <summary>
            gets the last bar in specified interval
            </summary>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.BarListImpl.LastInterval(System.Int32)">
            <summary>
            gets the last bar for a specified seconds interval
            </summary>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.BarListImpl.CountInterval(TradingLib.API.BarInterval)">
            <summary>
            gets count of bars in specified interval
            </summary>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.BarListImpl.CountInterval(System.Int32)">
            <summary>
            gets the count of bars in a specified seconds interval
            </summary>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.BarListImpl.RecentBarInterval(TradingLib.API.BarInterval)">
            <summary>
            gets most recent bar from specified interval
            </summary>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.BarListImpl.Has(System.Int32,TradingLib.API.BarInterval)">
            <summary>
            returns true if barslist has at least minimum # of bars for specified interval
            </summary>
            <param name="minBars"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.BarListImpl.Has(System.Int32,System.Int32)">
            <summary>
            returns true if barlist has minimum number of bars for specified seconds interval
            </summary>
            <param name="minBars"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.BarListImpl.Has(System.Int32)">
            <summary>
            returns true if barlist has at least minimum # of bars for default interval
            </summary>
            <param name="minBars"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.BarListImpl.Reset">
            <summary>
            erases all bar data
            </summary>
        </member>
        <member name="M:TradingLib.Common.BarListImpl.FromCSV(System.String,System.String)">
            <summary>
            Create a barlist from a succession of bar records provided as comma-delimited OHLC+volume data.
            从csv文件导入bar数据
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="file">The file containing the CSV records.</param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.BarListImpl.GetNearestIntraBar(TradingLib.API.BarList,System.Int32,TradingLib.API.BarInterval)">
            <summary>
            find the bar # that matches a given time
            查找某个时间的Bar在Barlist中对应的序号
            </summary>
            <param name="bl"></param>
            <param name="time"></param>
            <param name="bint"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.BarListImpl.FillBars(System.Collections.Generic.IList{TradingLib.API.Bar})">
            <summary>
            向默认频率数据里面填充Bar数据
            </summary>
            <param name="barlist"></param>
        </member>
        <member name="M:TradingLib.Common.BarListImpl.DayFromURL(System.String,System.String)">
            <summary>
            Populate the day-interval barlist of this instance from a URL, where the results are returned as a CSV file.  URL should accept requests in the form of http://url/get.py?sym=IBM
            </summary>
            <param name="url">The URL.</param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.BarListImpl.DayFromAny(System.String)">
            <summary>
            attempts to get year worth of daily data from google, if fails tries yahoo.
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.BarListImpl.DayFromGoogle(System.String,System.Int32,System.Int32)">
            <summary>
            gets specific date range of bars from google
            </summary>
            <param name="symbol"></param>
            <param name="startdate"></param>
            <param name="enddate"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.BarListImpl.DayFromGoogle(System.String)">
            <summary>
            Populate the day-interval barlist using google finance as the source.
            </summary>
            <returns></returns>
        </member>
        <member name="F:TradingLib.Common.BarListImpl._fromepf">
            <summary>
            Build a barlist using an EPF file as the source
            </summary>
            <param name="filename">The filename.</param>
            <returns>barlist</returns>
        </member>
        <member name="M:TradingLib.Common.BarListImpl.HistSource_gotTick(TradingLib.API.Tick)">
            <summary>
            create barlist from a tik file using given intervals/types
            </summary>
            <param name="filename"></param>
            <param name="uselast"></param>
            <param name="usebid"></param>
            <param name="intervals"></param>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.BarListImpl.GetBarIndexPreceeding(TradingLib.API.BarList,System.Int32)">
            <summary>
            gets index of bar that preceeds given date
            按照日期获得bar对应的序号
            </summary>
            <param name="chart"></param>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.BarListImpl.GetBarIndexPreceeding(TradingLib.API.BarList,System.Int32,System.Int32)">
            <summary>
            gets preceeding bar by time (assumes same day)
            获得当前时间对应的bar序号
            </summary>
            <param name="chart"></param>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.BarListImpl.GetBarPreceeding(TradingLib.API.BarList,System.Int32)">
            <summary>
            gets bar that preceeds a given date (invalid if no preceeding bar)
            </summary>
            <param name="chart"></param>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.BarListImpl.DayFromYahoo(System.String)">
             <summary>
             Populate the day-interval barlist using google finance as the source.
             </summary>
             <returns></returns>
            
        </member>
        <member name="M:TradingLib.Common.BarListImpl.DayFromEuronext(System.String)">
             <summary>
             Populate the day-interval barlist using Euronext.com as the source.
             </summary>
             <param name="isin">The ISIN (mnemonics not accepted)</param>
             <returns></returns>
            
        </member>
        <member name="M:TradingLib.Common.BarListImpl.GetUniqueIntervals(TradingLib.API.BarInterval[])">
            <summary>
            given some number of intervals, return a list of same intervals with duplicates removed
            </summary>
            <param name="ints"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.BarListImpl.GetUniqueIntervals(System.Int32[])">
            <summary>
            given some number of intervals, return a list of same intervals with duplicates removed
            </summary>
            <param name="ints"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.BarListImpl.ALLINTERVALS">
            <summary>
            gets array of all possible non custom bar intevals
            </summary>
        </member>
        <member name="P:TradingLib.Common.BarListImpl.Intervals">
            <summary>
            gets intervals available/requested by this barlist when it was created
            </summary>
        </member>
        <member name="P:TradingLib.Common.BarListImpl.CustomIntervals">
            <summary>
            gets all available/requested intervals as a custom array of integers
            </summary>
        </member>
        <member name="P:TradingLib.Common.BarListImpl.NewBar">
            <summary>
            set true for new bar.  don't use this, use GotNewBar event as it's faster.
            </summary>
        </member>
        <member name="P:TradingLib.Common.BarListImpl.Symbol">
            <summary>
            symbol for bar
            </summary>
        </member>
        <member name="P:TradingLib.Common.BarListImpl.isValid">
            <summary>
            returns true if bar has symbol and has requested intervals
            </summary>
        </member>
        <member name="P:TradingLib.Common.BarListImpl.First">
            <summary>
            gets first bar in any interval
            </summary>
        </member>
        <member name="P:TradingLib.Common.BarListImpl.DefaultCustomInterval">
            <summary>
            gets or sets the default interval in seconds
            </summary>
        </member>
        <member name="P:TradingLib.Common.BarListImpl.DefaultInterval">
            <summary>
            gets or sets the default interval in bar intervals
            </summary>
        </member>
        <member name="P:TradingLib.Common.BarListImpl.Item(System.Int32)">
            <summary>
            gets specific bar in specified interval
            </summary>
            <param name="barnumber"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.BarListImpl.Item(System.Int32,TradingLib.API.BarInterval)">
            <summary>
            gets a specific bar in specified interval
            </summary>
            <param name="barnumber"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.BarListImpl.Item(System.Int32,System.Int32)">
            <summary>
            gets a specific bar in specified seconds interval
            </summary>
            <param name="barnumber"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.BarListImpl.Last">
            <summary>
            gets the last bar in default interval
            </summary>
        </member>
        <member name="P:TradingLib.Common.BarListImpl.Count">
            <summary>
            gets the # of bars in default interval
            </summary>
        </member>
        <member name="P:TradingLib.Common.BarListImpl.RecentBar">
            <summary>
            gets most recent bar from default interval
            </summary>
        </member>
        <member name="E:TradingLib.Common.BarListImpl.GotNewBar">
            <summary>
            this event is thrown when a new bar arrives
            </summary>
        </member>
        <member name="M:TradingLib.Common.RegisterSymbolsRequest.SetSymbols(System.String[])">
            <summary>
            设定合约
            </summary>
            <param name="symbols"></param>
        </member>
        <member name="T:TradingLib.Common.QryRegisterBankAccountRequest">
            <summary>
            请求查询注册银行帐号
            </summary>
        </member>
        <member name="T:TradingLib.Common.RspQryRegisterBankAccountResponse">
            <summary>
            注册银行帐号返回
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspQryRegisterBankAccountResponse.TradingAccount">
            <summary>
            交易帐户
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspQryRegisterBankAccountResponse.BankName">
            <summary>
            银行名称
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspQryRegisterBankAccountResponse.BankID">
            <summary>
            银行ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspQryRegisterBankAccountResponse.BankAC">
            <summary>
            银行交易帐号
            </summary>
        </member>
        <member name="T:TradingLib.Common.MGRQryExchangeRequuest">
            <summary>
            查询交易所信息
            </summary>
        </member>
        <member name="T:TradingLib.Common.RspMGRQryExchangeResponse">
            <summary>
            查询交易所回报
            </summary>
        </member>
        <member name="T:TradingLib.Common.MGRQrySecurityRequest">
            <summary>
            查询品种
            </summary>
        </member>
        <member name="T:TradingLib.Common.RspMGRQrySecurityResponse">
            <summary>
            查询品种回报
            </summary>
        </member>
        <member name="T:TradingLib.Common.MGRReqAddSecurityRequest">
            <summary>
            添加品种请求
            </summary>
        </member>
        <member name="T:TradingLib.Common.RspMGRReqAddSecurityResponse">
            <summary>
            添加品种回报
            </summary>
        </member>
        <member name="T:TradingLib.Common.MGRUpdateSecurityRequest">
            <summary>
            更新品种信息
            </summary>
        </member>
        <member name="T:TradingLib.Common.MGRQrySymbolRequest">
            <summary>
            查询合约信息
            </summary>
        </member>
        <member name="T:TradingLib.Common.RspMGRQrySymbolResponse">
            <summary>
            合约信息回报
            </summary>
        </member>
        <member name="T:TradingLib.Common.MGRReqAddSymbolRequest">
            <summary>
            请求添加合约
            </summary>
        </member>
        <member name="T:TradingLib.Common.RspMGRReqAddSymbolResponse">
            <summary>
            添加合约回报
            </summary>
        </member>
        <member name="T:TradingLib.Common.MGRUpdateSymbolRequest">
            <summary>
            更新合约信息
            </summary>
        </member>
        <member name="T:TradingLib.Common.OrderErrorPack">
            <summary>
            委托错误消息体 用于缓存队列
            </summary>
        </member>
        <member name="P:TradingLib.Common.OrderErrorPack.Order">
            <summary>
            委托
            </summary>
        </member>
        <member name="P:TradingLib.Common.OrderErrorPack.RspInfo">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="T:TradingLib.Common.OrderActionErrorPack">
            <summary>
            委托操作错误消息体 用于缓存队列
            </summary>
        </member>
        <member name="P:TradingLib.Common.OrderActionErrorPack.OrderAction">
            <summary>
            委托操作
            </summary>
        </member>
        <member name="P:TradingLib.Common.OrderActionErrorPack.RspInfo">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:TradingLib.Common.CommissionConfigImpl.Account">
            <summary>
            交易帐号
            </summary>
        </member>
        <member name="P:TradingLib.Common.CommissionConfigImpl.Symbol">
            <summary>
            合约
            </summary>
        </member>
        <member name="P:TradingLib.Common.CommissionConfigImpl.OpenRatioByVolume">
            <summary>
            开仓手续费 按手数
            </summary>
        </member>
        <member name="P:TradingLib.Common.CommissionConfigImpl.OpenRatioByMoney">
            <summary>
            开仓手续费 按金额
            </summary>
        </member>
        <member name="P:TradingLib.Common.CommissionConfigImpl.CloseRatioByVolume">
            <summary>
            平仓手续费 按手数
            </summary>
        </member>
        <member name="P:TradingLib.Common.CommissionConfigImpl.CloseRatioByMoney">
            <summary>
            平仓手续费 按金额
            </summary>
        </member>
        <member name="P:TradingLib.Common.CommissionConfigImpl.CloseTodayRatioByVolume">
            <summary>
            平仓手续费 按手数
            </summary>
        </member>
        <member name="P:TradingLib.Common.CommissionConfigImpl.CloseTodayRatioByMoney">
            <summary>
            平仓手续费 按金额
            </summary>
        </member>
        <member name="T:TradingLib.Common.TickImpl">
            <summary>
            A tick is both the smallest unit of time and the most simple unit of data in TradeLink (and the markets)
            It is an abstract container for last trade, last trade size, best bid, best offer, bid and offer sizes.
            </summary>
        </member>
        <member name="M:TradingLib.Common.TickImpl.Copy(TradingLib.Common.TickImpl,TradingLib.Common.TickImpl)">
            <summary>
            this constructor creates a new tick by combining two ticks
            this is to handle tick updates that only provide bid/ask changes.
            </summary>
            <param name="a">old tick</param>
            <param name="b">new tick or update</param>
        </member>
        <member name="P:TradingLib.Common.TickImpl.UpperLimit">
            <summary>
            涨停价
            </summary>
        </member>
        <member name="P:TradingLib.Common.TickImpl.LowerLimit">
            <summary>
            跌停价
            </summary>
        </member>
        <member name="T:TradingLib.Common.MarketOrder">
            <summary>
            Create market orders.
            </summary>
        </member>
        <member name="T:TradingLib.Common.BuyMarket">
            <summary>
            Create buy market orders.
            </summary>
        </member>
        <member name="T:TradingLib.Common.SellMarket">
            <summary>
            Create sell market orders.
            </summary>
        </member>
        <member name="T:TradingLib.Common.IdTracker">
            <summary>
            used to obtain valid ids for orders, responses, etc
            </summary>
        </member>
        <member name="F:TradingLib.Common.IdTracker.MaxNamedAssigns">
            <summary>
            number of unique ids (per symbol) that can be returned from a named assignment
            </summary>
        </member>
        <member name="F:TradingLib.Common.IdTracker.isMagicIdOnMaxName">
            <summary>
            otherwise the same id is returned
            </summary>
        </member>
        <member name="M:TradingLib.Common.IdTracker.#ctor">
            <summary>
            creates an object to assign unique order ids
            </summary>
        </member>
        <member name="M:TradingLib.Common.IdTracker.#ctor(System.Int64)">
            <summary>
            creates an object to assign unique ids
            </summary>
            <param name="OwnerId"></param>
        </member>
        <member name="M:TradingLib.Common.IdTracker.#ctor(System.Boolean,System.Int64,System.Int64)">
            <summary>
            creates an object to assign unique order ids to one or more owners.
            </summary>
            <param name="OwnerId">A unique number identifying this owner</param>
            <param name="initialId">Owners first order id</param>
        </member>
        <member name="M:TradingLib.Common.IdTracker.getidname(System.Int64)">
            <summary>
            gets an id name from an order id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.IdTracker.AssignCount(System.String,System.String)">
            <summary>
            get count of assignments from symbol and name
            </summary>
            <param name="idname"></param>
            <param name="sym"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.IdTracker.AssignCount(System.String)">
            <summary>
            get count of assignments from this name
            </summary>
            <param name="idname"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.IdTracker.getidname(System.String,System.String)">
            <summary>
            gets an id name for a symbol
            </summary>
            <param name="sym"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.IdTracker.idname(System.String,System.String)">
            <summary>
            gets a id name for a symbol
            </summary>
            <param name="sym"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.IdTracker.namedid(System.String,System.String)">
            <summary>
            get last id assigned to this name
            </summary>
            <param name="sym"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.IdTracker.Clear">
            <summary>
            clear all named ids
            (subsequent ids will still be unique from previous)
            </summary>
        </member>
        <member name="P:TradingLib.Common.IdTracker.AssignId">
            <summary>
            obtains a new id permanently
            </summary>
        </member>
        <member name="P:TradingLib.Common.IdTracker.NextId">
            <summary>
            provides what next id will be without assigning it
            </summary>
        </member>
        <member name="P:TradingLib.Common.IdTracker.NextOverflows">
            <summary>
            return true if next id will overflow
            </summary>
        </member>
        <member name="P:TradingLib.Common.IdTracker.Item(System.String,System.String)">
            <summary>
            get a current id name by symbol
            </summary>
            <param name="sym"></param>
            <param name="idname"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.IdTracker.Item(System.Int32,System.String)">
            <summary>
            get a current idname by number
            </summary>
            <param name="idx"></param>
            <param name="idname"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.IdTracker.Item(System.String)">
            <summary>
            get or set current id by name.
            NOTE : generally you will want to call this with a symbol,
            EG idt["IBM","my entry market"]
            
            otherwise called like :
            (eg idt["myentrymkt"], idt["myentrylmt"], idt["myexitprofit"])
            Set name to zero to force reset on next use.
            </summary>
            <param name="idname"></param>
            <returns></returns>
        </member>
        <member name="T:TradingLib.Common.GenericTracker">
            <summary>
            helper methods to use with GenericTracker T
            </summary>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.CSVInitGeneric``1(System.String,TradingLib.Common.GenericTracker{``0}@)">
            <summary>
            import a csv file into a generic tracker
            </summary>
            <typeparam name="T"></typeparam>
            <param name="csvfile"></param>
            <param name="gt"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.CSVInitGeneric``1(System.String,TradingLib.Common.GenericTracker{``0}@,``0)">
            <summary>
            import a csv file into a generic tracker
            </summary>
            <typeparam name="T"></typeparam>
            <param name="csvfile"></param>
            <param name="gt"></param>
            <param name="coldefault"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.CSVInitGeneric``1(System.String,System.Boolean,TradingLib.Common.GenericTracker{``0}@,System.Int32,``0)">
            <summary>
            import a csv file into a generic tracker
            </summary>
            <typeparam name="T"></typeparam>
            <param name="csvfile"></param>
            <param name="hasheader"></param>
            <param name="gt"></param>
            <param name="symcol"></param>
            <param name="coldefault"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.CSVInitGeneric``1(System.String,System.Boolean,TradingLib.Common.GenericTracker{``0}@,System.Int32,``0,System.Char)">
            <summary>
            import a csv file into a generic tracker
            </summary>
            <typeparam name="T"></typeparam>
            <param name="csvfile"></param>
            <param name="hasheader"></param>
            <param name="gt"></param>
            <param name="symcol"></param>
            <param name="coldefault"></param>
            <param name="delim"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.CSVCOL2Generic``1(System.String,System.Boolean,TradingLib.Common.GenericTracker{``0}@,System.Int32,System.Int32,System.Char,TradingLib.API.DebugDelegate)">
            <summary>
            import csv column to a generic tracker value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="csvfile"></param>
            <param name="hasheader"></param>
            <param name="gt"></param>
            <param name="symcol"></param>
            <param name="col"></param>
            <param name="coldefaultOnFail"></param>
            <param name="delim"></param>
            <param name="debug"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.GetIndicatorPairs(TradingLib.API.GenericTrackerI[])">
            <summary>
            gets all current values of every tracker for every symbol being tracked
            </summary>
            <param name="gts"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.GetIndicatorPairs(System.Int32,TradingLib.API.GenericTrackerI[])">
            <summary>
            get single readable line of indicators for output when response debugging
            </summary>
            <param name="idx"></param>
            <param name="gts"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.GetIndicatorPairs(System.Int32,System.String,TradingLib.API.GenericTrackerI[])">
            <summary>
            get single readable line of indicators (with custom delimiter) for output when response debugging
            </summary>
            <param name="idx"></param>
            <param name="delim"></param>
            <param name="gts"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.WriteCSV``1(System.String,TradingLib.Common.GenericTracker{``0},System.Int32)">
            <summary>
            write a generic tracker to one column of a csv file, leaving rest of file untouched.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filepath"></param>
            <param name="gt"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.WriteCSV``1(System.String,TradingLib.Common.GenericTracker{``0},System.Int32,System.Int32)">
            <summary>
            write a generic tracker to one column of a csv file, leaving rest of file untouched.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filepath"></param>
            <param name="gt"></param>
            <param name="col"></param>
            <param name="symcol"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.WriteCSV``1(System.String,TradingLib.Common.GenericTracker{``0},System.Int32,System.Int32,System.Boolean)">
            <summary>
            write a generic tracker to one column of a csv file, leaving rest of file untouched.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filepath"></param>
            <param name="gt"></param>
            <param name="col"></param>
            <param name="symcol"></param>
            <param name="hasheader"></param>
            <param name="delim"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.WriteCSV``1(System.String,TradingLib.Common.GenericTracker{``0},System.Int32,System.Int32,System.Boolean,System.Char)">
            <summary>
            write a generic tracker to one column of a csv file, leaving rest of file untouched.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filepath"></param>
            <param name="gt"></param>
            <param name="col"></param>
            <param name="symcol"></param>
            <param name="hasheader"></param>
            <param name="delim"></param>
            <param name="stringformat"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.WriteCSV``1(System.String,TradingLib.Common.GenericTracker{``0},System.Int32,System.Int32,System.Boolean,System.Char,System.String)">
            <summary>
            write a generic tracker to one column of a csv file, leaving rest of file untouched.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filepath"></param>
            <param name="gt"></param>
            <param name="col"></param>
            <param name="symcol"></param>
            <param name="hasheader"></param>
            <param name="delim"></param>
            <param name="stringformat"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.WriteCSV``1(System.String,TradingLib.Common.GenericTracker{``0},System.Int32,System.Int32,System.Boolean,System.Char,System.String,TradingLib.API.DebugDelegate)">
            <summary>
            write a generic tracker to one column of a csv file, leaving rest of file untouched.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filepath"></param>
            <param name="gt"></param>
            <param name="col"></param>
            <param name="symcol"></param>
            <param name="hasheader"></param>
            <param name="delim"></param>
            <param name="stringformat"></param>
            <param name="debug"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.InitCSV(System.String,TradingLib.API.GenericTrackerI[])">
            <summary>
            create a csv file using Name on each of an array of generic trackers
            </summary>
            <param name="filepath"></param>
            <param name="gts"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.InitCSV(System.String,System.String[])">
            <summary>
            create a csv file
            </summary>
            <param name="filepath"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.InitCSV(System.String,System.String[],System.Boolean)">
            <summary>
            create a csv file
            </summary>
            <param name="filepath"></param>
            <param name="headers"></param>
            <param name="overwrite"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.InitCSV(System.String,System.String[],System.Boolean,System.Char)">
            <summary>
            create a csv file
            </summary>
            <param name="filepath"></param>
            <param name="headers"></param>
            <param name="overwrite"></param>
            <param name="delim"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.InitCSV(System.String,System.String[],System.Boolean,System.Char,TradingLib.API.DebugDelegate)">
            <summary>
            create a csv file
            </summary>
            <param name="filepath"></param>
            <param name="headers"></param>
            <param name="overwrite"></param>
            <param name="delim"></param>
            <param name="debug"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.GetIndicatorNames(TradingLib.API.GenericTrackerI[])">
            <summary>
            gets indicator names from trackers
            </summary>
            <param name="gts"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.GetIndicatorValues(System.Int32,TradingLib.API.GenericTrackerI[])">
            <summary>
            gets indicator values from trackers
            </summary>
            <param name="gts"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.GetIndicatorValues(System.String,TradingLib.API.GenericTrackerI[])">
            <summary>
            gets indicator values from trackers
            </summary>
            <param name="gts"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.GetIndicatorPrettyPairs(System.String,TradingLib.API.GenericTrackerI[])">
            <summary>
            get name=>value pairs
            </summary>
            <param name="txt"></param>
            <param name="gts"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.GetIndicatorPrettyPairs(System.String,System.String,TradingLib.API.GenericTrackerI[])">
            <summary>
            get name=>value pairs
            </summary>
            <param name="txt"></param>
            <param name="delim"></param>
            <param name="gts"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.GetIndicatorPrettyPairs(System.Int32,TradingLib.API.GenericTrackerI[])">
            <summary>
            get name=>value pairs
            </summary>
            <param name="idx"></param>
            <param name="gts"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.GetIndicatorPrettyPairs(System.Int32,System.String,TradingLib.API.GenericTrackerI[])">
            <summary>
            get name=>value pairs
            </summary>
            <param name="idx"></param>
            <param name="delim"></param>
            <param name="gts"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.rulepasses(System.Int32,System.String,TradingLib.API.GenericTrackerI[])">
            <summary>
            test a rule made up of trackers
            </summary>
            <param name="idx"></param>
            <param name="rulename"></param>
            <param name="booltrackers"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.rulepasses(System.Int32,System.String,TradingLib.API.DebugDelegate,TradingLib.API.GenericTrackerI[])">
            <summary>
            test a rule made up of trackers
            </summary>
            <param name="idx"></param>
            <param name="rulename"></param>
            <param name="debug"></param>
            <param name="booltrackers"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.rulepasses(System.Int32,System.String,TradingLib.API.DebugDelegate,System.Boolean,TradingLib.API.GenericTrackerI[])">
            <summary>
            test a rule made up of trackers
            </summary>
            <param name="idx"></param>
            <param name="rulename"></param>
            <param name="debug"></param>
            <param name="debugfails"></param>
            <param name="booltrackers"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.rulepasses(System.Int32,System.String,System.Boolean,TradingLib.API.DebugDelegate,System.Boolean,TradingLib.API.GenericTrackerI[])">
            <summary>
            test a rule made up of trackers... optionally display the passes or failures.
            </summary>
            <param name="idx"></param>
            <param name="rulename"></param>
            <param name="debug"></param>
            <param name="debugfails"></param>
            <param name="booltrackers"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.addindex(System.String,TradingLib.API.GenericTrackerI[])">
            <summary>
            gets index for a symbol in a list of generics, adding default value in every generic if symbol is not indexed
            </summary>
            <param name="sym"></param>
            <param name="gts"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.index(System.String[],TradingLib.API.GenericTrackerI[])">
            <summary>
            index a list of generic trackers using a list of symbols as labels
            </summary>
            <param name="syms"></param>
            <param name="gts"></param>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.index(System.String[],System.Boolean,TradingLib.API.GenericTrackerI[])">
            <summary>
            index a list of generic trackers using a list of symbols as labels
            </summary>
            <param name="syms"></param>
            <param name="skipifindexed"></param>
            <param name="gts"></param>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.getsymbollist(TradingLib.API.GenericTrackerI[])">
            <summary>
            gets labels/symbols identified in first generictracker in a list of generics
            </summary>
            <param name="gts"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.rank``1(``0,TradingLib.Common.GenericTracker{``0},System.Boolean)">
            <summary>
            gets ranking (on order 1-N) for a given value in given generic tracker range
            </summary>
            <typeparam name="T"></typeparam>
            <param name="val"></param>
            <param name="ind"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.CSV2GTS(System.String,TradingLib.API.GenericTrackerI[])">
            <summary>
            autopopulate a list of generics from a csv file (assuming primary column: SYMBOL)
            </summary>
            <param name="csvfile"></param>
            <param name="gts"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.CSV2GTS(System.String,TradingLib.API.DebugDelegate,TradingLib.API.GenericTrackerI[])">
            <summary>
            autopopulate a list of generics from a csv file (assuming primary column: SYMBOL)
            </summary>
            <param name="csvfile"></param>
            <param name="d"></param>
            <param name="gts"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.CSV2GTS(System.String,System.String,TradingLib.API.DebugDelegate,TradingLib.API.GenericTrackerI[])">
            <summary>
            autopopulate a list of generics from a csv file
             * csv needs a header file
             * csv must have a primary column (typically titled SYMBOL)
             * generics should be listed in same order as csv columns
             * provide name of the primary column if it's something other than SYMBOL
            </summary>
            <param name="csvfile"></param>
            <param name="primarygtname"></param>
            <param name="d"></param>
            <param name="gts"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.TBLInitGeneric``1(System.String,TradingLib.Common.GenericTracker{``0}@)">
            <summary>
            import a url into a generic tracker
            </summary>
            <typeparam name="T"></typeparam>
            <param name="csvfile"></param>
            <param name="gt"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.TBLInitGeneric``1(System.String,TradingLib.Common.GenericTracker{``0}@,``0)">
            <summary>
            import a url into a generic tracker
            </summary>
            <typeparam name="T"></typeparam>
            <param name="csvfile"></param>
            <param name="gt"></param>
            <param name="coldefault"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.TBLInitGeneric``1(System.String,System.Boolean,TradingLib.Common.GenericTracker{``0}@,System.Int32,``0)">
            <summary>
            import a url into a generic tracker
            </summary>
            <typeparam name="T"></typeparam>
            <param name="csvfile"></param>
            <param name="hasheader"></param>
            <param name="gt"></param>
            <param name="symcol"></param>
            <param name="coldefault"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.TBLInitGeneric``1(System.String,System.Boolean,TradingLib.Common.GenericTracker{``0}@,System.Int32,``0,System.Char)">
            <summary>
            import a csv file into a generic tracker
            </summary>
            <typeparam name="T"></typeparam>
            <param name="csvfile"></param>
            <param name="hasheader"></param>
            <param name="gt"></param>
            <param name="symcol"></param>
            <param name="coldefault"></param>
            <param name="delim"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.GenericTracker.TBLCOL2Generic``1(System.String,System.Boolean,TradingLib.Common.GenericTracker{``0}@,System.Int32,System.Int32,System.Char,TradingLib.API.DebugDelegate)">
            <summary>
            import url column to a generic tracker value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="hasheader"></param>
            <param name="gt"></param>
            <param name="symcol"></param>
            <param name="col"></param>
            <param name="coldefaultOnFail"></param>
            <param name="delim"></param>
            <param name="debug"></param>
            <returns></returns>
        </member>
        <member name="T:TradingLib.Common.Instrument">
            <summary>
            用于提供合约信息，供客户端查询合约使用
            内部使用的Symbol包含了大量依赖和逻辑不便于在客户端去重现
            Instrument将一些字段和数据直接置于Instrument
            </summary>
        </member>
        <member name="P:TradingLib.Common.Instrument.Symbol">
            <summary>
            合约编号
            </summary>
        </member>
        <member name="P:TradingLib.Common.Instrument.Name">
            <summary>
            合约中文名称
            </summary>
        </member>
        <member name="P:TradingLib.Common.Instrument.Security">
            <summary>
            品种编号
            </summary>
        </member>
        <member name="P:TradingLib.Common.Instrument.ExchangeID">
            <summary>
            交易所编号
            </summary>
        </member>
        <member name="P:TradingLib.Common.Instrument.EntryCommission">
            <summary>
            开仓手续费
            </summary>
        </member>
        <member name="P:TradingLib.Common.Instrument.ExitCommission">
            <summary>
            平仓手续费
            </summary>
        </member>
        <member name="P:TradingLib.Common.Instrument.Margin">
            <summary>
            保证金
            </summary>
        </member>
        <member name="P:TradingLib.Common.Instrument.SecurityType">
            <summary>
            品种类别
            </summary>
        </member>
        <member name="P:TradingLib.Common.Instrument.Multiple">
            <summary>
            乘数
            </summary>
        </member>
        <member name="P:TradingLib.Common.Instrument.PriceTick">
            <summary>
            最小价格变动
            </summary>
        </member>
        <member name="P:TradingLib.Common.Instrument.ExpireMonth">
            <summary>
            到期月份
            </summary>
        </member>
        <member name="P:TradingLib.Common.Instrument.ExpireDate">
            <summary>
            到期日
            </summary>
        </member>
        <member name="P:TradingLib.Common.Instrument.Tradeable">
            <summary>
            是否可以交易
            </summary>
        </member>
        <member name="T:TradingLib.Common.SafeEnumerator`1">
            <summary>
            A thread-safe IEnumerator implementation.
            See: http://www.codeproject.com/KB/cs/safe_enumerable.aspx
            </summary>
        </member>
        <member name="M:TradingLib.Common.SafeEnumerator`1.MoveNext">
            <remarks>
            we just delegate actual implementation
            to the inner enumerator, that actually iterates
            over some collection
            </remarks>
        </member>
        <member name="T:TradingLib.Common.IntervalData">
            <summary>
            bar的生成引擎接口,设定了bar生成的具体方式,是按照时间,tick数,还是成交量或者自定义的其他方式
            </summary>
        </member>
        <member name="M:TradingLib.Common.TickIntervalData.addbar(TradingLib.API.Bar)">
            <summary>
            新增加一个bar
            </summary>
            <param name="mybar"></param>
        </member>
        <member name="M:TradingLib.Common.TickIntervalData.Reset">
            <summary>
            重置
            </summary>
        </member>
        <member name="M:TradingLib.Common.TickIntervalData.GetBar(System.Int32,System.String)">
            <summary>
            通过序号获得bar数据
            </summary>
            <param name="index"></param>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TickIntervalData.GetBar(System.String)">
            <summary>
            获得最新的bar
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TickIntervalData.newTick(TradingLib.API.Tick)">
            <summary>
            获得一个Tick数据
            </summary>
            <param name="k"></param>
        </member>
        <member name="M:TradingLib.Common.TickIntervalData.newPoint(System.String,System.Decimal,System.Int32,System.Int32,System.Int32)">
            <summary>
            通过数值p来生成bar
            </summary>
            <param name="symbol"></param>
            <param name="p"></param>
            <param name="time"></param>
            <param name="date"></param>
            <param name="size"></param>
        </member>
        <member name="T:TradingLib.Common.QryOrderRequest">
            <summary>
            查询委托请求
            用于向服务端提交一个查询委托的请求
            
            </summary>
        </member>
        <member name="P:TradingLib.Common.QryOrderRequest.Account">
            <summary>
            查询的交易帐号
            </summary>
        </member>
        <member name="P:TradingLib.Common.QryOrderRequest.Symbol">
            <summary>
            查询的合约
            </summary>
        </member>
        <member name="P:TradingLib.Common.QryOrderRequest.ExchID">
            <summary>
            交易所编号
            </summary>
        </member>
        <member name="P:TradingLib.Common.QryOrderRequest.OrderExchID">
            <summary>
            交易所的委托编号
            </summary>
        </member>
        <member name="P:TradingLib.Common.QryOrderRequest.StartTime">
            <summary>
            开始时间
            </summary>
        </member>
        <member name="P:TradingLib.Common.QryOrderRequest.EndTime">
            <summary>
            截至时间
            </summary>
        </member>
        <member name="P:TradingLib.Common.QryOrderRequest.OrderID">
            <summary>
            系统分配的委托ID
            </summary>
        </member>
        <member name="T:TradingLib.Common.MGRWatchAccountRequest">
            <summary>
            设定观察交易帐号
            将一组帐号设定为观察列表,服务端针对这组帐户推送实时数据
            </summary>
        </member>
        <member name="T:TradingLib.Common.LogItem">
            <summary>
            日志项目
            </summary>
        </member>
        <member name="P:TradingLib.Common.LogItem.Time">
            <summary>
            日志产生时间
            </summary>
        </member>
        <member name="P:TradingLib.Common.LogItem.Millisecond">
            <summary>
            日志产生微秒
            </summary>
        </member>
        <member name="P:TradingLib.Common.LogItem.Programe">
            <summary>
            日志发送者 说明该日志是从哪个功能模块发送
            </summary>
        </member>
        <member name="P:TradingLib.Common.LogItem.Level">
            <summary>
            日志级别 通过日志级别 我们可以进行日志过滤
            </summary>
        </member>
        <member name="P:TradingLib.Common.LogItem.Message">
            <summary>
            日志消息
            </summary>
        </member>
        <member name="T:TradingLib.Common.DataFeedRouterStatus">
            <summary>
            行情路由状态
            </summary>
        </member>
        <member name="P:TradingLib.Common.DataFeedRouterStatus.IsTickSpan">
            <summary>
            是否处于行情时间段内
            </summary>
        </member>
        <member name="P:TradingLib.Common.DataFeedRouterStatus.MassAlert">
            <summary>
            是否处于MassAlert中
            </summary>
        </member>
        <member name="P:TradingLib.Common.DataFeedRouterStatus.IsDefaultDataFeedLive">
            <summary>
            默认行情通道是否处于工作状态
            </summary>
        </member>
        <member name="T:TradingLib.Common.ExchSrvStatus">
            <summary>
            交易消息交换状态
            </summary>
        </member>
        <member name="P:TradingLib.Common.ExchSrvStatus.FrontCnt">
            <summary>
            连接前置机数量
            </summary>
        </member>
        <member name="P:TradingLib.Common.ExchSrvStatus.EndPointCnt">
            <summary>
            连接终端数量
            </summary>
        </member>
        <member name="P:TradingLib.Common.ExchSrvStatus.OrdersCnt">
            <summary>
            累计委托
            </summary>
        </member>
        <member name="P:TradingLib.Common.ExchSrvStatus.TradesCnt">
            <summary>
            累计成交
            </summary>
        </member>
        <member name="T:TradingLib.Common.ConnectorInterface">
            <summary>
            成交接口配置
            设定外部调用dll所在目录和文件名
            </summary>
        </member>
        <member name="P:TradingLib.Common.ConnectorInterface.ID">
            <summary>
            数据库全局编号
            </summary>
        </member>
        <member name="P:TradingLib.Common.ConnectorInterface.type_name">
            <summary>
            接口类型名
            </summary>
        </member>
        <member name="P:TradingLib.Common.ConnectorInterface.IsXAPI">
            <summary>
            是否是XAPI统一接口
            XAPI统一接口是统一将成交接口转换成标准C接口然后通过XAPI访问层统一调用访问
            </summary>
        </member>
        <member name="P:TradingLib.Common.ConnectorInterface.libpath_wrapper">
            <summary>
            wrapper目录
            </summary>
        </member>
        <member name="P:TradingLib.Common.ConnectorInterface.libname_wrapper">
            <summary>
            wrapper名称
            </summary>
        </member>
        <member name="P:TradingLib.Common.ConnectorInterface.libpath_broker">
            <summary>
            成交接口目录
            </summary>
        </member>
        <member name="P:TradingLib.Common.ConnectorInterface.libname_broker">
            <summary>
            成交接口地址
            </summary>
        </member>
        <member name="P:TradingLib.Common.ConnectorInterface.IsValid">
            <summary>
            是否有效
            加载时验证接口后进行设置
            </summary>
        </member>
        <member name="P:TradingLib.Common.ConnectorInterface.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:TradingLib.Common.ConnectorInterface.Type">
            <summary>
            通道类别
            </summary>
        </member>
        <member name="P:TradingLib.Common.ConnectorInterface.Vendor_ID">
            <summary>
            实盘帐户对象ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.ConnectorStatus.ID">
            <summary>
            通道设置ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.ConnectorStatus.Token">
            <summary>
            对应的通道唯一标识
            </summary>
        </member>
        <member name="P:TradingLib.Common.ConnectorStatus.Status">
            <summary>
            通道状态
            </summary>
        </member>
        <member name="T:TradingLib.Common.XMLRspInfo">
            <summary>
            储存于xml文件中的Rsp消息
            包含Key,Code,Message 用于实现与其他业务系统交互
            主要用于错误或异常提示
            </summary>
        </member>
        <member name="P:TradingLib.Common.XMLRspInfo.Key">
            <summary>
            xml消息的key用于建立key索引
            </summary>
        </member>
        <member name="P:TradingLib.Common.XMLRspInfo.Code">
            <summary>
            xml消息的code 用于消息处理的地方进行逻辑判断
            </summary>
        </member>
        <member name="P:TradingLib.Common.XMLRspInfo.Message">
            <summary>
            xml消息的具体内容
            </summary>
        </member>
        <member name="T:TradingLib.ORM.DBMySql">
            <summary>
            数据库连接对象封装
            实现IDisposable接口
            用于在using语句中实现自动释放资源
            </summary>
        </member>
        <member name="T:TradingLib.Common.TikWriter">
            <summary>
            write tradelink tick files
            </summary>
        </member>
        <member name="F:TradingLib.Common.TikWriter.Count">
            <summary>
            ticks written
            </summary>
        </member>
        <member name="M:TradingLib.Common.TikWriter.#ctor">
            <summary>
            creates a tikwriter with no header, header is created from first tik
            </summary>
        </member>
        <member name="M:TradingLib.Common.TikWriter.#ctor(System.String)">
            <summary>
            create a tikwriter for a specific symbol on todays date.
            auto-creates header
            </summary>
            <param name="realsymbol"></param>
        </member>
        <member name="M:TradingLib.Common.TikWriter.#ctor(System.String,System.Int32)">
            <summary>
            create a tikwriter for specific symbol on specific date
            auto-creates header
            </summary>
            <param name="realsymbol"></param>
            <param name="date"></param>
        </member>
        <member name="M:TradingLib.Common.TikWriter.#ctor(System.String,System.String,System.Int32)">
            <summary>
            create tikwriter with specific location, symbol and date.
            auto-creates header
            </summary>
            <param name="path"></param>
            <param name="realsymbol"></param>
            <param name="date"></param>
        </member>
        <member name="M:TradingLib.Common.TikWriter.Close">
            <summary>
            close a tickfile
            </summary>
        </member>
        <member name="M:TradingLib.Common.TikWriter.SafeFilename(System.String,System.String,System.Int32)">
            <summary>
            gets symbol safe to use as filename
            </summary>
            <param name="realsymbol"></param>
            <param name="path"></param>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TikWriter.SafeSymbol(System.String)">
            <summary>
            gets symbol that is safe to use as filename
            </summary>
            <param name="realsymbol"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TikWriter.Header(TradingLib.Common.TikWriter,System.String)">
            <summary>
            write header for tick file
            </summary>
            <param name="bw"></param>
            <param name="realsymbol"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TikWriter.newTick(TradingLib.API.Tick)">
            <summary>
            write a tick to file
            </summary>
            <param name="k"></param>
        </member>
        <member name="M:TradingLib.Common.TikWriter.newTick(TradingLib.Common.TickImpl)">
            <summary>
            write a tick to file
            </summary>
            <param name="k"></param>
        </member>
        <member name="P:TradingLib.Common.TikWriter.RealSymbol">
            <summary>
            real symbol represented by tick file
            </summary>
        </member>
        <member name="P:TradingLib.Common.TikWriter.Filepath">
            <summary>
            path of this file
            </summary>
        </member>
        <member name="P:TradingLib.Common.TikWriter.Date">
            <summary>
            date represented by data
            </summary>
        </member>
        <member name="T:TradingLib.Common.TickFileFilter">
            <summary>
            Filters tick files (EPF/IDX) based on symbol name and trading date.
            </summary>
        </member>
        <member name="M:TradingLib.Common.TickFileFilter.SymFilter(System.String)">
            <summary>
            Adds a symbol filter
            </summary>
            <param name="stock">The stock.</param>
        </member>
        <member name="M:TradingLib.Common.TickFileFilter.SymFilter(System.String[])">
            <summary>
            Adds an array of symbol filters
            </summary>
            <param name="stocks">The stocks.</param>
        </member>
        <member name="M:TradingLib.Common.TickFileFilter.DateFilter(TradingLib.Common.TickFileFilter.TLDateFilter[])">
            <summary>
            Adds an array of TLDateFilters
            </summary>
            <param name="filters">The filters.</param>
        </member>
        <member name="M:TradingLib.Common.TickFileFilter.DateFilter(TradingLib.Common.TickFileFilter.TLDateFilter)">
            <summary>
            Adds a single DateFilter
            </summary>
            <param name="datefilter">The datefilter.</param>
        </member>
        <member name="M:TradingLib.Common.TickFileFilter.DateFilter(System.Int32,TradingLib.Common.DateMatchType)">
            <summary>
            Adds a single DateFilter
            </summary>
            <param name="date">The date.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:TradingLib.Common.TickFileFilter.Allow(System.String)">
            <summary>
            Allows the specified filepath, if instructed by the filter.
            </summary>
            <param name="filepath">The filepath.</param>
            <returns>true if allowed, false otherwise</returns>
        </member>
        <member name="M:TradingLib.Common.TickFileFilter.Deny(System.String)">
            <summary>
            Denies the specified filepath, if instructed by the filter.
            </summary>
            <param name="filepath">The filepath.</param>
            <returns>true if denied, false otherwise</returns>
        </member>
        <member name="M:TradingLib.Common.TickFileFilter.Allows(System.String[])">
            <summary>
            Allows the specified filepaths.  Plural version of Allow.
            </summary>
            <param name="filepaths">The filepaths.</param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TickFileFilter.TLYearMask(System.Int32)">
            <summary>
            get a filter that excludes everything but year from TL date
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TickFileFilter.TLMonthMask(System.Int32)">
            <summary>
            get a filter that excludes everything but the month from TL date
            </summary>
            <param name="month"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TickFileFilter.Serialize(TradingLib.Common.TickFileFilter)">
            <summary>
            serialize a tradelink tick file filter
            </summary>
            <param name="tff"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TickFileFilter.Deserialize(System.String)">
            <summary>
            take a serialized tickfilefilter and convert back to an object
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TickFileFilter.FromFile(System.String)">
            <summary>
            save tickfilefilter to a file
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TickFileFilter.ToFile(TradingLib.Common.TickFileFilter,System.String)">
            <summary>
            restore a filter from a file
            </summary>
            <param name="tff"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.TickFileFilter.DefaultDeny">
            <summary>
            Gets or sets a value indicating whether [default deny] is used when Allow and Deny are called.
            </summary>
            <value><c>true</c> if [default deny]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TradingLib.Common.TickFileFilter.AllowInvalid">
            <summary>
            Gets or sets a value indicating whether the class will [allow invalid] tickfiles, which have undefined extensions.
            </summary>
            <value><c>true</c> if [allow invalid]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TradingLib.Common.TickFileFilter.isDateMatchUnion">
            <summary>
            if true, any file that matches ANY date will be allowed.  If false, all dates must match before a tick file is allowed.  default is true.
            </summary>
        </member>
        <member name="P:TradingLib.Common.TickFileFilter.isSymbolDateMatchUnion">
            <summary>
            if true, any file matching SymbolMatch OR DateMatch will be allowed.   Otherwise, it must be allowed by the Symbol filters AND the Date filters.  default is true.
            </summary>
        </member>
        <member name="T:TradingLib.Common.TickFileFilter.TLDateFilter">
            <summary>
            match a specific portion of a tradelink date (eg month only, year only, etc)
            </summary>
        </member>
        <member name="T:TradingLib.Common.TickWatcher">
            <summary>
            Used to watch a stream of ticks, and send alerts when the stream goes idle for a specified time.
            </summary>
        </member>
        <member name="M:TradingLib.Common.TickWatcher.newTick(TradingLib.API.Tick)">
            <summary>
            Watches the specified tick.
            Alerts if wait time exceeded.
            </summary>
            <param name="tick">The tick.</param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TickWatcher.SendAlerts">
            <summary>
            send alerts for idle symbols using current time as comparison point
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TickWatcher.SendAlerts(System.DateTime)">
            <summary>
            Sends the alerts for tickstreams who have gone idle based on the provided datetime.
            </summary>
            <param name="date">The current datetime.</param>
        </member>
        <member name="M:TradingLib.Common.TickWatcher.SendAlerts(System.Int32)">
            <summary>
            sends alerts for i
            </summary>
            <param name="date"></param>
        </member>
        <member name="M:TradingLib.Common.TickWatcher.SendAlerts(System.Int32,System.Int32)">
            <summary>
            Sends the alerts for tickstreams who have gone idle based on the provided datetime.
            </summary>
            <param name="date">The datetime.</param>
            <param name="AlertSecondsWithoutTick">The alert seconds without tick.</param>
        </member>
        <member name="M:TradingLib.Common.TickWatcher.#ctor(System.Int32,TradingLib.API.GenericTrackerI)">
            <summary>
            creates a tickwatcher and polls specificed millseconds
            if timer has expired, sends alert.
            Background polling occurs in addition to tick-induced time checks.
            </summary>
            <param name="BackgroundPollIntervalms">Value in millseconds to wait between checks.  0 = disable background checks</param>
        </member>
        <member name="M:TradingLib.Common.TickWatcher.UpdateTimeSpan(System.Int32,System.Int32)">
            <summary>
            整体的交易时间段
            90000-113000
            130000 - 151500
            </summary>
            <param name="starttime"></param>
            <param name="stopttime"></param>
        </member>
        <member name="M:TradingLib.Common.TickWatcher.Reset">
            <summary>
            重置当处于非行情时间段时候，重置相关属性
            </summary>
        </member>
        <member name="P:TradingLib.Common.TickWatcher.Count">
            <summary>
             returns count of symbols that have ticked at least once
            </summary>
        </member>
        <member name="P:TradingLib.Common.TickWatcher.Item(System.String)">
            <summary>
            gets last time a tick was received for symbol
            </summary>
            <param name="sym"></param>
            <returns></returns>
        </member>
        <member name="E:TradingLib.Common.TickWatcher.GotAlert">
            <summary>
            alert thrown when AlertThreshold is exceeded for a symbol
            </summary>
        </member>
        <member name="E:TradingLib.Common.TickWatcher.GotFirstTick">
            <summary>
            当某个合约第一个行情达到
            </summary>
        </member>
        <member name="P:TradingLib.Common.TickWatcher.FireFirstTick">
            <summary>
            某个合约第一个行情到达时候是否进行通知
            </summary>
        </member>
        <member name="P:TradingLib.Common.TickWatcher.AlertThreshold">
            <summary>
            minimum threshold in seconds when no tick updates have been received for a single symbol, alerts can be thrown.
            多少时间内某个合约没有收到行情则报警
            </summary>
        </member>
        <member name="P:TradingLib.Common.TickWatcher.SymbolsNeverTicked">
            <summary>
            gets list of symbols that have never had ticks pass through watcher
            从未收到过行情的合约
            </summary>
        </member>
        <member name="P:TradingLib.Common.TickWatcher.SymbolsTicked">
            <summary>
            gets stringified symbols which have had ticks pass through the watcher
            收到过行情的合约
            </summary>
        </member>
        <member name="P:TradingLib.Common.TickWatcher.RecentTime">
            <summary>
            most recent time received
            最新行情时间
            </summary>
        </member>
        <member name="P:TradingLib.Common.TickWatcher.TickCount">
            <summary>
            gets count of ticks which have passed through watcher
            </summary>
        </member>
        <member name="P:TradingLib.Common.TickWatcher.ActiveSymbolTracker">
            <summary>
            gets reference to active symbol tracker
            </summary>
        </member>
        <member name="E:TradingLib.Common.TickWatcher.AllsymbolsTicking">
            <summary>
            如果所有合约行情均到到 对外触发
            </summary>
        </member>
        <member name="P:TradingLib.Common.TickWatcher.TimeSpanSetted">
            <summary>
            是否在时间段内报警
            </summary>
        </member>
        <member name="P:TradingLib.Common.TickWatcher.StartAlertTime">
            <summary>
            开始报警时间
            </summary>
        </member>
        <member name="P:TradingLib.Common.TickWatcher.StopAlertTime">
            <summary>
            停止报警时间
            </summary>
        </member>
        <member name="P:TradingLib.Common.TickWatcher.MassAlertThreshold">
            <summary>
            minimum threshold when no ticks have been received for many symbols
            多少秒内没有收到任何行情
            </summary>
        </member>
        <member name="P:TradingLib.Common.TickWatcher.isMassAlertCleared">
            <summary>
            will be true if mass alerted existed previously and was cleared.
            this value can only be checked once as it will reset to false once read
            如果之前有过行情中断报警并且报警被取消过 该值读取后就归位
            </summary>
        </member>
        <member name="P:TradingLib.Common.TickWatcher.isMassAlerting">
            <summary>
            是否处于MassAlert报警状态中
            </summary>
        </member>
        <member name="E:TradingLib.Common.TickWatcher.GotMassAlert">
            <summary>
            alert thrown when no ticks have arrived since AlertThreshold.
            Time of last tick is provided.
            如果上次行情以来 在设定时间段内没有任何行情则报警
            </summary>
        </member>
        <member name="E:TradingLib.Common.TickWatcher.GotMassAlertCleard">
            <summary>
            如果报警后，又有行情到达，则报警取消
            </summary>
        </member>
        <member name="P:TradingLib.Common.TickWatcher.IsInTimeSpan">
            <summary>
            是否在设定的时间段内
            </summary>
        </member>
        <member name="P:TradingLib.Common.TickWatcher.CheckLiveAfterTickCount">
             <summary>
             wait to do live test after X ticks have arrived
            多少个行情数据到达后检查行情整体工作情况
             </summary>
        </member>
        <member name="P:TradingLib.Common.TickWatcher.CheckLiveMaxDelaySec">
            <summary>
            if a tick is within this many seconds of current system time on same day, tick stream is considered live and reports can be sent
            
            </summary>
        </member>
        <member name="P:TradingLib.Common.TickWatcher.isLive">
            <summary>
            当前行情系统是否在线
            </summary>
        </member>
        <member name="T:TradingLib.Common.PositionRoundImpl">
            <summary>
            仓位开平来回,从建仓开始 经过 加仓/减仓 最后 平掉 为一个仓位操作回合.系统对选手的考核通过仓位操作回合来进行
            计算选手操作次数,胜率,平均持仓周期等数据
            </summary>
        </member>
        <member name="F:TradingLib.Common.PositionRoundImpl._postransactionlist">
            <summary>
            储存了成交序列,按照该序列的成交 完成了一个positionround
            </summary>
        </member>
        <member name="M:TradingLib.Common.PositionRoundImpl.#ctor(System.String,TradingLib.API.Symbol,System.Boolean)">
            <summary>
            某个交易帐户 某个合约 某个方向上的持仓回合
            </summary>
            <param name="account"></param>
            <param name="symbol"></param>
            <param name="side"></param>
        </member>
        <member name="M:TradingLib.Common.PositionRoundImpl.GotPositionTransaction(TradingLib.Common.PositionTransaction)">
            <summary>
            rpt获得一个positiontrans
            持仓回合获得一个持仓成交记录
            </summary>
            <param name="postrans"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.PositionRoundImpl.GetPRKey(TradingLib.Common.PositionTransaction)">
            <summary>
            获得positiontransaction key
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.PositionRoundImpl.GetPRKey(TradingLib.API.Position)">
            <summary>
            获得position key
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.PositionRoundImpl.EqualPosition(TradingLib.API.Position)">
            <summary>
            判断一个持仓数据和PR数据是否吻合,account/symbol/holdsize
            PR的成本为所有开仓数据的加权成本，Position反应的是当前持仓的一个持有成本。当持有过程中发生过加减仓操作 价格数据就不吻合了
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.PositionRoundImpl.oSymbol">
            <summary>
            对应合约对象
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionRoundImpl.Type">
            <summary>
            品种类别
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionRoundImpl.Multiple">
            <summary>
            乘数
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionRoundImpl.IsOpened">
            <summary>
            开仓回合开启标志
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionRoundImpl.IsClosed">
            <summary>
            开仓回合关闭标志
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionRoundImpl.Account">
            <summary>
            账户
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionRoundImpl.Symbol">
            <summary>
            合约
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionRoundImpl.Security">
            <summary>
            品种
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionRoundImpl.Side">
            <summary>
            多空
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionRoundImpl.HoldSize">
            <summary>
            当前持仓数量
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionRoundImpl.EntrySize">
            <summary>
            总建仓数量
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionRoundImpl.EntryTime">
            <summary>
            开仓时间
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionRoundImpl.EntryPrice">
            <summary>
            开仓价
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionRoundImpl.EntryCommission">
            <summary>
            开仓手续费 通过累加所有开仓操作的手续费来得到 累计的开仓手续费
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionRoundImpl.ExitSize">
            <summary>
            总平仓数量
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionRoundImpl.ExitTime">
            <summary>
            平仓时间
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionRoundImpl.ExitPrice">
            <summary>
            平仓价格
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionRoundImpl.ExitCommission">
            <summary>
            总平仓手续费
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionRoundImpl.Points">
            <summary>
            平均每手盈亏点数
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionRoundImpl.TotalPoints">
            <summary>
            单个回合总共盈亏点数
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionRoundImpl.Profit">
            <summary>
            盈亏(不含手续费)
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionRoundImpl.Commissoin">
            <summary>
            累计手续费
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionRoundImpl.NetProfit">
            <summary>
            净盈亏
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionRoundImpl.WL">
            <summary>
            盈亏标识
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionRoundImpl.Size">
            <summary>
            净交易数量
            </summary>
        </member>
        <member name="P:TradingLib.Common.OrderActionImpl.Account">
            <summary>
            交易帐号
            </summary>
        </member>
        <member name="P:TradingLib.Common.OrderActionImpl.ActionFlag">
            <summary>
            委托操作标识
            </summary>
        </member>
        <member name="P:TradingLib.Common.OrderActionImpl.OrderID">
            <summary>
            服务端委托唯一编号
            </summary>
        </member>
        <member name="P:TradingLib.Common.OrderActionImpl.FrontID">
            <summary>
            前置编号
            </summary>
        </member>
        <member name="P:TradingLib.Common.OrderActionImpl.SessionID">
            <summary>
            会话编号,每次建立的会话都有一个唯一的SessionID分配给客户端,同时客户端还绑有UUID用于通讯寻址
            通过组合SessionID和OrderRef就可以定位某个委托
            或者通过ExchOrderID来进行唯一定位
            </summary>
        </member>
        <member name="P:TradingLib.Common.OrderActionImpl.OrderRef">
            <summary>
            客户端委托引用
            </summary>
        </member>
        <member name="P:TradingLib.Common.OrderActionImpl.Exchagne">
            <summary>
            交易所编号
            </summary>
        </member>
        <member name="P:TradingLib.Common.OrderActionImpl.OrderExchID">
            <summary>
            交易所委托编号类似于CTP的OrderSysID
            </summary>
        </member>
        <member name="P:TradingLib.Common.OrderActionImpl.Symbol">
            <summary>
            合约
            </summary>
        </member>
        <member name="P:TradingLib.Common.OrderActionImpl.RequestID">
            <summary>
            请求 ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.ManagerSetting.ID">
            <summary>
            数据库ID编号
            </summary>
        </member>
        <member name="P:TradingLib.Common.ManagerSetting.Login">
            <summary>
            登入名
            </summary>
        </member>
        <member name="P:TradingLib.Common.ManagerSetting.User_Id">
            <summary>
            对应UCenter UserID
            </summary>
        </member>
        <member name="P:TradingLib.Common.ManagerSetting.Type">
            <summary>
            管理员类别
            </summary>
        </member>
        <member name="P:TradingLib.Common.ManagerSetting.Name">
            <summary>
            姓名
            </summary>
        </member>
        <member name="P:TradingLib.Common.ManagerSetting.Mobile">
            <summary>
            手机号码
            </summary>
        </member>
        <member name="P:TradingLib.Common.ManagerSetting.QQ">
            <summary>
            QQ号码
            </summary>
        </member>
        <member name="P:TradingLib.Common.ManagerSetting.AccLimit">
            <summary>
            交易帐号数目限制
            </summary>
        </member>
        <member name="P:TradingLib.Common.ManagerSetting.parent_fk">
            <summary>
            上级代理
            </summary>
        </member>
        <member name="P:TradingLib.Common.ManagerSetting.mgr_fk">
            <summary>
            交易managerid
            </summary>
        </member>
        <member name="P:TradingLib.Common.ManagerSetting.domain_id">
            <summary>
            域ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.ManagerSetting.Active">
            <summary>
            激活状态
            </summary>
        </member>
        <member name="P:TradingLib.Common.Manager.BaseMgrID">
            <summary>
            管理域ID
            Root或者代理下面的柜员的MgrID一致
            </summary>
        </member>
        <member name="P:TradingLib.Common.Manager.BaseManager">
            <summary>
            BaseManager用于标注该管理帐号隶属于哪个Agent,如果是系统级的管理帐户的话直接隶属于ROOT
            </summary>
        </member>
        <member name="P:TradingLib.Common.Manager.ParentManager">
            <summary>
            上级代理对象
            </summary>
        </member>
        <member name="P:TradingLib.Common.Manager.Domain">
            <summary>
            分区域对象
            </summary>
        </member>
        <member name="T:TradingLib.Common.MGRUpdatePassRequest">
            <summary>
            请求修改密码
            </summary>
        </member>
        <member name="T:TradingLib.Common.FutsRspError">
            <summary>
            回报异常 当操作产生异常时候 通过将异常封装到FutsRspError来向外层抛出报错信息
            
            </summary>
        </member>
        <member name="M:TradingLib.Common.FutsRspError.#ctor(System.Exception)">
            <summary>
            从一个异常创建一个错误信息
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:TradingLib.Common.FutsRspError.#ctor(System.String)">
            <summary>
            从一个错误信息创建一个FutsRspError
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:TradingLib.Common.FutsRspError.#ctor(TradingLib.Mixins.Json.JsonReply)">
            <summary>
            将JsonReply生成对应的FutsRspError
            </summary>
            <param name="reply"></param>
        </member>
        <member name="M:TradingLib.Common.FutsRspError.FillError(TradingLib.Common.XMLRspInfo)">
            <summary>
            用自定义的XMLRspInfo填充错误信息
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:TradingLib.Common.PositionCloseDetailUtil.GetPositionCloseStr(TradingLib.API.PositionCloseDetail)">
            <summary>
            获得文字输出
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.CommissionTemplateSetting.ID">
            <summary>
            模板ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.CommissionTemplateSetting.Name">
            <summary>
            模板名称
            </summary>
        </member>
        <member name="P:TradingLib.Common.CommissionTemplateSetting.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:TradingLib.Common.CommissionTemplateSetting.Domain_ID">
            <summary>
            域ID
            </summary>
        </member>
        <member name="T:TradingLib.Common.CommissionTemplate">
            <summary>
            手续费模板
            </summary>
        </member>
        <member name="M:TradingLib.Common.CommissionTemplate.AddItem(TradingLib.Common.CommissionTemplateItem)">
            <summary>
            添加手续费项目
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:TradingLib.Common.CommissionTemplate.Item(System.String,System.Int32)">
            <summary>
            获得手续费模板中的某个模板项，模板项按品种-月份 进行索引
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.ORM.DBHelper.InitDBConfig(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            初始化数据库全局连接信息
            </summary>
            <param name="address"></param>
            <param name="port"></param>
            <param name="name"></param>
            <param name="user"></param>
            <param name="pass"></param>
        </member>
        <member name="M:TradingLib.ORM.DBHelper.BorrowDB">
            <summary>
            获得数据库封装对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.ORM.DBHelper.ReturDB(TradingLib.ORM.MySqlBase)">
            <summary>
            返回数据库封装对象
            </summary>
            <param name="db"></param>
        </member>
        <member name="T:TradingLib.Common.TikConst">
            <summary>
            constants for working with Tik files
            </summary>
        </member>
        <member name="T:TradingLib.Common.eSigTick">
            <summary>
            Marshalls eSignal-specific tickdata into and out of TradeLink's generic Tick type.
            </summary>
        </member>
        <member name="M:TradingLib.Common.eSigTick.FromStream(System.String,System.IO.StreamReader)">
            <summary>
            Loads a tick straight from an EPF file in the form of a StreamReader
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="sr">The sr.</param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.eSigTick.ToEPF(TradingLib.API.Tick)">
            <summary>
            Converts the tick to a string-equivalent that can be written to an EPF file.
            </summary>
            <param name="t">The t.</param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.eSigTick.EPFheader(System.String,System.Int32)">
            <summary>
            Create an epf file header.
            </summary>
            <param name="stock">The securities symbol</param>
            <param name="date">The date</param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.eSigTick.EPFheader(System.String,System.Int32,System.Int32)">
            <summary>
            Create an epf file header for a range of dates.
            </summary>
            <param name="stock">The securities symbol</param>
            <param name="date1">The opening date</param>
            <param name="date2">The closing date</param>
            <returns></returns>
        </member>
        <member name="T:TradingLib.Common.OffsetInfo">
            <summary>
            instructions used to control offset amounts and distances.
            </summary>
        </member>
        <member name="M:TradingLib.Common.OffsetInfo.#ctor(TradingLib.Common.OffsetInfo)">
            <summary>
            copy an existing offset to this one
            </summary>
            <param name="copy"></param>
        </member>
        <member name="M:TradingLib.Common.OffsetInfo.#ctor(System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Boolean,System.Int32)">
            <summary>
            create an offset instruction
            </summary>
            <param name="profitdist">in cents</param>
            <param name="stopdist">in cents</param>
            <param name="profitpercent">in percent (eg .1 = 10%)</param>
            <param name="stoppercent">in percent (eg .1 = 10%)</param>
            <param name="NormalizeSize">true or false</param>
            <param name="MinSize">minimum lot size when normalize size is true</param>
        </member>
        <member name="M:TradingLib.Common.OffsetInfo.DISABLEOFFSET">
            <summary>
            set an offset to this to disable it
            </summary>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.ReqChangePasswordRequest.Account">
            <summary>
            交易帐号
            </summary>
        </member>
        <member name="P:TradingLib.Common.ReqChangePasswordRequest.OldPassword">
            <summary>
            旧密码
            </summary>
        </member>
        <member name="P:TradingLib.Common.ReqChangePasswordRequest.NewPassword">
            <summary>
            新密码
            </summary>
        </member>
        <member name="T:TradingLib.Common.ConnectorInfo">
            <summary>
            通道状态
            </summary>
        </member>
        <member name="P:TradingLib.Common.ConnectorInfo.Token">
            <summary>
            通道token
            </summary>
        </member>
        <member name="P:TradingLib.Common.ConnectorInfo.Name">
            <summary>
            通道名称
            </summary>
        </member>
        <member name="P:TradingLib.Common.ConnectorInfo.IsLive">
            <summary>
            是否处于工作状态
            </summary>
        </member>
        <member name="P:TradingLib.Common.ConnectorInfo.Type">
            <summary>
            通道类别
            </summary>
        </member>
        <member name="P:TradingLib.Common.ExStrategyTemplateSetting.ID">
            <summary>
            模板ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.ExStrategyTemplateSetting.Name">
            <summary>
            模板名称
            </summary>
        </member>
        <member name="P:TradingLib.Common.ExStrategyTemplateSetting.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:TradingLib.Common.ExStrategyTemplateSetting.Domain_ID">
            <summary>
            域ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.ExStrategyTemplate.ExStrategy">
            <summary>
            该策略模板对应的策略实例
            </summary>
        </member>
        <member name="T:TradingLib.Common.ExStrategy">
            <summary>
            交易系统核心算法参数
            用于设定保证金计算方式，可用资金计算方式以及其他与交易相关的数据或参数的算法方式
            </summary>
        </member>
        <member name="P:TradingLib.Common.ExStrategy.ID">
            <summary>
            数据库ID编号
            </summary>
        </member>
        <member name="P:TradingLib.Common.ExStrategy.Template_ID">
            <summary>
            模板编号
            </summary>
        </member>
        <member name="P:TradingLib.Common.ExStrategy.Margin">
            <summary>
            保证金计算方法
            按不同的保证金计算方法来计算交易账户的持仓保证金
            </summary>
        </member>
        <member name="P:TradingLib.Common.ExStrategy.AvabileFund">
            <summary>
            可用资金计算方法
            </summary>
        </member>
        <member name="P:TradingLib.Common.ExStrategy.SideMargin">
            <summary>
            是否支持单向大边保证金制度
            </summary>
        </member>
        <member name="P:TradingLib.Common.ExStrategy.CreditSeparate">
            <summary>
            交易账户信用额度是否单独显示(博弈客户端是否单独显示交易账户的信用额度)
            </summary>
        </member>
        <member name="M:TradingLib.Common.VendorUtils.GetBrokerToken(TradingLib.API.Vendor)">
            <summary>
            获得实盘帐户对象的成交通道标识
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.VendorUtils.AcceptEntryOrder(TradingLib.API.Vendor,TradingLib.API.Order,System.Decimal)">
            <summary>
            判断某个实盘帐户是否可用
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.VendorUtils.IsBrokerAvabile(TradingLib.API.Vendor)">
            <summary>
            判断Vendoer的底层通道是否正常可用
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.PostionUtils.CalcPositionMargin(TradingLib.API.Position)">
            <summary>
            计算持仓保证金
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.PostionUtils.CalcPositionSettleMargin(TradingLib.API.Position)">
            <summary>
            计算结算保证金
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.PostionUtils.CalcRealizedPL(TradingLib.API.Position)">
            <summary>
            计算平仓盈亏
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.PostionUtils.CalcUnRealizedPL(TradingLib.API.Position)">
            <summary>
            计算浮动盈亏
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:TradingLib.Common.PostionUtils.CalcSettleUnRealizedPL(TradingLib.API.Position)”忽略有格式错误的 XML 注释 -->
        <member name="M:TradingLib.Common.PostionUtils.CalcPositionCost(TradingLib.API.Position)">
            <summary>
            计算持仓成本
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.PostionUtils.CalcPositionValue(TradingLib.API.Position)">
            <summary>
            计算持仓市值
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.PostionUtils.CalcSettlePositionValue(TradingLib.API.Position)">
            <summary>
            计算持仓结算市值
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.PostionUtils.CalCommission(TradingLib.API.Position)">
            <summary>
            获得持仓内所有成交手续费
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.PostionUtils.CalCloseProfitByDate(TradingLib.API.Position)">
            <summary>
            累加所有持仓明细的逐日平仓盈亏
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.PostionUtils.CalCloseProfitByTrade(TradingLib.API.Position)">
            <summary>
            累加所有持仓明细的逐笔平仓盈亏
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.PostionUtils.GenPositionEx(TradingLib.API.Position)">
            <summary>
            生成PositionEx用于通知客户端
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="T:TradingLib.Common.RuleClassItem">
            <summary>
            规则集条目 用于从反射加载的type中获得相关信息 比如名称，描述，参数的可设置性等
            通过序列化后可以在管理形成对应的风控规则条目,并启动对应的设置界面进行设置
            具体的设置通过RuleItem进行传递,然后调用对应的验证过程
            </summary>
        </member>
        <member name="M:TradingLib.Common.RuleClassItem.GenerateRuleInstance(TradingLib.Common.RuleItem)">
            <summary>
            生成风控规则实例对象
            传入一条RuleItem记录 生成对应的IRule规则对象
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.RuleClassItem.ValidSetting(TradingLib.Common.RuleItem,System.String@)">
            <summary>
            验证设定
            </summary>
            <param name="item"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.RuleClassItem.Type2RuleClassItem(System.Type)">
            <summary>
            由反射的type生成ruleclasstype 
            将相关属性进行封装方便生成风控规则实例
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.RuleClassItem.ClassName">
            <summary>
            类名全称
            </summary>
        </member>
        <member name="P:TradingLib.Common.RuleClassItem.ValueName">
            <summary>
            检查变量名称
            </summary>
        </member>
        <member name="P:TradingLib.Common.RuleClassItem.Type">
            <summary>
            规则类别 委托风控规则/帐户风控规则
            </summary>
        </member>
        <member name="P:TradingLib.Common.RuleClassItem.Title">
            <summary>
            风控规则名称
            </summary>
        </member>
        <member name="P:TradingLib.Common.RuleClassItem.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:TradingLib.Common.RuleClassItem.CanSetValue">
            <summary>
            是否允许设置参数值
            </summary>
        </member>
        <member name="P:TradingLib.Common.RuleClassItem.CanSetCompare">
            <summary>
            是否需要设置参数关系
            </summary>
        </member>
        <member name="P:TradingLib.Common.RuleClassItem.CanSetSymbols">
            <summary>
            是否需要设置合约列表
            </summary>
        </member>
        <member name="P:TradingLib.Common.RuleClassItem.RuleClassType">
            <summary>
            风控规则type
            </summary>
        </member>
        <member name="P:TradingLib.Common.RuleClassItem.DefaultCompare">
            <summary>
            默认关系
            </summary>
        </member>
        <member name="P:TradingLib.Common.RuleClassItem.DefaultValue">
            <summary>
            默认值
            </summary>
        </member>
        <member name="T:TradingLib.Common.ErrorOrderRspInoDel">
            <summary>
            委托信息
            </summary>
            <param name="o"></param>
            <param name="info"></param>
        </member>
        <member name="T:TradingLib.Common.RspInfoImpl">
            <summary>
            回报消息
            用于向客户端回报错误提示
            正常查询内也会附带对应的回报消息,逻辑数据包会自行进行解析并形成对应的逻辑包
            </summary>
        </member>
        <member name="T:TradingLib.Common.MGRQryManagerRequest">
            <summary>
            查询管理员列表
            </summary>
        </member>
        <member name="T:TradingLib.Common.RspMGRQryManagerResponse">
            <summary>
            查询管理员列表回报
            </summary>
        </member>
        <member name="T:TradingLib.Common.MGRReqAddManagerRequest">
            <summary>
            请求添加管理员
            </summary>
        </member>
        <member name="T:TradingLib.Common.MGRReqUpdateManagerRequest">
            <summary>
            请求更新管理员
            </summary>
        </member>
        <member name="T:TradingLib.Common.MGRChangeAccountPassRequest">
            <summary>
            修改密码请求
            </summary>
        </member>
        <member name="P:TradingLib.Common.MGRChangeAccountPassRequest.TradingAccount">
            <summary>
            交易帐号
            </summary>
        </member>
        <member name="P:TradingLib.Common.MGRChangeAccountPassRequest.NewPassword">
            <summary>
            新密码
            </summary>
        </member>
        <member name="T:TradingLib.Common.MGRQryRuleSetRequest">
            <summary>
            查询服务端规则列表
            </summary>
        </member>
        <member name="T:TradingLib.Common.RspMGRQryRuleSetResponse">
            <summary>
            查询风控规则回报
            </summary>
        </member>
        <member name="T:TradingLib.Common.MGRUpdateRuleRequest">
            <summary>
            请求更新规则
            </summary>
        </member>
        <member name="T:TradingLib.Common.RspMGRUpdateRuleResponse">
            <summary>
            更新帐户规则回报
            </summary>
        </member>
        <member name="T:TradingLib.Common.MGRQryRuleItemRequest">
            <summary>
            查询交易帐户的风控规则
            </summary>
        </member>
        <member name="P:TradingLib.Common.MGRQryRuleItemRequest.Account">
            <summary>
            查询的交易帐号
            </summary>
        </member>
        <member name="P:TradingLib.Common.MGRQryRuleItemRequest.RuleType">
            <summary>
            查询的风控规则类别
            </summary>
        </member>
        <member name="T:TradingLib.Common.RspMGRQryRuleItemResponse">
            <summary>
            查询帐户风控项目回报
            </summary>
        </member>
        <member name="T:TradingLib.Common.MGRDelRuleItemRequest">
            <summary>
            删除风控规则
            </summary>
        </member>
        <member name="T:TradingLib.Common.RspMGRDelRuleItemResponse">
            <summary>
            删除风控规则回报
            </summary>
        </member>
        <member name="M:TradingLib.Common.PositionDetailUtil.GetDateTime(TradingLib.API.PositionDetail)">
            <summary>
            获得开仓时间
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.PositionDetailUtil.IsClosed(TradingLib.API.PositionDetail)">
            <summary>
            该持仓是否已经被关闭
            如果开仓量等于平仓量则该持仓关闭
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.PositionDetailUtil.PositionPrice(TradingLib.API.PositionDetail)">
            <summary>
            持仓成本
            今仓的持仓成本为 当日开仓价格 昨仓的平仓成本为 结算价格
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.PositionDetailUtil.GetPositionDetailStr(TradingLib.API.PositionDetail)">
            <summary>
            获得文字输出
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="T:TradingLib.Common.Util">
            <summary>
            Utility class holding commonly used properties
            </summary>
        </member>
        <member name="F:TradingLib.Common.Util.Version">
            <summary>
            用于记录当前服务器版本，客户端版本不能小于服务端版本，如果客户端版本小于服务端版本，则表明服务端有更新，需要更新客户端API
            </summary>
        </member>
        <member name="M:TradingLib.Common.Util.ConsolePrint(TradingLib.API.ILogItem)">
            <summary>
            控制台输出
            通过控制台打印日志输出
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:TradingLib.Common.Util.StartStatus(System.String,System.Boolean)">
            <summary>
            开始信息
            </summary>
            <param name="body"></param>
        </member>
        <member name="M:TradingLib.Common.Util.StopStatus(System.String,System.Boolean)">
            <summary>
            停止信息
            </summary>
            <param name="body"></param>
        </member>
        <member name="M:TradingLib.Common.Util.GetColor(TradingLib.API.QSEnumDebugLevel)">
            <summary>
            Get color for the specified log level
            </summary>
            <param name="level">Level for the log entry</param>
            <returns>A <see cref="T:System.ConsoleColor"/> for the level</returns>
        </member>
        <member name="M:TradingLib.Common.Util.Debug(System.String,TradingLib.API.QSEnumDebugLevel,System.String)">
            <summary>
            string日志的输入委托 将系统的日志以文本形式输出到console
            </summary>
        </member>
        <member name="M:TradingLib.Common.Util.Log(TradingLib.API.ILogItem)">
            <summary>
            处理日志
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:TradingLib.Common.Util.IsValidAddress(System.String)">
            <summary>
            检查ip地址是否正常
            </summary>
            <param name="ipaddr"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.SafeToString(System.Object)">
            <summary>
            安全的调用输出某个对象的ToString
            需要先判断obj是否是null
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.PrintObj(System.Object)">
            <summary>
            以Json格式输出对象信息
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.GetDecimalPlace(System.Decimal)">
            <summary>
            获得小数点位
            </summary>
            <param name="pricetick"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.IsInPeriod(System.DateTime,System.DateTime)">
            <summary>
            是否在时间段内
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.WaitThreadStop(System.Threading.Thread,System.Int32)">
            <summary>
            等待某个线程结束
            </summary>
            <param name="thread"></param>
            <param name="waitnum"></param>
        </member>
        <member name="M:TradingLib.Common.Util.sleep(System.Int32)">
            <summary>
            sleep current thread a few milliseconds
            </summary>
            <param name="ms"></param>
        </member>
        <member name="M:TradingLib.Common.Util.GetEnumDescription(System.Object)">
            <summary>
            获得某个Enum的描述
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.GetConfigFile(System.String)">
            <summary>
            获得配置文件
            </summary>
            <param name="cfgname"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.GetResourceDirectory(System.String)">
            <summary>
            获得某个资源目录
            </summary>
            <param name="resource"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.TLD2DT(System.Int32)">
            <summary>
            Converts date to DateTime (eg 20070926 to "DateTime.Mon = 9, DateTime.Day = 26, DateTime.ShortDate = Sept 29, 2007"
            </summary>
            <param name="TradeLinkDate"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.TLT2DT(System.Int32)">
            <summary>
            Converts  Time to DateTime.  If not using seconds, put a zero.
            </summary>
            <param name="TradeLinkTime"></param>
            <param name="TradeLinkSec"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.TLT2DT(TradingLib.API.Tick)">
            <summary>
            gets datetime of a tick
            </summary>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.ToDateTime(System.Int32,System.Int32)">
            <summary>
            Converts TradeLink Date and Time format to a DateTime. 
            eg DateTime ticktime = ToDateTime(tick.date,tick.time);
            </summary>
            <param name="TradeLinkDate"></param>
            <param name="TradeLinkTime"></param>
            <param name="TradeLinkSec"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.DT2FT">
            <summary>
            gets fasttime/tradelink time for now
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.DT2FT(System.DateTime)">
            <summary>
            converts datetime to fasttime format
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.TL2FT(System.Int32,System.Int32,System.Int32)">
            <summary>
            converts tradelink time to fasttime
            </summary>
            <param name="hour"></param>
            <param name="min"></param>
            <param name="sec"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.TL2FT(TradingLib.API.Tick)">
            <summary>
            gets fasttime from a tradelink tick
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.FTDIFF(System.Int32,System.Int32)">
            <summary>
            gets elapsed seconds between two fasttimes
            </summary>
            <param name="firsttime"></param>
            <param name="latertime"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.FT2FTS(System.Int32)">
            <summary>
            converts fasttime to fasttime span, or elapsed seconds
            获得fasttime对应的秒数
            </summary>
            <param name="fasttime"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.FTADD(System.Int32,System.Int32)">
            <summary>
            adds fasttime and fasttimespan (in seconds).  does not rollover 24hr periods.
            </summary>
            <param name="firsttime"></param>
            <param name="secondtime"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.FT2DT(System.Int32)">
            <summary>
            converts fasttime to a datetime
            </summary>
            <param name="ftime"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.ToTLDateTimeEnd(System.DateTime)">
            <summary>
            获得某个时间当天最后一刻
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.ToTLDateTime">
            <summary>
            get long for current date + time
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.ToTLDateTime(System.DateTime)">
            <summary>
            get long for date + time
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.ToTLDate">
            <summary>
            gets TradeLink date for today
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.ToTLDate(System.DateTime)">
            <summary>
            Converts a DateTime to TradeLink Date (eg July 11, 2006 = 20060711)
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.ToTLDate(System.Int64)">
            <summary>
            Converts a DateTime.Ticks values to TLDate (eg 8million milliseconds since 1970 ~= 19960101 (new years 1996)
            </summary>
            <param name="DateTimeTicks"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.ToTLTime">
            <summary>
            gets tradelink time for now
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.ToTLTime(System.DateTime)">
            <summary>
            gets tradelink time from date
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.TLDateSplit(System.Int32)">
            <summary>
            Converts a TLDate integer format into an array of ints
            </summary>
            <param name="fulltime">The fulltime.</param>
            <returns>int[3] { year, month, day}</returns>
        </member>
        <member name="M:TradingLib.Common.Util.TLDateMatch(System.Int32,System.Int32,TradingLib.Common.DateMatchType)">
            <summary>
            Tests if two dates are the same, given a mask as DateMatchType.
            
            ie, 20070605 will match 20070705 if DateMatchType is Day or Year.
            </summary>
            <param name="fulldate">The fulldate in TLDate format (int).</param>
            <param name="matchdate">The matchdate to test against (int).</param>
            <param name="dmt">The "mask" that says what to pay attention to when matching.</param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.BuildFromFile(System.String)">
            <summary>
            Gets a number representing the build of an installation.
            Build is usually stored in VERSION.TXT and full path is presented via filepath.
            </summary>
            <param name="filepath"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.CleanVer(System.String)">
            <summary>
            Obtains a version out of a string that contains version + other information.
            </summary>
            <param name="ver">string containing version</param>
            <returns>version number</returns>
        </member>
        <member name="M:TradingLib.Common.Util.isEarlyClose(System.Int32)">
            <summary>
            Provide date in TLDate format, returns whether market (NYSE) closes early on this day.
            </summary>
            <param name="today"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.GetEarlyClose(System.Int32)">
            <summary>
            Gets early close time for a given date.   Returns zero if not an early close.
            </summary>
            <param name="today"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.FillsToText(System.Collections.Generic.List{TradingLib.Common.TradeImpl},System.Char,System.String)">
            <summary>
            Converts list of trades to a delimited file readable by excel, R, matlab, google spreadsheets, etc.
            </summary>
            <param name="stocktrades"></param>
            <param name="delimiter"></param>
            <param name="filepath"></param>
        </member>
        <member name="M:TradingLib.Common.Util.TradesToClosedPL(System.Collections.Generic.List{TradingLib.API.Trade})">
            <summary>
            Converts a list of trades to an array of comma-delimited string data also containing closedPL, suitable for output to file for reading by excel, R, matlab, etc.
            </summary>
            <param name="tradelist"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.TradesToClosedPL(System.Collections.Generic.List{TradingLib.API.Trade},System.Char)">
            <summary>
            Converts a list of trades to an array of delimited string data also containing closedPL, suitable for output to file for reading by excel, R, matlab, etc.
            </summary>
            <param name="tradelist"></param>
            <param name="delimiter"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.ClosedPLToText(System.Collections.Generic.List{TradingLib.API.Trade},System.Char,System.String)">
            <summary>
            Converts a list of trades to delimited text file containing closedPL, suitable for reading by excel, R, matlab, etc.
            </summary>
            <param name="tradelist"></param>
            <param name="delimiter"></param>
            <param name="filepath"></param>
        </member>
        <member name="M:TradingLib.Common.Util.TickFileIndex(System.String)">
            <summary>
            gets list of readable tickfiles in top level of a folder.
            2nd dimension of list is size of file in bytes (as string)
            </summary>
            <param name="folder"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.TickFileIndex(System.String,System.String)">
            <summary>
            builds list of readable tick files with given extension found in top level of folder
            </summary>
            <param name="Folder"></param>
            <param name="tickext"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.TickFileIndex(System.String,System.String,System.Boolean)">
            <summary>
            builds list of readable tickfiles found in given folder
            </summary>
            <param name="Folder">path containing tickfiles</param>
            <param name="tickext">file extension</param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.TickFileIndex(System.String,System.String,System.Boolean,TradingLib.API.DebugDelegate)">
            <summary>
            builds list of readable tickfiles (and their byte-size) found in folder
            </summary>
            <param name="Folder"></param>
            <param name="tickext"></param>
            <param name="searchSubFolders"></param>
            <param name="debug"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.DumpObjectProperties(System.Object)">
            <summary>
            dumps public properties and fields of an object as an xml string
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.DumpObjectProperties(System.Object,TradingLib.API.DebugDelegate)">
            <summary>
            dumps public properties and fields as xml string, with optional debugging for errors
            </summary>
            <param name="o"></param>
            <param name="deb"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.ProgramCount(System.String)">
            <summary>
            
            </summary>
            <param name="PROGRAM"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.Serialize``1(``0)">
            <summary>
            convert any structure/type to a string (can be converted back using Deserialize)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.Serialize``1(``0,TradingLib.API.DebugDelegate)">
            <summary>
            convert any structure/type to a string (can be converted back using Deserialize)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="o"></param>
            <param name="debug"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.Serialize``1(``0,System.Boolean,TradingLib.API.DebugDelegate)">
            <summary>
            convert any structure/type to a string (can be converted back using Deserialize)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="o"></param>
            <param name="compress"></param>
            <param name="debug"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.Deserialize``1(System.String)">
            <summary>
            deserialize a structure/type from a string
            </summary>
            <typeparam name="T"></typeparam>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.Deserialize``1(System.String,TradingLib.API.DebugDelegate)">
            <summary>
            deserialize a structure/type from a string
            </summary>
            <typeparam name="T"></typeparam>
            <param name="msg"></param>
            <param name="debug"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.Deserialize``1(System.String,System.Boolean,TradingLib.API.DebugDelegate)">
            <summary>
            deserialize a structure/type from a string
            </summary>
            <typeparam name="T"></typeparam>
            <param name="msg"></param>
            <param name="uncompress"></param>
            <param name="debug"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.ToFile``1(``0,System.String)">
            <summary>
            create an xml file from any data structure (can be restored with FromFile)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="o"></param>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.ToFile``1(``0,System.String,TradingLib.API.DebugDelegate)">
            <summary>
            create an xml file from any data structure (can be restored with FromFile)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="o"></param>
            <param name="file"></param>
            <param name="debug"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.FromFile``1(System.String,``0@)">
            <summary>
            restore data structure(s) from a file (created with ToFile)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="file"></param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Util.FromFile``1(System.String,``0@,TradingLib.API.DebugDelegate)">
            <summary>
            restore data structure(s) from a file (created with ToFile)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="file"></param>
            <param name="o"></param>
            <param name="debug"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.Util.TLTickDir">
            <summary>
            path to  tick folder
            </summary>
        </member>
        <member name="T:TradingLib.Common.OrderTransactionDeleteBeforeInsert">
            <summary>
            提交新的委托前取消一组委托 用于强平持仓(撤单后再平仓)
            </summary>
        </member>
        <member name="T:TradingLib.Common.OrderTransactionFlatPositionBeforeInsert">
            <summary>
            用于反手操作
            </summary>
        </member>
        <member name="E:TradingLib.Common.OrderTransactionHelper.SendOrderEvent">
            <summary>
            当委托前取消一组委托事务中 所有的委托均取消了，触发发送委托事件
            </summary>
        </member>
        <member name="M:TradingLib.Common.TaskStatus.GetTask(System.String)">
            <summary>
            gets a task
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TaskStatus.Reset(System.String)">
            <summary>
            reset count for a task
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:TradingLib.Common.TaskStatus.HasNetSuccess(System.String,System.Int32)">
            <summary>
            see whether task has some success
            </summary>
            <param name="task"></param>
            <param name="minnetsuccess"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.TaskStatus.CountSuccess(System.String)">
            <summary>
            count successful task
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:TradingLib.Common.TaskStatus.CountFail(System.String)">
            <summary>
            count an unsuccessful attempt
            </summary>
            <param name="task"></param>
            <param name="path"></param>
        </member>
        <member name="T:TradingLib.Common.BarImpl">
            <summary>
            A single bar of price data, which represents OHLC and volume for an interval of time.
            </summary>
        </member>
        <member name="M:TradingLib.Common.BarImpl.#ctor(System.Int32)">
            <summary>
            生成一个Interval(units)为多少个间隔的Bar
            </summary>
            <param name="interval"></param>
        </member>
        <member name="M:TradingLib.Common.BarImpl.bt(System.Int32)">
            <summary>
            bt是用来计算一天中的第几根Bar是用序号来计算的
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.BarImpl.newTick(TradingLib.API.Tick)">
            <summary>
            Accepts the specified tick.
            </summary>
            <param name="t">The tick you want to add to the bar.</param>
            <returns>true if the tick is accepted, false if it belongs to another bar.</returns>
        </member>
        <member name="M:TradingLib.Common.BarImpl.FromCSV(System.String)">
            <summary>
            Create bar object from a CSV file providing OHLC+Volume data.
            从csv获得bar数据
            </summary>
            <param name="record">The record in comma-delimited format.</param>
            <returns>The equivalent Bar</returns>
        </member>
        <member name="M:TradingLib.Common.BarImpl.Serialize(TradingLib.API.Bar)">
            <summary>
            序列化bar
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.BarImpl.Deserialize(System.String)">
            <summary>
            反序列化bar
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.BarImpl.ToTick(TradingLib.API.Bar)">
            <summary>
            convert a bar into an array of ticks
            将bar转换成Tick数据 通过 4分法将o h l c 形成对应的 trade tick
            </summary>
            <param name="bar"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.BarImpl.ParseBarRequest(System.String)">
            <summary>
            parses message into a structured bar request
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.BarImpl.BuildBarRequest(System.String,TradingLib.API.BarInterval)">
            <summary>
            request historical data for today
            </summary>
            <param name="symbol"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.BarImpl.BuildBarRequest(System.String,TradingLib.API.BarInterval,System.Int32)">
            <summary>
            bar request for symbol and interval from previous date through present time
            </summary>
            <param name="symbol"></param>
            <param name="interval"></param>
            <param name="startdate"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.BarImpl.BuildBarRequest(TradingLib.Common.BarRequest)">
            <summary>
            builds bar request
            </summary>
            <param name="br"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.BarImpl.BuildBarRequestBarsBack(System.String,System.Int32,System.Int32)">
            <summary>
            build bar request for certain # of bars back from present 获得自当前时间开始多少个bar
            </summary>
            <param name="sym"></param>
            <param name="barsback"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.BarImpl.Bartime">
            <summary>
            对应的当日Bar的开始时间,通过_time进行计算
            </summary>
        </member>
        <member name="F:TradingLib.Common.BarRequest.Client">
            <summary>
            client making request
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspQryContractBankResponse.BankName">
            <summary>
            银行名称
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspQryContractBankResponse.BankID">
            <summary>
            银行编号
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspQryContractBankResponse.BankBrchID">
            <summary>
            银行分支编号
            </summary>
        </member>
        <member name="T:TradingLib.Common.MGRReqUpdatePosLockRequest">
            <summary>
            请求修改帐户锁仓权限
            </summary>
        </member>
        <member name="P:TradingLib.Common.MGRReqUpdatePosLockRequest.TradingAccount">
            <summary>
            交易帐号
            </summary>
        </member>
        <member name="P:TradingLib.Common.MGRReqUpdatePosLockRequest.PosLock">
            <summary>
            是否进行锁仓控制
            </summary>
        </member>
        <member name="T:TradingLib.Common.RspMGRReqUpdatePosLockResponse">
            <summary>
            请求修改锁仓权限回报
            </summary>
        </member>
        <member name="T:TradingLib.Common.TLVersion">
            <summary>
            系统版本信息
            </summary>
        </member>
        <member name="P:TradingLib.Common.TLVersion.Major">
            <summary>
            主版本号
            </summary>
        </member>
        <member name="P:TradingLib.Common.TLVersion.Minor">
            <summary>
            次版本号
            </summary>
        </member>
        <member name="P:TradingLib.Common.TLVersion.Fix">
            <summary>
            修正版本号
            </summary>
        </member>
        <member name="P:TradingLib.Common.TLVersion.Date">
            <summary>
            版本日期
            </summary>
        </member>
        <member name="P:TradingLib.Common.TLVersion.BuildNum">
            <summary>
            
            </summary>
        </member>
        <member name="T:TradingLib.Common.ConfigItem">
            <summary>
            设置
            </summary>
        </member>
        <member name="T:TradingLib.Common.RingBuffer`1">
            <summary>
            Circular buffer.   Allows reading and writing of up to BufferSize 
            element count in a FIFO fashion.   Useful for passing data asynchronously 
            between threads without requiring locking.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TradingLib.Common.RingBuffer`1.Write(`0)">
            <summary>
            writes a value into the buffer
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:TradingLib.Common.RingBuffer`1.Read">
            <summary>
            reads next unread element from buffer
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.RingBuffer`1.#ctor(System.Int32)">
            <summary>
            create a buffer of fixed size in elements
            </summary>
            <param name="BufferSize"></param>
        </member>
        <member name="E:TradingLib.Common.RingBuffer`1.BufferOverrunEvent">
            <summary>
            called when buffer overrun occurs
            </summary>
        </member>
        <member name="P:TradingLib.Common.RingBuffer`1.BufferOverrun">
            <summary>
            number of overruns, should be zero (otherwise increase buffer size)
            </summary>
        </member>
        <member name="P:TradingLib.Common.RingBuffer`1.BufferSize">
            <summary>
            maximum # of unread elements the buffer can hold.
            </summary>
        </member>
        <member name="P:TradingLib.Common.RingBuffer`1.Count">
            <summary>
            Count of unread elements
            </summary>
        </member>
        <member name="P:TradingLib.Common.RingBuffer`1.isEmpty">
            <summary>
            returns true if all written elements have been read from buffer
            </summary>
        </member>
        <member name="P:TradingLib.Common.RingBuffer`1.hasItems">
            <summary>
            returns false if there is more to be read
            </summary>
        </member>
        <member name="T:TradingLib.Common.PositionOffsetArgs">
            <summary>
            持仓止盈与止损,用于向服务端提交止损与止盈参数,从而实现服务端的止损与止盈
            </summary>
        </member>
        <member name="M:TradingLib.Common.PositionOffsetArgs.CaculateLossTakePrice(TradingLib.Common.PositionOffsetArgs,TradingLib.API.Position)">
            <summary>
            计算止损价格
            </summary>
            <param name="LossArgs"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.PositionOffsetArgs.CaculateProfitTakePrice(TradingLib.Common.PositionOffsetArgs,TradingLib.API.Position)">
            <summary>
            计算止盈价格
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.PositionOffsetArgs.UpdateArgs(TradingLib.Common.PositionOffsetArgs)">
            <summary>
            用一个止盈止损参数来更新当前止盈止损参数
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:TradingLib.Common.PositionOffsetArgs.TargetPrice(TradingLib.API.Position)">
            <summary>
            计算针对某个position其触发的止盈止损价格
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.PositionOffsetArgs.Account">
            <summary>
            该监控所对应的账户
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionOffsetArgs.Symbol">
            <summary>
            该监控的合约
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionOffsetArgs.Direction">
            <summary>
            止盈还是止损标识
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionOffsetArgs.Enable">
            <summary>
            止盈是否有效
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionOffsetArgs.OffsetType">
            <summary>
            止盈方式
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionOffsetArgs.Value">
            <summary>
            止盈值
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionOffsetArgs.Start">
            <summary>
            跟踪止盈的启动值
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionOffsetArgs.Size">
            <summary>
            止盈手数
            </summary>
        </member>
        <member name="M:TradingLib.Common.TimeIntervalData.getbarid(System.Int32,System.Int32,System.Int32)">
            <summary>
            通过时间来获得bar的序号
            </summary>
            <param name="time"></param>
            <param name="date"></param>
            <param name="intervallength"></param>
            <returns></returns>
        </member>
        <member name="T:TradingLib.Common.BarListTracker">
            <summary>
            used to track lists of bars for MANY symbols.
            BarListTracker (blt) will accept ticks and auto-create bars as barlists as needed.
            Access bars via blt["IBM"].RecentBar.Close
            blt可以同时管理多个symbol的多个interval类别的数据
            </summary>
        </member>
        <member name="M:TradingLib.Common.BarListTracker.#ctor">
            <summary>
            create a barlist tracker with all the intervals available
            (specify only intervals you need to get faster performance)
            </summary>
        </member>
        <member name="M:TradingLib.Common.BarListTracker.#ctor(System.Int32)">
            <summary>
            creates tracker for single custom interval
            </summary>
            <param name="custominterval"></param>
        </member>
        <member name="M:TradingLib.Common.BarListTracker.#ctor(System.Int32[],TradingLib.API.BarInterval[])">
            <summary>
            creates tracker for number of custom intervals.
            (use this if you want to mix standard and custom intervals)
            </summary>
            <param name="customintervals"></param>
        </member>
        <member name="M:TradingLib.Common.BarListTracker.#ctor(TradingLib.API.BarInterval[])">
            <summary>
            creates tracker for specified number of standard intervals
            </summary>
            <param name="intervals"></param>
        </member>
        <member name="M:TradingLib.Common.BarListTracker.Reset">
            <summary>
            clears all data from tracker
            </summary>
        </member>
        <member name="M:TradingLib.Common.BarListTracker.newTick(TradingLib.API.Tick)">
            <summary>
            give any ticks (trades) to this symbol and tracker will create barlists automatically 
            </summary>
            <param name="k"></param>
        </member>
        <member name="M:TradingLib.Common.BarListTracker.newPoint(System.String,System.Decimal,System.Int32,System.Int32,System.Int32)">
            <summary>
            add any data point to bar
            </summary>
            <param name="symbol"></param>
            <param name="p"></param>
            <param name="time"></param>
            <param name="date"></param>
            <param name="size"></param>
        </member>
        <member name="M:TradingLib.Common.BarListTracker.newBid(TradingLib.API.Tick)">
            <summary>
            build bar with bid data rather than trades
            </summary>
            <param name="k"></param>
        </member>
        <member name="M:TradingLib.Common.BarListTracker.newAsk(TradingLib.API.Tick)">
            <summary>
            build bar with ask data rather than trades
            </summary>
            <param name="k"></param>
        </member>
        <member name="P:TradingLib.Common.BarListTracker.DefaultCustomInterval">
            <summary>
            default custom interval used by this tracker 默认的intervals
            </summary>
        </member>
        <member name="P:TradingLib.Common.BarListTracker.CustomIntervals">
            <summary>
            custom bar intervals used by this tracker 请求的intervals
            </summary>
        </member>
        <member name="P:TradingLib.Common.BarListTracker.Intervals">
            <summary>
            intervals requested when tracker was created
            </summary>
        </member>
        <member name="P:TradingLib.Common.BarListTracker.Item(System.String)">
            <summary>
            gets barlist for a given symbol.   will return an invalid barlist if no ticks have been received for symbol
            </summary>
            <param name="sym"></param>
            <returns></returns>
        </member>
        <member name="T:TradingLib.Common.ContractBank">
            <summary>
            签约银行
            </summary>
        </member>
        <member name="P:TradingLib.Common.ContractBank.ID">
            <summary>
            数据库全局ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.ContractBank.Name">
            <summary>
            银行名称
            </summary>
        </member>
        <member name="P:TradingLib.Common.ContractBank.BrankID">
            <summary>
            银行编号
            </summary>
        </member>
        <member name="P:TradingLib.Common.ContractBank.BrankBrchID">
            <summary>
            分支机构代码
            </summary>
        </member>
        <member name="P:TradingLib.Common.NotifyMGRSessionUpdateNotify.TradingAccount">
            <summary>
            交易帐号
            </summary>
        </member>
        <member name="P:TradingLib.Common.NotifyMGRSessionUpdateNotify.IsLogin">
            <summary>
            是否登入
            </summary>
        </member>
        <member name="P:TradingLib.Common.NotifyMGRSessionUpdateNotify.IPAddress">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="P:TradingLib.Common.NotifyMGRSessionUpdateNotify.FrontID">
            <summary>
            前置地址
            </summary>
        </member>
        <member name="P:TradingLib.Common.NotifyMGRSessionUpdateNotify.ClientID">
            <summary>
            客户端ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.NotifyMGRSessionUpdateNotify.HardwarCode">
            <summary>
            设备硬件编码
            </summary>
        </member>
        <member name="P:TradingLib.Common.NotifyMGRSessionUpdateNotify.ProductInfo">
            <summary>
            客户端产品信息
            </summary>
        </member>
        <member name="P:TradingLib.Common.ContribRequest.ModuleID">
            <summary>
            模块ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.ContribRequest.CMDStr">
            <summary>
            命令名
            </summary>
        </member>
        <member name="P:TradingLib.Common.ContribRequest.Parameters">
            <summary>
            命令参数
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspContribResponse.ModuleID">
            <summary>
            模块ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspContribResponse.CMDStr">
            <summary>
            命令名
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspContribResponse.Result">
            <summary>
            返回的Json字符串
            </summary>
        </member>
        <member name="T:TradingLib.Common.ConfirmSettlementRequest">
            <summary>
            确认结算单
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspConfirmSettlementResponse.ConfirmDay">
            <summary>
            确认日期
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspConfirmSettlementResponse.ConfirmTime">
            <summary>
            确认时间
            </summary>
        </member>
        <member name="T:TradingLib.Common.ConfigFile">
            <summary>
            配置文件对象
            用于从文本加载配置,或保存配置文件
            
            </summary>
        </member>
        <member name="P:TradingLib.Common.ConfigFile.Item(System.String)">
            <summary>
            通过下标来进行读取或者保存配置
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="F:TradingLib.Common.QSEnumChargeType.Relative">
            <summary>
            相对收取，在标准手续费上加收一定金额
            </summary>
        </member>
        <member name="F:TradingLib.Common.QSEnumChargeType.Absolute">
            <summary>
            绝对收取,按某值进行绝对收取
            </summary>
        </member>
        <member name="F:TradingLib.Common.QSEnumChargeType.Percent">
            <summary>
            上浮一定比例收取,0.1 上浮10%
            </summary>
        </member>
        <member name="T:TradingLib.Common.TickArchiver">
            <summary>
            archive ticks as they arrive.   Once archived, ticks can be replayed, viewed or analyzed in any of the tradelink programs.
            </summary>
        </member>
        <member name="T:TradingLib.Common.MOCOrder">
            <summary>
            market on close order
            </summary>
        </member>
        <member name="M:TradingLib.Common.SymbolHelper.genSecurityCode(System.String)">
            <summary>
            IF1301通过解析symol来得到对应的合约品种代码
            数字之前的所有字母为SecurityCode品种代码
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="T:TradingLib.Common.LSPositionTracker">
            <summary>
            LSPosition Tracker
            持仓维护器
            按持仓的多空方向进行维护,每个方向的持仓维护其PositionTracker可以同时维护多个合约
            </summary>
        </member>
        <member name="F:TradingLib.Common.LSPositionTracker._ltk">
            <summary>
            long position tracker
            </summary>
        </member>
        <member name="F:TradingLib.Common.LSPositionTracker._stk">
            <summary>
            short position tracker
            </summary>
        </member>
        <member name="M:TradingLib.Common.LSPositionTracker.GotTick(TradingLib.API.Tick)">
            <summary>
            更新持仓管理器中的最新行情数据
            </summary>
            <param name="?"></param>
        </member>
        <member name="M:TradingLib.Common.LSPositionTracker.GotFill(TradingLib.API.Trade)">
            <summary>
            获得一个成交记录
            用于更新持仓状态
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:TradingLib.Common.LSPositionTracker.GotPosition(TradingLib.API.PositionDetail)">
            <summary>
            获得一个持仓明细记录
            用于恢复历史持仓
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:TradingLib.Common.LSPositionTracker.Clear">
            <summary>
            清空记录的数据
            </summary>
        </member>
        <member name="M:TradingLib.Common.LSPositionTracker.NewPositionCloseDetail(TradingLib.API.PositionCloseDetail)">
            <summary>
            产生新的持仓对象
            </summary>
            <param name="detail"></param>
        </member>
        <member name="M:TradingLib.Common.LSPositionTracker.NewPosition(TradingLib.API.Position)">
            <summary>
            产生新的平仓明细
            </summary>
            <param name="pos"></param>
        </member>
        <member name="P:TradingLib.Common.LSPositionTracker.Item(System.String,System.String,System.Boolean)">
            <summary>
            获得某个合约 某个帐户 某个方向的持仓
            获得持仓时需要明确提供对应的方向
            </summary>
            <param name="symbol"></param>
            <param name="account"></param>
            <param name="side"></param>
            <returns></returns>
        </member>
        <member name="T:TradingLib.Common.Calc">
            <summary>
            collection of calculations
            </summary>
        </member>
        <member name="M:TradingLib.Common.Calc.Round2Decimals(System.Decimal,System.Decimal)">
            <summary>
            round number to nearest decimal places (eg MINTICK)
            </summary>
            <param name="num"></param>
            <param name="round2nearest"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.OpenPT(System.Decimal,System.Decimal,System.Int32)">
            <summary>
            Gets the open PL on a per-share basis, ignoring the size of the position.
            </summary>
            <param name="LastTrade">The last trade.</param>
            <param name="AvgPrice">The avg price.</param>
            <param name="PosSize">Size of the pos.</param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.OpenPT(System.Decimal,System.Decimal,System.Boolean)">
            <summary>
            Gets the open PL on a per-share basis (also called points or PT), ignoring the size of the position.
            </summary>
            <param name="LastTrade">The last trade.</param>
            <param name="AvgPrice">The avg price.</param>
            <param name="Side">if set to <c>true</c> [side].</param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.OpenPL(System.Decimal,System.Decimal,System.Int32)">
            <summary>
            Gets the open PL considering all the shares held in a position.
            </summary>
            <param name="LastTrade">The last trade.</param>
            <param name="AvgPrice">The avg price.</param>
            <param name="PosSize">Size of the pos.</param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.OpenPL(System.Decimal,TradingLib.API.Position)">
            <summary>
            get open pl for position given the last trade
            </summary>
            <param name="LastTrade"></param>
            <param name="Pos"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.taprep(System.Decimal[])">
            <summary>
            prepare an array for us with ta lib
            </summary>
            <param name="ih"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.taprep(System.Decimal[],System.Boolean)">
            <summary>
            prepare an array for us with ta lib
            </summary>
            <param name="ih"></param>
            <param name="includerecent"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.taprep(System.Decimal[],System.Int32@,System.Double[]@)">
            <summary>
            prepare an array for us with ta lib
            </summary>
            <param name="ih"></param>
            <param name="end"></param>
            <param name="h"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.taprep(System.Decimal[],System.Boolean,System.Int32@,System.Double[]@)">
            <summary>
            prepare an array for us with ta lib
            </summary>
            <param name="ih"></param>
            <param name="includerecent"></param>
            <param name="end"></param>
            <param name="h"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.taprep(System.Int64[])">
            <summary>
            prepare an array for us with ta lib
            </summary>
            <param name="ih"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.taprep(System.Int64[],System.Boolean)">
            <summary>
            prepare an array for us with ta lib
            </summary>
            <param name="ih"></param>
            <param name="includerecent"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.taprep(System.Int64[],System.Int32@,System.Double[]@)">
            <summary>
            prepare an array for us with ta lib
            </summary>
            <param name="ih"></param>
            <param name="end"></param>
            <param name="h"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.taprep(System.Int64[],System.Boolean,System.Int32@,System.Double[]@)">
            <summary>
            prepare an array for us with ta lib
            </summary>
            <param name="ih"></param>
            <param name="includerecent"></param>
            <param name="end"></param>
            <param name="h"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.TAPopulateGT(System.String,System.Int32,System.Double[]@,TradingLib.Common.GenericTracker{System.Decimal})">
            <summary>
            populate generic tracker with most recent TA-lib result
            </summary>
            <param name="sym"></param>
            <param name="nb"></param>
            <param name="res"></param>
            <param name="gt"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.TAPopulateGT(System.Int32,System.Int32,System.Double[]@,TradingLib.Common.GenericTracker{System.Decimal})">
            <summary>
            populate generic tracker with most recent TA-lib result
            </summary>
            <param name="idx"></param>
            <param name="nb">number of elements (returned from ta lib)</param>
            <param name="res">result (returned from ta-lib)</param>
            <param name="gt"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.TAPopulateGT(System.Int32,System.Int32,System.Int32,System.Double[]@,TradingLib.Common.GenericTracker{System.Decimal})">
            <summary>
            populate generic tracker with most recent TA-lib result
            </summary>
            <param name="idx"></param>
            <param name="nb">number of elements (returned from ta lib)</param>
            <param name="dplaces">round to this many decimal places</param>
            <param name="res">result (returned from ta-lib)</param>
            <param name="gt"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.TAPopulateGT(System.Int32,System.Int32,System.Int32[]@,TradingLib.Common.GenericTracker{System.Int32})">
            <summary>
            populate a gt with a talib integer result
            </summary>
            <param name="idx"></param>
            <param name="nb"></param>
            <param name="res"></param>
            <param name="gt"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.TAPopulateGT(System.Int32,System.Int32,System.Int32,System.Int32[]@,TradingLib.Common.GenericTracker{System.Int32})">
            <summary>
            populate a gt with a talib integer result
            </summary>
            <param name="idx"></param>
            <param name="nb"></param>
            <param name="dplaces"></param>
            <param name="res"></param>
            <param name="gt"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Double2Decimal(System.Double[]@)">
            <summary>
            convert double array to decimal
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Double2Decimal(System.Double[])">
            <summary>
            convert double array to decimal
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.ClosePT(TradingLib.API.Position,TradingLib.API.Trade)">
            <summary>
            Gets the closed PL on a per-share basis, ignoring how many shares are held.
            </summary>
            <param name="existing">The existing position.</param>
            <param name="closing">The portion of the position that's being closed/changed.</param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.ClosePL(TradingLib.API.Position,TradingLib.API.Trade)">
            <summary>
            Gets the closed PL on a position basis, the PL that is registered to the account for the entire shares transacted.
            </summary>
            <param name="existing">The existing position.</param>
            <param name="closing">The portion of the position being changed/closed.</param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Norm2Min(System.Decimal,System.Int32)">
            <summary>
            Normalizes any order size to the minimum lot size specified by MinSize.
            </summary>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.OffsetPrice(TradingLib.API.Position,System.Decimal)">
            <summary>
            Provides an offsetting price from a position.
            </summary>
            <param name="p">Position</param>
            <param name="offset">Offset amount</param>
            <returns>Offset price</returns>
        </member>
        <member name="M:TradingLib.Common.Calc.PositionProfit(TradingLib.API.Position,System.Decimal)">
            <summary>
            Defaults to 100% of position at target.
            </summary>
            <param name="p">your position</param>
            <param name="offset">your target</param>
            <returns>profit taking limit order</returns>
        </member>
        <member name="M:TradingLib.Common.Calc.PositionProfit(TradingLib.API.Position,System.Decimal,System.Decimal)">
            <summary>
            Generates profit taking order for a given position, at a specified per-share profit target.  
            </summary>
            <param name="p">your position</param>
            <param name="offset">target price, per share/contract</param>
            <param name="percent">percent of the position to close with this order</param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.PositionProfit(TradingLib.API.Position,System.Decimal,System.Decimal,System.Boolean,System.Int32)">
            <summary>
            Generates profit taking order for a given position, at a specified per-share profit target.  
            </summary>
            <param name="p">your position</param>
            <param name="offset">target price, per share/contract</param>
            <param name="percent">percent of the position to close with this order</param>
            <param name="normalizesize">whether to normalize order to be an even-lot trade</param>
            <param name="MINSIZE">size of an even lot</param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.PositionProfit(TradingLib.API.Position,TradingLib.Common.OffsetInfo)">
            <summary>
            get profit order for given position given offset information
            </summary>
            <param name="p"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.PositionStop(TradingLib.API.Position,System.Decimal)">
            <summary>
            Generate a stop order for a position, at a specified per-share/contract price.  Defaults to 100% of position.
            </summary>
            <param name="p">your position</param>
            <param name="offset">how far away stop is</param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.PositionStop(TradingLib.API.Position,System.Decimal,System.Decimal)">
            <summary>
            Generate a stop order for a position, at a specified per-share/contract price
            </summary>
            <param name="p">your position</param>
            <param name="offset">how far away stop is</param>
            <param name="percent">what percent of position to close</param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.PositionStop(TradingLib.API.Position,System.Decimal,System.Decimal,System.Boolean,System.Int32)">
            <summary>
            Generate a stop order for a position, at a specified per-share/contract price
            </summary>
            <param name="p">your position</param>
            <param name="offset">how far away stop is</param>
            <param name="percent">what percent of position to close</param>
            <param name="normalizesize">whether to normalize size to even-lots</param>
            <param name="MINSIZE">size of an even lot</param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.PositionStop(TradingLib.API.Position,TradingLib.Common.OffsetInfo)">
            <summary>
            get a stop order for a position given offset information
            </summary>
            <param name="p"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Sum(System.Decimal[],System.Int32)">
            <summary>
            sum last elements of array
            </summary>
            <param name="array"></param>
            <param name="barsback"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Sum(System.Decimal[],System.Int32,System.Int32)">
            <summary>
            sum part of an array
            </summary>
            <param name="array"></param>
            <param name="startindex"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Sum(System.Decimal[])">
            <summary>
            gets sum of entire array
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.SumSquares(System.Decimal[],System.Int32)">
            <summary>
            gets sum of squares for end of an array
            </summary>
            <param name="array"></param>
            <param name="barsback"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.SumSquares(System.Decimal[],System.Int32,System.Int32)">
            <summary>
            get sums of squares for part of an array
            </summary>
            <param name="array"></param>
            <param name="startindex"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.SumSquares(System.Decimal[])">
            <summary>
            gets sum of squares for entire array
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Sum(System.Int32[],System.Int32)">
            <summary>
            sum last elements of array
            </summary>
            <param name="array"></param>
            <param name="barsback"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Sum(System.Int32[],System.Int32,System.Int32)">
            <summary>
            sum part of an array
            </summary>
            <param name="array"></param>
            <param name="startindex"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Sum(System.Int64[],System.Int32,System.Int32)">
            <summary>
            sum part of an array
            </summary>
            <param name="array"></param>
            <param name="startindex"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Sum(System.Int64[])">
            <summary>
            gets sum of entire array
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Sum(System.Int32[])">
            <summary>
            gets sum of entire array
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.SumSquares(System.Int32[],System.Int32)">
            <summary>
            gets sum of squares for end of an array
            </summary>
            <param name="array"></param>
            <param name="barsback"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.SumSquares(System.Int32[],System.Int32,System.Int32)">
            <summary>
            get sums of squares for part of an array
            </summary>
            <param name="array"></param>
            <param name="startindex"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.SumSquares(System.Int64[],System.Int32,System.Int32)">
            <summary>
            get sums of squares for part of an array
            </summary>
            <param name="array"></param>
            <param name="startindex"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.SumSquares(System.Int32[])">
            <summary>
            gets sum of squares for entire array
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.SumSquares(System.Int64[])">
            <summary>
            gets sum of squares for entire array
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Avg(System.Decimal[])">
            <summary>
            gets mean of an array
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Avg(System.Decimal[],System.Boolean)">
            <summary>
            gets mean of an array
            </summary>
            <param name="array"></param>
            <param name="returnzeroIfempty"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Avg(System.Double[])">
            <summary>
            gets mean of an array
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Avg(System.Double[],System.Boolean)">
            <summary>
            gets mean of an array
            </summary>
            <param name="array"></param>
            <param name="returnzeroIfempty"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Add(System.Int32[],System.Int32[])">
            <summary>
            adds two arrays
            </summary>
            <param name="array1"></param>
            <param name="array2"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.AddBig(System.Int32[],System.Int32[])">
            <summary>
            adds two arrays
            </summary>
            <param name="array1"></param>
            <param name="array2"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Add(System.Decimal[],System.Decimal[])">
            <summary>
            adds two arrays
            </summary>
            <param name="array1"></param>
            <param name="array2"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Subtract(System.Int32[],System.Int32[])">
            <summary>
            subtracts 2nd array from first array
            </summary>
            <param name="array1"></param>
            <param name="array2"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Subtract(System.Int64[],System.Int64[])">
            <summary>
            subtracts 2nd array from first array
            </summary>
            <param name="array1"></param>
            <param name="array2"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Subtract(System.Decimal[],System.Decimal[])">
            <summary>
            subtracts 2nd array from first array
            </summary>
            <param name="array1"></param>
            <param name="array2"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Product(System.Int32[],System.Int32[])">
            <summary>
            multiplies two arrays
            </summary>
            <param name="array1"></param>
            <param name="array2"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.ProductBig(System.Int32[],System.Int32[])">
            <summary>
            multiplies two arrays
            </summary>
            <param name="array1"></param>
            <param name="array2"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.ProductBig(System.Int64[],System.Int64[])">
            <summary>
            multiplies two arrays
            </summary>
            <param name="array1"></param>
            <param name="array2"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Product(System.Decimal[],System.Decimal[])">
            <summary>
            multiplies two arrays
            </summary>
            <param name="array1"></param>
            <param name="array2"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Sum(System.Double[],System.Int32)">
            <summary>
            sum last elements of array
            </summary>
            <param name="array"></param>
            <param name="barsback"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Sum(System.Double[],System.Int32,System.Int32)">
            <summary>
            sum part of an array
            </summary>
            <param name="array"></param>
            <param name="startindex"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Sum(System.Double[])">
            <summary>
            gets sum of entire array
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.SumSquares(System.Double[],System.Int32)">
            <summary>
            gets sum of squares for end of an array
            </summary>
            <param name="array"></param>
            <param name="barsback"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.SumSquares(System.Double[],System.Int32,System.Int32)">
            <summary>
            get sums of squares for part of an array
            </summary>
            <param name="array"></param>
            <param name="startindex"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.SumSquares(System.Double[])">
            <summary>
            gets sum of squares for entire array
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Add(System.Double[],System.Double[])">
            <summary>
            adds two arrays
            </summary>
            <param name="array1"></param>
            <param name="array2"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Subtract(System.Double[],System.Double[])">
            <summary>
            subtracts 2nd array from first array
            </summary>
            <param name="array1"></param>
            <param name="array2"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Product(System.Double[],System.Double[])">
            <summary>
            multiplies two arrays
            </summary>
            <param name="array1"></param>
            <param name="array2"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Divide2Double(System.Int32[],System.Int32[])">
            <summary>
            divides first array by second array.  
            </summary>
            <param name="array1"></param>
            <param name="array2"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Divide2Double(System.Int64[],System.Int64[])">
            <summary>
            divides first array by second array.  
            </summary>
            <param name="array1"></param>
            <param name="array2"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Divide(System.Double[],System.Double[])">
            <summary>
            divides first array by second array.  
            </summary>
            <param name="array1"></param>
            <param name="array2"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Add(System.Int32[],System.Double)">
            <summary>
            adds a constant to an array
            </summary>
            <param name="array"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Add(System.Int64[],System.Double)">
            <summary>
            adds a constant to an array
            </summary>
            <param name="array"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Divide(System.Int32[],System.Int32[])">
            <summary>
            divides first array by second array.  
            </summary>
            <param name="array1"></param>
            <param name="array2"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Divide(System.Int64[],System.Int64[])">
            <summary>
            divides first array by second array.  
            </summary>
            <param name="array1"></param>
            <param name="array2"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Divide(System.Decimal[],System.Decimal[])">
            <summary>
            divides first array by second array.  
            </summary>
            <param name="array1"></param>
            <param name="array2"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Add(System.Int32[],System.Decimal)">
            <summary>
            adds a constant to an array
            </summary>
            <param name="array"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Add(System.Int64[],System.Decimal)">
            <summary>
            adds a constant to an array
            </summary>
            <param name="array"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Add(System.Int64[],System.Int64)">
            <summary>
            adds a constant to an array
            </summary>
            <param name="array"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Subtract(System.Int32[],System.Decimal)">
            <summary>
            subtracts constant from an array
            </summary>
            <param name="array"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Subtract(System.Int64[],System.Decimal)">
            <summary>
            subtracts constant from an array
            </summary>
            <param name="array"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Subtract(System.Int32[],System.Double)">
            <summary>
            subtracts constant from an array
            </summary>
            <param name="array"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Subtract(System.Int64[],System.Double)">
            <summary>
            subtracts constant from an array
            </summary>
            <param name="array"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Subtract(System.Int32[],System.Int32)">
            <summary>
            subtracts constant from an array
            </summary>
            <param name="array"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Subtract(System.Int64[],System.Int64)">
            <summary>
            subtracts constant from an array
            </summary>
            <param name="array"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Subtract(System.Decimal[],System.Decimal)">
            <summary>
            subtracts constant from an array
            </summary>
            <param name="array"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Product(System.Int32[],System.Double)">
            <summary>
            takes product of constant and an array
            </summary>
            <param name="array"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Product(System.Double[],System.Double)">
            <summary>
            takes product of constant and an array
            </summary>
            <param name="array"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Product(System.Int64[],System.Double)">
            <summary>
            takes product of constant and an array
            </summary>
            <param name="array"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Product(System.Int32[],System.Decimal)">
            <summary>
            takes product of constant and an array
            </summary>
            <param name="array"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Product(System.Int64[],System.Decimal)">
            <summary>
            takes product of constant and an array
            </summary>
            <param name="array"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Product(System.Int32[],System.Int32)">
            <summary>
            takes product of constant and an array
            </summary>
            <param name="array"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Product(System.Int64[],System.Int64)">
            <summary>
            takes product of constant and an array
            </summary>
            <param name="array"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Product(System.Decimal[],System.Decimal)">
            <summary>
            takes product of constant and an array
            </summary>
            <param name="array"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Divide(System.Int32[],System.Decimal)">
            <summary>
            divides array by a constant
            </summary>
            <param name="array"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.StdDev(System.Int32[])">
            <summary>
            gets standard deviation for values of a population
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.StdDev(System.Int64[])">
            <summary>
            gets standard deviation for values of a population
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.StdDevSam(System.Int32[])">
            <summary>
            gets standard deviation for values of a sample
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.StdDevSam(System.Int64[])">
            <summary>
            gets standard deviation for values of a sample
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.EndSlice(System.Double[],System.Int32)">
            <summary>
            Takes slice of last N elements of an array
            </summary>
            <param name="inputarray"></param>
            <param name="lastNumElements"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Slice(System.Double[],System.Int32)">
            <summary>
            takes slice of first N elements of array
            </summary>
            <param name="input"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Slice(System.Double[],System.Int32,System.Int32)">
            <summary>
            takes slice of any N elements of array
            </summary>
            <param name="input"></param>
            <param name="start"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.EndSlice(System.Decimal[],System.Int32)">
            <summary>
            Takes slice of last N elements of an array
            </summary>
            <param name="inputarray"></param>
            <param name="lastNumElements"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Slice(System.Int64[],System.Int32)">
            <summary>
            takes slice of first N elements of array
            </summary>
            <param name="a"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Slice(System.Int64[],System.Int32,System.Int32)">
            <summary>
            takes slice of some N elements of array
            </summary>
            <param name="a"></param>
            <param name="start"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Slice(System.Decimal[],System.Int32)">
            <summary>
            takes slice of first N elements of array
            </summary>
            <param name="input"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Slice(System.Decimal[],System.Int32,System.Int32)">
            <summary>
            takes slice of any N elements of array
            </summary>
            <param name="input"></param>
            <param name="start"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.EndSlice(System.Int32[],System.Int32)">
            <summary>
            Takes slice of last N elements of an array
            </summary>
            <param name="inputarray"></param>
            <param name="lastNumElements"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.EndSlice(System.Int64[],System.Int32)">
            <summary>
            Takes slice of last N elements of an array
            </summary>
            <param name="inputarray"></param>
            <param name="lastNumElements"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Date(System.Int32)">
            <summary>
            Returns a bardate as an array of ints in the form [year,month,day]
            </summary>
            <param name="bardate">The bardate.</param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.RateOfReturn(System.Double[],System.Double[])">
            <summary>
            calculate a percentage return based upon a given amount of money used and the absolute return for this money, for each respective securtiy in a portfolio.
            </summary>
            <param name="MoneyInUse"></param>
            <param name="AbsoluteReturn"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Max(System.Double[])">
            <summary>
            gets maximum in an array (will return MaxValue if array has no elements)
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.LL(System.Double[])">
            <summary>
            lowest low of array
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.HH(TradingLib.API.BarList,System.Int32)">
            <summary>
            Returns the highest-high of the barlist, for so many bars back.
            </summary>
            <param name="b">The barlist.</param>
            <param name="barsback">The barsback to consider.</param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.HH(System.Decimal[])">
            <summary>
            highest high of array
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.LL(System.Decimal[])">
            <summary>
            lowest low of array
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.HH(TradingLib.API.BarList)">
            <summary>
            Returns the highest high for the entire barlist.
            </summary>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.LL(TradingLib.API.BarList,System.Int32)">
            <summary>
            The lowest low for the barlist, considering so many bars back.
            </summary>
            <param name="b">The barlist.</param>
            <param name="barsback">The barsback to consider.</param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.LL(TradingLib.API.BarList)">
            <summary>
            Lowest low for the entire barlist.
            </summary>
            <param name="b">The barlist.</param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Min(System.Decimal[])">
            <summary>
            gets minum of an array (will return MinValue if array has no elements)
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Min(System.Int32[])">
            <summary>
            gets minimum of an array (will return MinValue if array has no elements)
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Min(System.Int64[])">
            <summary>
            gets minimum of an array (will return MinValue if array has no elements)
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Max(System.Decimal[])">
            <summary>
            gets maximum in an array (will return MaxValue if array has no elements)
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Max(System.Int32[])">
            <summary>
            gets maximum in an array (will return MaxValue if array has no elements)
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Max(System.Int64[])">
            <summary>
            gets maximum in an array (will return MaxValue if array has no elements)
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Highs(TradingLib.API.BarList,System.Int32)">
            <summary>
            gets most recent number of highs from a barlist
            </summary>
            <param name="chart"></param>
            <param name="bars"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Lows(TradingLib.API.BarList,System.Int32)">
            <summary>
            gets most recent lows from barlist, for certain number of bars
            (default is entire list)
            </summary>
            <param name="chart"></param>
            <param name="bars"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Lows(TradingLib.API.BarList)">
            <summary>
            gets ALL lows from barlist, at default bar interval
            </summary>
            <param name="chart"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Opens(TradingLib.API.BarList,System.Int32)">
            <summary>
            gets opening prices for most recent bars, at default bar interval
            </summary>
            <param name="chart"></param>
            <param name="bars"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Opens(TradingLib.API.BarList)">
            <summary>
            gets opening prices for ALL bars, at the default bar interval
            </summary>
            <param name="chart"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Closes(TradingLib.API.BarList,System.Int32)">
            <summary>
            gets the most recent closing prices for a certain number of bars
            </summary>
            <param name="chart"></param>
            <param name="bars"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Closes(TradingLib.API.BarList)">
            <summary>
            gets most recent closing prices for ALL bars, default bar interval
            </summary>
            <param name="chart"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Volumes(TradingLib.API.BarList,System.Int32)">
            <summary>
            gets the most recent volumes from a barlist, given a certain number of bars back
            </summary>
            <param name="chart"></param>
            <param name="bars"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Volumes(TradingLib.API.BarList)">
            <summary>
            gets volumes for ALL bars, with default bar interval
            </summary>
            <param name="chart"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.HLRange(TradingLib.API.BarList)">
            <summary>
            gets the high to low range of a barlist, for the default interval
            </summary>
            <param name="chart"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.CORange(TradingLib.API.BarList)">
            <summary>
            gets array of close to open ranges for default interval of a barlist
            </summary>
            <param name="chart"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.TrueRange(TradingLib.API.BarList)">
            <summary>
            gets an array of true range values representing each bar in chart
            (uses default bar interval)
            </summary>
            <param name="chart"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.FetchCharts(System.String[])">
            <summary>
            downloads yearly charts for a list of symbols
            (source: google finance)
            </summary>
            <param name="symbols"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.BollingerUpper(TradingLib.API.BarList)">
            <summary>
            calculates upper bollinger using default # stdev of 2.5 and opening prices.
            Note, for speed it's faster to calculate these yourself.
            </summary>
            <param name="bl"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.BollingerLower(TradingLib.API.BarList)">
            <summary>
            calculates lower bollinger using default # stdev of 2.5 and opening prices.
            Note, for speed it's faster to calculate these yourself.
            </summary>
            <param name="bl"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.BollingerLower(TradingLib.API.BarList,System.Decimal)">
            <summary>
            calculates lower bollinger using opening prices.  calculate yourself for faster speed
            </summary>
            <param name="bl"></param>
            <param name="numStdDevs"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.BollingerLower(TradingLib.API.BarList,System.Decimal,System.Boolean)">
            <summary>
            calculates lower bollinger using open (true) or closing (false) prices, at specified # of standard deviations
            </summary>
            <param name="bl"></param>
            <param name="numStdDevs"></param>
            <param name="useOpens"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.SharpeRatio(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            computes sharpe ratio for a constant rate of risk free returns, give portfolio rate of return and portfolio volatility
            </summary>
            <param name="ratereturn"></param>
            <param name="stdevRate"></param>
            <param name="riskFreeRate"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.SortinoRatio(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            computes sortinio ratio for constant rate of risk free return, give portfolio rate of return and downside volatility
            </summary>
            <param name="ratereturn"></param>
            <param name="stdevRateDownside"></param>
            <param name="riskFreeRate"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.PositionCost(TradingLib.API.Position)">
            <summary>
            computes cost of a current position without taking into account side of position
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.PositionCost(TradingLib.API.Position,System.Boolean)">
            <summary>
            computes cost of current position without taking into account side
            </summary>
            <param name="p"></param>
            <param name="absolutecost"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.MoneyInUse(TradingLib.Common.PositionTracker)">
            <summary>
            computes money used to purchase a portfolio of positions.
            uses average price for position.
            占用资金,这里的价格假设为绝对价格没有引入乘数概念和保证金比例概念
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.RateOfReturn(System.Decimal[],System.Decimal[])">
            <summary>
            calculate a percentage return based upon a given amount of money used and the absolute return for this money, for each respective securtiy in a portfolio.
            </summary>
            <param name="MoneyInUse"></param>
            <param name="AbsoluteReturn"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.AbsoluteReturn(TradingLib.Common.PositionTracker,System.Decimal[],System.Boolean,System.Boolean)">
            <summary>
            gets absolute return of portfolio of positions at closing or market prices, or both
            </summary>
            <param name="pt"></param>
            <param name="marketprices"></param>
            <param name="countClosedPL"></param>
            <param name="countOpenPL"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.AbsoluteReturn(TradingLib.Common.PositionTracker)">
            <summary>
            calculate absolute return only for closed portions of positions
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.AbsoluteReturn(TradingLib.Common.PositionTracker,TradingLib.Common.GenericTracker{System.Decimal},System.Boolean)">
            <summary>
            returns absolute return of all positions in order they are listed in position tracker
            both closed and open pl may be included
            </summary>
            <param name="pt"></param>
            <param name="marketprices"></param>
            <param name="countClosedPL"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.MaxDDVal(System.Decimal[])">
            <summary>
            calculate maximum drawdown from a PL stream for a given security/portfolio as a dollar value
            </summary>
            <param name="ret">array containing pl values for portfolio or security</param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.MaxDDPct(System.Collections.Generic.List{TradingLib.API.Trade})">
            <summary>
            maximum drawdown as a percentage
            </summary>
            <param name="fills"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Decimal2Double(System.Decimal[]@)">
            <summary>
            convert an array of decimals to less precise doubles
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Decimal2Double(System.Decimal[])">
            <summary>
            convert an array of decimals to less precise doubles
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.Decimal2Double(System.Decimal[],System.Double[]@)">
            <summary>
            convert an array of decimals to less precise doubles
            </summary>
            <param name="array"></param>
            <param name="vals"></param>
        </member>
        <member name="M:TradingLib.Common.Calc.Decimal2Double(System.Decimal[]@,System.Double[]@)">
            <summary>
            convert an array of decimals to less precise doubles
            </summary>
            <param name="array"></param>
            <param name="vals"></param>
        </member>
        <member name="M:TradingLib.Common.Calc.parray(System.Double[])">
            <summary>
            print an array
            </summary>
            <param name="prices"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.parray(System.Double[],System.Int32)">
            <summary>
            print an array
            </summary>
            <param name="prices"></param>
            <param name="back"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.parray(System.Decimal[])">
            <summary>
            print an array
            </summary>
            <param name="prices"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.parray(System.Decimal[],System.Int32)">
            <summary>
            print an array
            </summary>
            <param name="prices"></param>
            <param name="back"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.parray(System.Int32[],System.Int32)">
            <summary>
            print an array
            </summary>
            <param name="prices"></param>
            <param name="back"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.fillarray(System.Decimal,System.Int32)">
            <summary>
            fill an array with a value
            </summary>
            <param name="val"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.fillarray(System.Int32,System.Int32)">
            <summary>
            fill an array with a value
            </summary>
            <param name="val"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.SortDes(System.Collections.Generic.List{System.Decimal}@)">
            <summary>
            降序排列
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:TradingLib.Common.Calc.SortAsc(System.Collections.Generic.List{System.Decimal}@)">
            <summary>
            升序排列
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:TradingLib.Common.Calc.ObverseProfit(System.Decimal,System.Decimal)">
            <summary>
            折算利润 将利润折算成原来的percent
            </summary>
            <param name="profit"></param>
            <param name="percent"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.CalFundRequired(TradingLib.API.Symbol,System.Decimal,System.Int32)">
            <summary>
            计算某个合约的资金占用
            合约价格/合约数量/合约乘数/合约保证金比例[非杠杆类合约 保证金比例1 比如STK,OPT]
            注意这里是计算某个委托需要占用多少资金的计算
            </summary>
            <param name="o"></param>
            <param name="price"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.Calc.CalCommission(System.Decimal,TradingLib.API.Trade)">
            <summary>
            计算单笔交易手续费
            </summary>
            <param name="commissionrate"></param>
            <param name="fill"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.QrySymbolRequest.ExchID">
            <summary>
            交易所
            </summary>
        </member>
        <member name="P:TradingLib.Common.QrySymbolRequest.Symbol">
            <summary>
            合约
            </summary>
        </member>
        <member name="P:TradingLib.Common.QrySymbolRequest.Security">
            <summary>
            品种
            </summary>
        </member>
        <member name="P:TradingLib.Common.QrySymbolRequest.SecurityType">
            <summary>
            获取某种合约
            </summary>
        </member>
        <member name="P:TradingLib.Common.QryPositionRequest.Account">
            <summary>
            交易帐户
            </summary>
        </member>
        <member name="P:TradingLib.Common.QryPositionRequest.Symbol">
            <summary>
            合约
            </summary>
        </member>
        <member name="T:TradingLib.Common.QryPositionDetailRequest">
            <summary>
            持仓明细查询
            </summary>
        </member>
        <member name="T:TradingLib.Common.RspQryPositionDetailResponse">
            <summary>
            持仓明细查询回报
            </summary>
        </member>
        <member name="P:TradingLib.Common.QryMaxOrderVolRequest.Account">
            <summary>
            交易帐户
            </summary>
        </member>
        <member name="P:TradingLib.Common.QryMaxOrderVolRequest.Symbol">
            <summary>
            持仓
            </summary>
        </member>
        <member name="P:TradingLib.Common.QryMaxOrderVolRequest.Side">
            <summary>
            方向
            </summary>
        </member>
        <member name="P:TradingLib.Common.QryMaxOrderVolRequest.OffsetFlag">
            <summary>
            开平标识
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspQryMaxOrderVolResponse.Side">
            <summary>
            方向
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspQryMaxOrderVolResponse.OffsetFlag">
            <summary>
            开平标识
            </summary>
        </member>
        <member name="T:TradingLib.Common.RspQryInvestorResponse">
            <summary>
            查询投资者返回
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspQryInvestorResponse.TradingAccount">
            <summary>
            交易帐户
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspQryInvestorResponse.Email">
            <summary>
            邮件地址
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspQryInvestorResponse.Mobile">
            <summary>
            手机号码
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspQryInvestorResponse.NickName">
            <summary>
            昵称
            </summary>
        </member>
        <member name="M:TradingLib.Common.RequestTemplate`1.SrvRecvRequest(System.String,System.String,System.String)">
            <summary>
            生成请求Packet
            将前置地址,客户端ID,以及数据内容生成对应的packet
            </summary>
            <param name="frontid"></param>
            <param name="clientid"></param>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="T:TradingLib.Common.ResponseTemplate`1">
            <summary>
            逻辑数据包模板
            PacketBase 是所有数据包的父类
            这里需要确定子类和父类的构造函数的相关调用顺序
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TradingLib.Common.ResponseTemplate`1.SrvSendRspResponse(TradingLib.Common.RequestPacket)">
            <summary>
            从Requestpacket生成Responsepacket
            然后再有处理逻辑填充对应的参数
            </summary>
            <param name="requestid"></param>
            <returns></returns>
        </member>
        <member name="T:TradingLib.Common.MGRQryOrderRequest">
            <summary>
            查询历史委托请求
            </summary>
        </member>
        <member name="P:TradingLib.Common.MGRQryOrderRequest.TradingAccount">
            <summary>
            查询交易帐号
            </summary>
        </member>
        <member name="P:TradingLib.Common.MGRQryOrderRequest.Settleday">
            <summary>
            查询的结算日
            </summary>
        </member>
        <member name="T:TradingLib.Common.RspMGRQryOrderResponse">
            <summary>
            查询历史委托回报
            </summary>
        </member>
        <member name="T:TradingLib.Common.MGRQryTradeRequest">
            <summary>
            查询历史成交
            </summary>
        </member>
        <member name="P:TradingLib.Common.MGRQryTradeRequest.TradingAccount">
            <summary>
            查询交易帐号
            </summary>
        </member>
        <member name="P:TradingLib.Common.MGRQryTradeRequest.Settleday">
            <summary>
            查询的结算日
            </summary>
        </member>
        <member name="T:TradingLib.Common.RspMGRQryTradeResponse">
            <summary>
            查询历史成交回报
            </summary>
        </member>
        <member name="T:TradingLib.Common.MGRQryPositionRequest">
            <summary>
            请求查询结算持仓
            </summary>
        </member>
        <member name="P:TradingLib.Common.MGRQryPositionRequest.TradingAccount">
            <summary>
            查询交易帐号
            </summary>
        </member>
        <member name="P:TradingLib.Common.MGRQryPositionRequest.Settleday">
            <summary>
            查询的结算日
            </summary>
        </member>
        <member name="T:TradingLib.Common.RspMGRQryPositionResponse">
            <summary>
            结算持仓回报
            </summary>
        </member>
        <member name="T:TradingLib.Common.MGRQryCashRequest">
            <summary>
            出入金查询
            </summary>
        </member>
        <member name="P:TradingLib.Common.MGRQryCashRequest.TradingAccount">
            <summary>
            查询交易帐号
            </summary>
        </member>
        <member name="P:TradingLib.Common.MGRQryCashRequest.Settleday">
            <summary>
            查询的结算日
            </summary>
        </member>
        <member name="T:TradingLib.Common.RspMGRQryCashResponse">
            <summary>
            出入金查询回报
            </summary>
        </member>
        <member name="T:TradingLib.Common.MGRQrySettleRequest">
            <summary>
            查询结算单请求
            </summary>
        </member>
        <member name="P:TradingLib.Common.MGRQrySettleRequest.TradingAccount">
            <summary>
            查询交易帐号
            </summary>
        </member>
        <member name="P:TradingLib.Common.MGRQrySettleRequest.Settleday">
            <summary>
            查询的结算日
            </summary>
        </member>
        <member name="T:TradingLib.Common.RspMGRQrySettleResponse">
            <summary>
            查询结算单回报
            </summary>
        </member>
        <member name="M:TradingLib.Common.SymbolUtils.FormatPrice(TradingLib.API.Symbol,System.Decimal)">
            <summary>
            按照某个合约的PriceTick显示对应的价格
            </summary>
            <param name="symbol"></param>
            <param name="price"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.SymbolUtils.GetMonth(TradingLib.API.Symbol)">
            <summary>
            获得合约月份
            </summary>
            <param name="sym"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.SymbolUtils.IsExpiredToday(TradingLib.API.Symbol)">
            <summary>
            当日到期
            </summary>
            <returns></returns>
        </member>
        <member name="T:TradingLib.Common.OrderSplitTracker">
            <summary>
            委托分拆管理器
            用于将某个委托分拆成多个委托然后对外处理
            输入侧，操作父委托，系统按照分解逻辑分解后，将委托分解成子委托，然后输出子委托的操作
            当有子委托回报时,调用子委托回报输入,对外输出父委托回报
            该组件实现了将某个委托按一定逻辑分拆后下发到子委托操作端
            然后从子委托操作端获得回报处理后，再处理成父委托回报对外输出
            
            父委托编号->父委托
            父委托编号->子委托列表
            子委托编号->父委托
            </summary>
        </member>
        <member name="M:TradingLib.Common.OrderSplitTracker.SonID2FatherOrder(System.Int64)">
            <summary>
            通过子委托ID找到对应的父委托
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.OrderSplitTracker.SentSonOrder(System.Int64)">
            <summary>
            获得通过该分解器发送的某个子委托
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:TradingLib.Common.OrderSplitTracker.Clear">
            <summary>
            清空内存状态
            </summary>
        </member>
        <member name="M:TradingLib.Common.OrderSplitTracker.ResumeOrder(TradingLib.Common.FatherSonOrderPair)">
            <summary>
            恢复父子委托关系
            </summary>
            <param name="father"></param>
            <param name="sonOrders"></param>
        </member>
        <member name="M:TradingLib.Common.OrderSplitTracker.SendFatherOrder(TradingLib.API.Order,System.Collections.Generic.List{TradingLib.API.Order})">
            <summary>
            发送父委托
            </summary>
            <param name="fathOrder"></param>
        </member>
        <member name="M:TradingLib.Common.OrderSplitTracker.CancelFatherOrder(System.Int64)">
            <summary>
            取消父委托
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:TradingLib.Common.OrderSplitTracker.GotSonOrder(TradingLib.API.Order)">
            <summary>
            获得子委托回报
            注本地维护了子委托内存数据
            同时该委托是其余组件进行分拆了
            BrokerSplit分拆委托后将委托提供给委托分拆器
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:TradingLib.Common.OrderSplitTracker.GotSonFill(TradingLib.API.Trade)">
            <summary>
            获得子委托成交回报
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:TradingLib.Common.OrderSplitTracker.GotSonOrderError(TradingLib.API.Order,TradingLib.API.RspInfo)">
            <summary>
            获得子委托错误回报
            </summary>
            <param name="o"></param>
            <param name="error"></param>
        </member>
        <member name="M:TradingLib.Common.OrderSplitTracker.GotSonOrderActionError(TradingLib.API.OrderAction,TradingLib.API.RspInfo)">
            <summary>
            获得子委托操作错误回报
            </summary>
            <param name="a"></param>
            <param name="error"></param>
        </member>
        <member name="E:TradingLib.Common.OrderSplitTracker.SendSonOrderEvent">
            <summary>
            发送子委托
            </summary>
        </member>
        <member name="E:TradingLib.Common.OrderSplitTracker.CancelSonOrderEvent">
            <summary>
            取消子委托
            </summary>
        </member>
        <member name="E:TradingLib.Common.OrderSplitTracker.GotFatherOrderEvent">
            <summary>
            获得父委托回报
            </summary>
        </member>
        <member name="E:TradingLib.Common.OrderSplitTracker.GotFatherFillEvent">
            <summary>
            获得父成交回报
            </summary>
        </member>
        <member name="E:TradingLib.Common.OrderSplitTracker.GotFatherCancelEvent">
            <summary>
            获得父委取消
            </summary>
        </member>
        <member name="E:TradingLib.Common.OrderSplitTracker.GotFatherOrderErrorEvent">
            <summary>
            获得父委托错误回报
            </summary>
        </member>
        <member name="E:TradingLib.Common.OrderSplitTracker.SplitOrdereEvent">
            <summary>
            分解委托
            </summary>
        </member>
        <member name="T:TradingLib.Common.SymbolImpl">
            <summary>
            合约实现
            </summary>
        </member>
        <member name="P:TradingLib.Common.SymbolImpl.ID">
            <summary>
            数据库序号
            </summary>
        </member>
        <member name="P:TradingLib.Common.SymbolImpl.Symbol">
            <summary>
            合约代码
            </summary>
        </member>
        <member name="P:TradingLib.Common.SymbolImpl.SecurityFamily">
            <summary>
            该合约属于哪个品种
            </summary>
        </member>
        <member name="P:TradingLib.Common.SymbolImpl.ULSymbol">
            <summary>
            异化合约的底层合约对象
            </summary>
        </member>
        <member name="P:TradingLib.Common.SymbolImpl.UnderlayingSymbol">
            <summary>
            底层合约 常规合约中 期权合约的底层标的
            </summary>
        </member>
        <member name="P:TradingLib.Common.SymbolImpl.EntryCommission">
            <summary>
            开仓手续费
            </summary>
        </member>
        <member name="P:TradingLib.Common.SymbolImpl.ExitCommission">
            <summary>
            平仓手续费
            </summary>
        </member>
        <member name="P:TradingLib.Common.SymbolImpl.Margin">
            <summary>
            保证金比例
            如果设定了保证金比例则取品种定义的保证金
            如果品种的保证金没有定义则默认返回1,交易为全额保证金
            异化合约直接设置合约的保证金信息
            </summary> 
        </member>
        <member name="P:TradingLib.Common.SymbolImpl.ExtraMargin">
            <summary>
            额外保证金字段
            用于在基本保证金外提供额外质押
            </summary>
        </member>
        <member name="P:TradingLib.Common.SymbolImpl.MaintanceMargin">
            <summary>
            过夜保证金,如果需要过夜则需要提供Maintance保证金
            </summary>
        </member>
        <member name="P:TradingLib.Common.SymbolImpl.OptionSide">
            <summary>
            期权 方向
            </summary>
        </member>
        <member name="P:TradingLib.Common.SymbolImpl.Strike">
            <summary>
            期权中的行权价
            </summary>
        </member>
        <member name="P:TradingLib.Common.SymbolImpl.ExpireDate">
            <summary>
            到期日,比如期货合约的交割日,期权合约的行权日
            </summary>
        </member>
        <member name="P:TradingLib.Common.SymbolImpl.Multiple">
            <summary>
            获得合约乘数
            异化合约乘数为底层合约乘数
            </summary>
        </member>
        <member name="P:TradingLib.Common.SymbolImpl.TickSymbol">
            <summary>
            底层行情合约
            用于异化证券的合约转换
            </summary>
        </member>
        <member name="P:TradingLib.Common.SymbolImpl.Tradeable">
            <summary>
            是否可交易 设置中设定的可交易标识
            </summary>
        </member>
        <member name="P:TradingLib.Common.SymbolImpl.IsMarketTime">
            <summary>
            检查合约是否是开市时间
            </summary>
        </member>
        <member name="P:TradingLib.Common.SymbolImpl.IsFlatTime">
            <summary>
            是否处于强平时间
            </summary>
        </member>
        <member name="P:TradingLib.Common.SymbolImpl.IsValid">
            <summary>
            该合约是否有效 如果没有底层证券品种信息则该合约无效
            </summary>
        </member>
        <member name="P:TradingLib.Common.SymbolImpl.IsExpired">
            <summary>
            判断该合约是否过期
            </summary>
        </member>
        <member name="P:TradingLib.Common.SymbolImpl.IsTradeable">
            <summary>
            是否可以进行交易 这里需要加入更多完备性检查
            </summary>
        </member>
        <member name="T:TradingLib.Common.PositionEx">
            <summary>
            PostionEx用于封装持仓汇总信息
            将Position工作对象的持仓状态 封装成PositionEx用于接收客户端的查询
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionEx.Tradingday">
            <summary>
            交易日
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionEx.Account">
            <summary>
            帐户
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionEx.Symbol">
            <summary>
            合约
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionEx.Multiple">
            <summary>
            乘数
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionEx.AvgPrice">
            <summary>
            持仓均价 点数
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionEx.Side">
            <summary>
            持仓方向
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionEx.DirectionType">
            <summary>
            持仓描述类型
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionEx.OpenVolume">
            <summary>
            开仓量 
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionEx.OpenAmount">
            <summary>
            开仓金额 SUM（今日开仓数量 * 开仓价 * 合约乘数)
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionEx.CloseVolume">
            <summary>
            平仓量
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionEx.CloseAmount">
            <summary>
            平仓金额 SUM（平仓数量 * 平仓价 * 合约乘数）
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionEx.ClosePL">
            <summary>
            平仓盈亏点数
            
            每次有平仓明细产生时，会累加平仓盈亏点数和对应的金额
            平仓明细中的平仓盈亏计算 1.今仓 开仓价- 平价价  2.昨仓 平仓价 - 昨结价
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionEx.CloseProfit">
            <summary>
            当日平仓盈亏金额
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionEx.UnRealizedPL">
            <summary>
            当日浮动盈亏点数
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionEx.UnRealizedProfit">
            <summary>
            浮动盈亏金额/持仓盈亏
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionEx.PositionCost">
            <summary>
            持仓成本
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionEx.OpenCost">
            <summary>
            开仓成本
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionEx.TodayPosition">
            <summary>
            今仓数量 
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionEx.YdPosition">
            <summary>
            昨仓数量
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionEx.Position">
            <summary>
            持仓数量
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionEx.LastSettlementPrice">
            <summary>
            昨日结算价
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionEx.SettlementPrice">
            <summary>
            结算价
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionEx.CloseProfitByDate">
            <summary>
            盯市平仓盈亏
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionEx.CloseProfitByTrade">
            <summary>
            逐笔平仓盈亏
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionEx.Margin">
            <summary>
            保证金
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionEx.Commission">
            <summary>
            手续费
            </summary>
        </member>
        <member name="M:TradingLib.Common.OrderTrackerUtils.GetPendingEntrySize(TradingLib.Common.OrderTracker,System.String,System.Boolean)">
            <summary>
            OrderTracker的扩展方法
            获得某个持仓方向的开仓委托数量
            </summary>
            <param name="positionside"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.OrderTrackerUtils.GetPendingExitSize(TradingLib.Common.OrderTracker,System.String,System.Boolean)">
            <summary>
            获得某个持仓方向的平仓委托数量
            </summary>
            <param name="tracker"></param>
            <param name="positionside"></param>
            <returns></returns>
        </member>
        <member name="T:TradingLib.Common.AsyncResponse">
            <summary>
            用于异步执行tick处理,主线程直接将Tick放入ringbuffer中,然后在单独的线程中去处理Tick
            </summary>
        </member>
        <member name="M:TradingLib.Common.AsyncResponse.newTick(TradingLib.API.Tick)">
            <summary>
            当有行情到达时调用该函数,将行情tick放入Ringbuffer中,用于后台线程异步处理
            </summary>
            <param name="k"></param>
        </member>
        <member name="M:TradingLib.Common.AsyncResponse.#ctor(System.String)">
            <summary>
            create an asynchronous responder
            </summary>
        </member>
        <member name="M:TradingLib.Common.AsyncResponse.#ctor(System.String,System.Int32)">
            <summary>
            creates asynchronous responder with specified buffer sizes
            </summary>
            <param name="maxticks"></param>
        </member>
        <member name="M:TradingLib.Common.AsyncResponse.Stop">
            <summary>
            stop the read threads and shutdown (call on exit)
            </summary>
        </member>
        <member name="E:TradingLib.Common.AsyncResponse.GotTick">
            <summary>
            当从缓存中异步读取一个tick时触发
            </summary>
        </member>
        <member name="E:TradingLib.Common.AsyncResponse.GotTickQueueEmpty">
            <summary>
             当缓存内没有数据时触发
            </summary>
        </member>
        <member name="E:TradingLib.Common.AsyncResponse.GotTickQueued">
            <summary>
            当有新的Tick数据写入缓存时触发
            </summary>
        </member>
        <member name="P:TradingLib.Common.AsyncResponse.TickOverrun">
            <summary>
            当缓存太小,Tick数据溢出时触发
            </summary>
        </member>
        <member name="P:TradingLib.Common.AsyncResponse.isValid">
            <summary>
            是否处于有效工作状态
            </summary>
        </member>
        <member name="P:TradingLib.Common.AsyncResponse.SLEEP">
            <summary>
            每隔多少时间检查tick buffer中是否有新的行情数据
            </summary>
        </member>
        <member name="E:TradingLib.Common.AsyncResponse.GotBadTick">
            <summary>
            当有异常tick读取时 触发
            </summary>
        </member>
        <member name="E:TradingLib.Common.AsyncResponse.GotTickOverrun">
            <summary>
            当缓存大小太小时候触发
            </summary>
        </member>
        <member name="P:TradingLib.Common.AsyncResponse.BadTickWritten">
            <summary>
            # of null ticks ignored at write
            </summary>
        </member>
        <member name="P:TradingLib.Common.AsyncResponse.BadTickRead">
            <summary>
            # of null ticks ignored at read
            </summary>
        </member>
        <member name="T:TradingLib.Common.AccountLite">
            <summary>
            基础交易帐户信息
            用于传递交易帐户
            </summary>
        </member>
        <member name="P:TradingLib.Common.AccountLite.Account">
            <summary>
            交易帐号
            </summary>
        </member>
        <member name="P:TradingLib.Common.AccountLite.Category">
            <summary>
            交易帐户类别
            </summary>
        </member>
        <member name="P:TradingLib.Common.AccountLite.OrderRouteType">
            <summary>
            委托路由类别
            </summary>
        </member>
        <member name="P:TradingLib.Common.AccountLite.Execute">
            <summary>
            当前交易状态
            </summary>
        </member>
        <member name="P:TradingLib.Common.AccountLite.IntraDay">
            <summary>
            日内交易
            </summary>
        </member>
        <member name="P:TradingLib.Common.AccountLite.LastEquity">
            <summary>
            上期权益
            </summary>
        </member>
        <member name="P:TradingLib.Common.AccountLite.NowEquity">
            <summary>
            当前权益
            </summary>
        </member>
        <member name="P:TradingLib.Common.AccountLite.Credit">
            <summary>
            信用额度
            通过配资服务放出的信用额度
            </summary>
        </member>
        <member name="P:TradingLib.Common.AccountLite.RealizedPL">
            <summary>
            平仓利润
            </summary>
        </member>
        <member name="P:TradingLib.Common.AccountLite.UnRealizedPL">
            <summary>
            未平仓利润
            </summary>
        </member>
        <member name="P:TradingLib.Common.AccountLite.Commission">
            <summary>
            手续费
            </summary>
        </member>
        <member name="P:TradingLib.Common.AccountLite.Profit">
            <summary>
            净利
            </summary>
        </member>
        <member name="P:TradingLib.Common.AccountLite.CashIn">
            <summary>
            入金
            </summary>
        </member>
        <member name="P:TradingLib.Common.AccountLite.CashOut">
            <summary>
            出金
            </summary>
        </member>
        <member name="P:TradingLib.Common.AccountLite.MoneyUsed">
            <summary>
            总占用资金 = 个品种占用资金之和
            </summary>
        </member>
        <member name="P:TradingLib.Common.AccountLite.Name">
            <summary>
            帐户标识
            </summary>
        </member>
        <member name="P:TradingLib.Common.AccountLite.Broker">
            <summary>
            交易帐号
            </summary>
        </member>
        <member name="P:TradingLib.Common.AccountLite.BankID">
            <summary>
            银行
            </summary>
        </member>
        <member name="P:TradingLib.Common.AccountLite.BankAC">
            <summary>
            银行帐号
            </summary>
        </member>
        <member name="P:TradingLib.Common.AccountLite.PosLock">
            <summary>
            锁仓权限
            </summary>
        </member>
        <member name="P:TradingLib.Common.AccountLite.SideMargin">
            <summary>
            单向大边
            </summary>
        </member>
        <member name="P:TradingLib.Common.AccountLite.CreditSeparate">
            <summary>
            信用额度分开显示
            </summary>
        </member>
        <member name="P:TradingLib.Common.AccountLite.MGRID">
            <summary>
            帐户所属管理员全局ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.AccountLite.Deleted">
            <summary>
            是否已经删除
            </summary>
        </member>
        <member name="P:TradingLib.Common.AccountLite.RG_ID">
            <summary>
            路由组
            </summary>
        </member>
        <member name="P:TradingLib.Common.AccountLite.Commissin_ID">
            <summary>
            手续费模板ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.AccountLite.Margin_ID">
            <summary>
            保证金模板ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.AccountLite.IsLogin">
            <summary>
            是否处于登入状态
            </summary>
        </member>
        <member name="P:TradingLib.Common.AccountLite.IPAddress">
            <summary>
            登入地址
            </summary>
        </member>
        <member name="P:TradingLib.Common.MGRAddAccountRequest.Category">
            <summary>
            添加帐户类别
            </summary>
        </member>
        <member name="P:TradingLib.Common.MGRAddAccountRequest.AccountID">
            <summary>
            交易帐号
            </summary>
        </member>
        <member name="P:TradingLib.Common.MGRAddAccountRequest.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:TradingLib.Common.MGRAddAccountRequest.UserID">
            <summary>
            绑定的用户UserID
            </summary>
        </member>
        <member name="P:TradingLib.Common.MGRAddAccountRequest.MgrID">
            <summary>
            代理商ID
            用于指明该交易帐户属于哪个Manager域
            每个Manager可以开始多个管理帐户，是以Root或Agent标识的管理来跟踪ID
            </summary>
        </member>
        <member name="P:TradingLib.Common.MGRAddAccountRequest.RouterGroup_ID">
            <summary>
            路由组，路由组用与实盘帐户交易时 进行成交路由选择
            </summary>
        </member>
        <member name="T:TradingLib.Common.MGRReqDelAccountRequest">
            <summary>
            删除交易帐户请求
            </summary>
        </member>
        <member name="T:TradingLib.Common.PositionAdjust">
            <summary>
            持仓调整对象
            用于调整持仓状态
            表明在某个持仓对象上 按什么价格 买入或者卖 出多少数量的价格
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionAdjust.ClosedPL">
            <summary>
            平仓盈亏
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionAdjust.Account">
            <summary>
            交易帐号
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionAdjust.Symbol">
            <summary>
            合约
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionAdjust.oSymbol">
            <summary>
            合约对象
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionAdjust.xSize">
            <summary>
            数量
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionAdjust.xPrice">
            <summary>
            价格
            </summary>
        </member>
        <member name="P:TradingLib.Common.PositionAdjust.IsValid">
            <summary>
            持仓调整是否有效
            </summary>
        </member>
        <member name="T:TradingLib.Common.QryTransferSerialRequest">
            <summary>
            查询出入金
            </summary>
        </member>
        <member name="P:TradingLib.Common.QryTransferSerialRequest.TradingAccount">
            <summary>
            交易帐号
            </summary>
        </member>
        <member name="P:TradingLib.Common.QryTransferSerialRequest.BankID">
            <summary>
            对应银行的流水号
            </summary>
        </member>
        <member name="T:TradingLib.Common.RspQryTransferSerialResponse">
            <summary>
            查询出入金回报
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspQryTransferSerialResponse.Date">
            <summary>
            时间
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspQryTransferSerialResponse.Time">
            <summary>
            日期
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspQryTransferSerialResponse.TradingAccount">
            <summary>
            交易帐号
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspQryTransferSerialResponse.Amount">
            <summary>
            金额
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspQryTransferSerialResponse.BankAccount">
            <summary>
            交易对端银行帐号
            </summary>
        </member>
        <member name="P:TradingLib.Common.RspQryTransferSerialResponse.TransRef">
            <summary>
            交易流水备注
            </summary>
        </member>
        <member name="M:TradingLib.Common.XMLRspInfoTracker.LoadXMLRspInfo">
            <summary>
            加载xml rspinfo
            </summary>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.XMLRspInfoTracker.Item(System.Int32)">
            <summary>
            通过code获得对应的消息对象
            如果消息对象不存在则返回默认的错误消息
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.XMLRspInfoTracker.Item(System.String)">
            <summary>
            通过key获得对应的消息对象
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:TradingLib.Common.HighTracker">
            <summary>
            track highs
            </summary>
        </member>
        <member name="M:TradingLib.Common.HighTracker.#ctor(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="estSymbols"></param>
            <param name="name"></param>
        </member>
        <member name="M:TradingLib.Common.HighTracker.newTick(TradingLib.API.Tick)">
            <summary>
            set high/low from tick, return true if new high or low was reached
            </summary>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.HighTracker.newTick(TradingLib.API.Tick,System.Int32)">
            <summary>
            sets high/low from tick, given an index
            </summary>
            <param name="k"></param>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.HighTracker.newPoint(System.String,System.Decimal)">
            <summary>
            set low from a point
            </summary>
            <param name="p"></param>
            <param name="sym"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.HighTracker.newPoint(System.Int32,System.Decimal)">
            <summary>
            set high low for a point given an index
            </summary>
            <param name="idx"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="T:TradingLib.Common.LowTracker">
            <summary>
            track lows
            </summary>
        </member>
        <member name="M:TradingLib.Common.LowTracker.newTick(TradingLib.API.Tick)">
            <summary>
            set high/low from tick, return true if new high or low was reached
            </summary>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.LowTracker.newTick(TradingLib.API.Tick,System.Int32)">
            <summary>
            sets high/low from tick, given an index
            </summary>
            <param name="k"></param>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.LowTracker.newPoint(System.String,System.Decimal)">
            <summary>
            set low from a point
            </summary>
            <param name="p"></param>
            <param name="sym"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.LowTracker.newPoint(System.Int32,System.Decimal)">
            <summary>
            set high low for a point given an index
            </summary>
            <param name="idx"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.LowTracker.#ctor(System.Int32,System.String)">
            <summary>
            tracks highs and lows
            </summary>
        </member>
        <member name="P:TradingLib.Protocol.LoginInfo.LoginID">
            <summary>
            登入ID
            </summary>
        </member>
        <member name="P:TradingLib.Protocol.LoginInfo.Pass">
            <summary>
            密码
            </summary>
        </member>
        <member name="T:TradingLib.Common.RuleItem">
            <summary>
            储存与数据库中的一条风控规则
            包含了帐户,风控类别,规则类名,比较方法，参考值，应用品种范围，是否启用等参数
            </summary>
        </member>
        <member name="M:TradingLib.Common.RuleItem.IRule2RuleItem(TradingLib.API.IRule)">
            <summary>
            从一条规则IRule生成对应的RuleItem
            </summary>
            <param name="rule"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.RuleItem.ID">
            <summary>
            数据库全局编号
            </summary>
        </member>
        <member name="P:TradingLib.Common.RuleItem.Account">
            <summary>
            交易帐号
            </summary>
        </member>
        <member name="P:TradingLib.Common.RuleItem.RuleName">
            <summary>
            风控规则名称
            </summary>
        </member>
        <member name="P:TradingLib.Common.RuleItem.Compare">
            <summary>
            风控比较逻辑
            </summary>
        </member>
        <member name="P:TradingLib.Common.RuleItem.Value">
            <summary>
            风控参考值
            </summary>
        </member>
        <member name="P:TradingLib.Common.RuleItem.SymbolSet">
            <summary>
            品种集合
            </summary>
        </member>
        <member name="P:TradingLib.Common.RuleItem.Enable">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="P:TradingLib.Common.RuleItem.RuleType">
            <summary>
            风控规则类别
            </summary>
        </member>
        <member name="P:TradingLib.Common.RuleItem.RuleDescription">
            <summary>
            规则描述
            </summary>
        </member>
        <member name="T:TradingLib.Common.HeartBeat">
            <summary>
            客户端向服务端发送的心跳
            </summary>
        </member>
        <member name="T:TradingLib.Common.HeartBeatRequest">
            <summary>
            客户端请求服务端返回心跳回报
            </summary>
        </member>
        <member name="T:TradingLib.Common.HeartBeatResponse">
            <summary>
            客户端心跳请求的服务端对应的回报
            </summary>
        </member>
        <member name="M:TradingLib.Common.PositionMetricHelper.GenPositionAdjustmentResult(TradingLib.API.PositionMetric,TradingLib.API.Order)">
            <summary>
            返回净持仓开仓操作结果
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.MarginTemplateItem.GetItemKey">
            <summary>
            获得该手续费项目的键值
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.MarginTemplateItem.CalMargin(TradingLib.API.Position,System.Decimal)">
            <summary>
            计算某个持仓的保证金
            price 按该价格计算保证金
            开仓价，最新价 等多种计算方式
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.MarginTemplateItem.CalMarginFrozen(TradingLib.API.Order,System.Decimal)">
            <summary>
            计算某个委托冻结保证金
            </summary>
            <param name="o"></param>
            <param name="price"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.VendorSetting.ID">
            <summary>
            数据库编号
            </summary>
        </member>
        <member name="P:TradingLib.Common.VendorSetting.Name">
            <summary>
            帐户姓名
            </summary>
        </member>
        <member name="P:TradingLib.Common.VendorSetting.FutCompany">
            <summary>
            期货公司
            </summary>
        </member>
        <member name="P:TradingLib.Common.VendorSetting.Description">
            <summary>
            描述信息
            </summary>
        </member>
        <member name="P:TradingLib.Common.VendorSetting.LastEquity">
            <summary>
            上次结算权益
            </summary>
        </member>
        <member name="P:TradingLib.Common.VendorSetting.MarginLimit">
            <summary>
            保证金限制
            可以设定百分比或绝对金额
            </summary>
        </member>
        <member name="P:TradingLib.Common.VendorSetting.BrokerToken">
            <summary>
            通道标识，在绑定Broker时设定
            解绑时置空
            </summary>
        </member>
        <member name="P:TradingLib.Common.VendorSetting.domain_id">
            <summary>
            域ID
            </summary>
        </member>
        <member name="T:TradingLib.Common.VendorImpl">
            <summary>
            实盘帐户对象
            </summary>
        </member>
        <member name="M:TradingLib.Common.VendorImpl.BindBroker(TradingLib.API.IBroker)">
            <summary>
            Broker加载时 绑定该Broker的通道设置
            </summary>
            <param name="broker"></param>
        </member>
        <member name="M:TradingLib.Common.VendorImpl.UnBindBroker">
            <summary>
            解绑通道
            </summary>
        </member>
        <member name="P:TradingLib.Common.VendorImpl.Broker">
            <summary>
            该实盘帐户对应的Broker对象 Broker对象用于业务操作 比如下单，撤单等
            实盘帐户对象维护了逻辑部分的数据比如资金,是否可用等。Broker只是底层的业务对象
            </summary>
        </member>
        <member name="P:TradingLib.Common.VendorImpl.Domain">
            <summary>
            所属域
            </summary>
        </member>
        <member name="T:TradingLib.Common.LimitOrder">
            <summary>
            Create limit orders.
            </summary>
        </member>
        <member name="T:TradingLib.Common.BuyLimit">
            <summary>
            Create buy limit orders.
            </summary>
        </member>
        <member name="T:TradingLib.Common.SellLimit">
            <summary>
            Create sell-limit orders.
            </summary>
        </member>
        <member name="T:TradingLib.Common.BuyOPG">
            <summary>
            Create a buy OPG order
            </summary>
        </member>
        <member name="P:TradingLib.Common.MktTime.StartDiff">
            <summary>
            距离该时间段开始还有多少秒
            </summary>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.MktTime.StartTime">
            <summary>
            开始时间
            </summary>
        </member>
        <member name="P:TradingLib.Common.MktTime.EndTime">
            <summary>
            结束时间
            </summary>
        </member>
        <member name="T:TradingLib.Common.MktTimeEntry">
            <summary>
            时段
            </summary>
        </member>
        <member name="M:TradingLib.Common.MktTimeEntry.IsFlatTime">
            <summary>
            检查是否处于强平状态
            </summary>
        </member>
        <member name="M:TradingLib.Common.MktTimeEntry.IsOpenTime">
            <summary>
            判断当前时间是否在时间段内
            </summary>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.MktTimeEntry.FlatStartTime">
            <summary>
            开始强平时间
            </summary>
        </member>
        <member name="P:TradingLib.Common.MktTimeEntry.NeedFlat">
            <summary>
            是否是强平时间点
            关于强平时间点与尾盘时间点的逻辑分析
            需要强平那么就需要强平时间点禁止开仓,否则强平后还会出现开仓
            </summary>
        </member>
        <member name="T:TradingLib.Common.MarketTime">
            <summary>
            交易所交易时段
            </summary>
        </member>
        <member name="M:TradingLib.Common.MarketTime.SerializeMktTimeString">
            <summary>
            将时间段设置序列化成字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.MarketTime.DeserializeMktTimeString(System.String)">
            <summary>
            反序列化到字市场开市时间对象
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.MarketTime.ID">
            <summary>
            数据库全局编号
            </summary>
        </member>
        <member name="P:TradingLib.Common.MarketTime.Name">
            <summary>
            时间段名称
            </summary>
        </member>
        <member name="P:TradingLib.Common.MarketTime.Description">
            <summary>
            时间段描述
            </summary>
        </member>
        <member name="P:TradingLib.Common.MarketTime.IsOpenTime">
            <summary>
            是否是开市时,检查所有的session配对,当前是否是有效交易时间
            </summary>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.MarketTime.IsFlatTime">
            <summary>
            是否是强平时间段
            </summary>
        </member>
        <member name="M:TradingLib.Common.Exchange.#ctor(System.String,System.String,TradingLib.API.Country,System.String)">
            <summary>
            初始化交易所 编码,名称,国家,时段字符(从xml文件获取)
            </summary>
            <param name="ex"></param>
            <param name="name"></param>
            <param name="country"></param>
            <param name="sessionstr"></param>
        </member>
        <member name="P:TradingLib.Common.Exchange.Index">
            <summary>
            交易所编号 国家_交易所代号
            </summary>
        </member>
        <member name="T:TradingLib.Common.ThreadSafeList`1">
            <summary>
            A thread-safe IList implementation using the custom SafeEnumerator class
            See: http://www.codeproject.com/KB/cs/safe_enumerable.aspx
            </summary>
        </member>
        <member name="M:TradingLib.Common.ThreadSafeList`1.Add(`0)">
            <remarks>
            To be actually thread-safe, our collection must be locked on all other operations
            </remarks>
        </member>
        <member name="T:TradingLib.Common.VolIntervalData">
            <summary>
            通过成交量来形成对应的bar
            这里的tick/time/vol是对应的Freqency引擎 用于驱动bar数据的形成
            </summary>
        </member>
        <member name="T:TradingLib.Common.AccountInfo">
            <summary>
            账户信息对象
            
            test
            </summary>
        </member>
        <member name="M:TradingLib.Common.AccountInfo.Serialize(TradingLib.Common.AccountInfo)">
            <summary>
            将IAccountInfo 序列化成字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingLib.Common.AccountInfo.Deserialize(System.String)">
            <summary>
            反序列化字符串生成AccountInfo对象
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.Common.AccountInfo.Margin">
            <summary>
            保证金占用
            </summary>
        </member>
        <member name="P:TradingLib.Common.AccountInfo.MarginFrozen">
            <summary>
            保证金冻结
            </summary>
        </member>
        <member name="P:TradingLib.Common.SystemStatus.LastSettleday">
            <summary>
            上个结算日
            </summary>
        </member>
        <member name="P:TradingLib.Common.SystemStatus.CurrentTradingday">
            <summary>
            当前交易日
            </summary>
        </member>
        <member name="P:TradingLib.Common.SystemStatus.NextTradingday">
            <summary>
            按结算日计算的下个交易日
            </summary>
        </member>
        <member name="P:TradingLib.Common.SystemStatus.IsTradingday">
            <summary>
            当前是否是交易
            </summary>
        </member>
        <member name="P:TradingLib.Common.SystemStatus.IsSettleNormal">
            <summary>
            结算系统是否正常
            </summary>
        </member>
        <member name="P:TradingLib.Common.SystemStatus.IsClearCentreOpen">
            <summary>
            清算中心是否开启
            </summary>
        </member>
        <member name="P:TradingLib.Common.SystemStatus.TotalAccountNum">
            <summary>
            账户总数
            </summary>
        </member>
        <member name="P:TradingLib.Common.SystemStatus.MarketOpenCheck">
            <summary>
            是否检查开市时间
            </summary>
        </member>
        <member name="P:TradingLib.Common.SystemStatus.IsDevMode">
            <summary>
            是否运行在开发模式
            </summary>
        </member>
        <member name="T:TradingLib.Common.OrderActionRequest">
            <summary>
            委托操作请求
            </summary>
        </member>
        <member name="T:TradingLib.Common.OrderInsertRequest">
            <summary>
            委托插入请求
            </summary>
        </member>
        <member name="T:TradingLib.Common.TickNotify">
            <summary>
            行情 Response的统一封装 行情不需要Serialize,Deserizlize通过直接赋值进行
            </summary>
        </member>
        <member name="T:TradingLib.Common.OrderNotify">
            <summary>
            委托回报通知
            </summary>
        </member>
        <member name="T:TradingLib.Common.ErrorOrderNotify">
            <summary>
            委托插入错误回报通知
            </summary>
        </member>
        <member name="T:TradingLib.Common.TradeNotify">
            <summary>
            成交回报通知
            </summary>
        </member>
        <member name="T:TradingLib.Common.OrderActionNotify">
            <summary>
            委托操作回报通知
            </summary>
        </member>
        <member name="T:TradingLib.Common.ErrorOrderActionNotify">
            <summary>
            委托操作错误回报通知
            </summary>
        </member>
        <member name="T:TradingLib.Common.PositionNotify">
            <summary>
            持仓更新通知中采用的是accountposition用于加入更多的持仓数据
            
            </summary>
        </member>
        <member name="T:TradingLib.Common.HoldPositionNotify">
            <summary>
            隔夜持仓明细通知
            客户端如果通过交易数据累加获得当前数据则需要从隔夜持仓上叠加当日委托与成交来获得当前最新的交易状态
            隔夜持仓通知 主要用于管理端恢复日内交易状态
            </summary>
        </member>
    </members>
</doc>

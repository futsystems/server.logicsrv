<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TLBrokerXAPI</name>
    </assembly>
    <members>
        <member name="M:TradingLib.BrokerXAPI.TLBrokerBase.SetBrokerConfig(TradingLib.Common.ConnectorConfig)">
            <summary>
            设定接口参数
            </summary>
            <param name="cfg"></param>
        </member>
        <member name="M:TradingLib.BrokerXAPI.TLBrokerBase.ParseConfigInfo">
            <summary>
            启动时每次从_cfg生成启动所需参数，这样修改参数后重启就可以生效，避免多次调用SetBrokerconfig
            cfg是通过引用来传递的，因此可以实时修改
            </summary>
        </member>
        <member name="M:TradingLib.BrokerXAPI.TLBrokerBase.debug(System.String,TradingLib.API.QSEnumDebugLevel)">
            <summary>
            判断日志级别 然后再进行输出
            同时对外输出日志事件,用于被日志模块采集日志或分发
            </summary>
            <param name="msg"></param>
            <param name="level"></param>
        </member>
        <member name="E:TradingLib.BrokerXAPI.TLBrokerBase.Connected">
            <summary>
            当数据服务器登入成功后调用
            </summary>
        </member>
        <member name="E:TradingLib.BrokerXAPI.TLBrokerBase.Disconnected">
            <summary>
            当数据服务器断开后触发事件
            </summary>
        </member>
        <member name="E:TradingLib.BrokerXAPI.TLBrokerBase.GotFillEvent">
            <summary>
            当接口有成交数据时 对外触发
            </summary>
        </member>
        <member name="E:TradingLib.BrokerXAPI.TLBrokerBase.GotOrderEvent">
            <summary>
            当接口有委托更新时 对外触发
            </summary>
        </member>
        <member name="E:TradingLib.BrokerXAPI.TLBrokerBase.GotCancelEvent">
            <summary>
            cancel acknowledgement, order is canceled
            </summary>
        </member>
        <member name="E:TradingLib.BrokerXAPI.TLBrokerBase.GotOrderErrorEvent">
            <summary>
            ordermessage acknowledgement
            </summary>
        </member>
        <member name="E:TradingLib.BrokerXAPI.TLBrokerBase.GotOrderActionErrorEvent">
            <summary>
            向外通知委托操作错误
            </summary>
        </member>
        <member name="E:TradingLib.BrokerXAPI.TLBrokerBase.GotSymbolEvent">
            <summary>
            向外通知合约回报
            </summary>
        </member>
        <member name="E:TradingLib.BrokerXAPI.TLBrokerBase.GetSymbolTickEvent">
            <summary>
            获得当前Tick的市场快照,模拟成交时需要获得当前市场快照用于进行取价操作
            </summary>
        </member>
        <member name="P:TradingLib.BrokerXAPI.TLBrokerBase.Token">
            <summary>
            获得成交接口唯一标识Token通过BrokerConfig中的Token进行标注
            </summary>
            <returns></returns>
        </member>
        <member name="P:TradingLib.BrokerXAPI.TLBrokerBase.Name">
            <summary>
            通道名称
            </summary>
        </member>
        <member name="P:TradingLib.BrokerXAPI.TLBrokerBase.VendorID">
            <summary>
            获得该通道连接的数据库全局ID,用于实现与Broker进行绑定
            </summary>
        </member>
        <member name="E:TradingLib.BrokerXAPI.TLBrokerBase.SendLogItemEvent">
            <summary>
            对外发送日志事件
            </summary>
        </member>
        <member name="P:TradingLib.BrokerXAPI.TLBrokerBase.DebugEnable">
            <summary>
            是否输出日志
            如果禁用日志 则所有日志将不对外发送
            </summary>
        </member>
        <member name="P:TradingLib.BrokerXAPI.TLBrokerBase.DebugLevel">
            <summary>
            日志输出级别
            </summary>
        </member>
        <member name="M:TradingLib.BrokerXAPI.TLBroker.Start(System.String@)">
            <summary>
            启动接口
            启动接口时,同时进行非托管资源的创建 也就是每次启动时都是新的接口实例
            </summary>
        </member>
        <member name="M:TradingLib.BrokerXAPI.TLBroker.DestoryBroker">
            <summary>
            执行对象销毁
            </summary>
        </member>
        <member name="M:TradingLib.BrokerXAPI.TLBroker.SendOrder(TradingLib.API.Order)">
            <summary>
            通过成交接口提交委托
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:TradingLib.BrokerXAPI.TLBroker.CancelOrder(System.Int64)">
            <summary>
            通过成交接口取消委托
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:TradingLib.BrokerXAPI.TLBroker.QryInstrument">
            <summary>
            查询合约
            </summary>
        </member>
        <member name="M:TradingLib.BrokerXAPI.TLBroker.GotTick(TradingLib.API.Tick)">
            <summary>
            响应市场行情
            </summary>
            <param name="k"></param>
        </member>
        <member name="M:TradingLib.BrokerXAPI.TLBroker.ProcessOrder(TradingLib.BrokerXAPI.XOrderField@)">
            <summary>
            处理接口返回的委托
            </summary>
            <param name="order"></param>
        </member>
        <member name="M:TradingLib.BrokerXAPI.TLBroker.ProcessTrade(TradingLib.BrokerXAPI.XTradeField@)">
            <summary>
            处理接口返回的成交
            </summary>
            <param name="trade"></param>
        </member>
        <member name="M:TradingLib.BrokerXAPI.TLBroker.ProcessOrderError(TradingLib.BrokerXAPI.XOrderError@)">
            <summary>
            处理接口返回的错误
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:TradingLib.BrokerXAPI.TLBroker.ProcessOrderActionError(TradingLib.BrokerXAPI.XOrderActionError@)">
            <summary>
            处理接口返回的委托操作错误
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:TradingLib.BrokerXAPI.TLBroker.OnResume">
            <summary>
            启动时登入成功后 恢复日内交易数据
            </summary>
        </member>
        <member name="M:TradingLib.BrokerXAPI.TLBroker.#ctor">
            <summary>
            
            </summary>
            <param name="libPath">接口c++DLL目录</param>
            <param name="brokerLibPath">成交接口c++DLL目录</param>
            <param name="filename">c++DLL名称</param>
        </member>
        <member name="M:TradingLib.BrokerXAPI.TLBroker.NewNotify">
            <summary>
            通知处理线程 有新的交易回报
            </summary>
        </member>
        <member name="M:TradingLib.BrokerXAPI.TLBroker.GetPositionMetric(System.String)">
            <summary>
            获得某个合约的持仓状态统计数据
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.BrokerXAPI.TLBroker.GetPositionAdjustment(TradingLib.API.Order)">
            <summary>
            返回持仓预计调整量
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="P:TradingLib.BrokerXAPI.TLBroker.Orders">
            <summary>
            获得成交接口所有委托
            </summary>
        </member>
        <member name="P:TradingLib.BrokerXAPI.TLBroker.Trades">
            <summary>
            获得成交接口所有成交
            </summary>
        </member>
        <member name="P:TradingLib.BrokerXAPI.TLBroker.Positions">
            <summary>
            获得成交接口所有持仓
            </summary>
        </member>
        <member name="P:TradingLib.BrokerXAPI.TLBroker.WorkingSymbols">
            <summary>
            返回所有处于有持仓或挂单状态的合约
            </summary>
        </member>
        <member name="P:TradingLib.BrokerXAPI.TLBroker.PositionMetrics">
            <summary>
            返回所有持仓状态统计数据
            </summary>
        </member>
        <member name="M:TradingLib.BrokerXAPI.TLDataFeedBase.SetDataFeedConfig(TradingLib.Common.ConnectorConfig)">
            <summary>
            设定接口参数
            </summary>
            <param name="cfg"></param>
        </member>
        <member name="M:TradingLib.BrokerXAPI.TLDataFeedBase.debug(System.String,TradingLib.API.QSEnumDebugLevel)">
            <summary>
            判断日志级别 然后再进行输出
            同时对外输出日志事件,用于被日志模块采集日志或分发
            </summary>
            <param name="msg"></param>
            <param name="level"></param>
        </member>
        <member name="P:TradingLib.BrokerXAPI.TLDataFeedBase.Token">
            <summary>
            获得成交接口唯一标识Token通过BrokerConfig中的Token进行标注
            </summary>
            <returns></returns>
        </member>
        <member name="P:TradingLib.BrokerXAPI.TLDataFeedBase.Name">
            <summary>
            通道名称
            </summary>
        </member>
        <member name="E:TradingLib.BrokerXAPI.TLDataFeedBase.Connected">
            <summary>
            当数据服务器登入成功后调用
            </summary>
        </member>
        <member name="E:TradingLib.BrokerXAPI.TLDataFeedBase.Disconnected">
            <summary>
            当数据服务器断开后触发事件
            </summary>
        </member>
        <member name="E:TradingLib.BrokerXAPI.TLDataFeedBase.GotTickEvent">
            <summary>
            当数据服务得到一个新的tick时调用
            </summary>
        </member>
        <member name="E:TradingLib.BrokerXAPI.TLDataFeedBase.SendLogItemEvent">
            <summary>
            对外发送日志事件
            </summary>
        </member>
        <member name="P:TradingLib.BrokerXAPI.TLDataFeedBase.DebugEnable">
            <summary>
            是否输出日志
            如果禁用日志 则所有日志将不对外发送
            </summary>
        </member>
        <member name="P:TradingLib.BrokerXAPI.TLDataFeedBase.DebugLevel">
            <summary>
            日志输出级别
            </summary>
        </member>
        <member name="T:TradingLib.BrokerXAPI.Interop.UnmanagedLibrary">
            <summary>
            Utility class to wrap an unmanaged shared lib and be responsible for freeing it.
            </summary>
            <remarks>
            This is a managed wrapper over the native LoadLibrary, GetProcAddress, and FreeLibrary calls on Windows
            and dlopen, dlsym, and dlclose on Posix environments.
            </remarks>
        </member>
        <member name="M:TradingLib.BrokerXAPI.Interop.UnmanagedLibrary.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TradingLib.BrokerXAPI.Interop.UnmanagedLibrary"/> class. Loads a dll and takes responible for freeing it.
            </summary>
            <remarks>Throws exceptions on failure. Most common failure would be file-not-found, that the file is not a loadable image.</remarks>
            <param name="fileName">full path name of dll to load</param>
            <exception cref="T:System.IO.FileNotFoundException">if fileName can't be found</exception>
        </member>
        <member name="M:TradingLib.BrokerXAPI.Interop.UnmanagedLibrary.GetUnmanagedFunction``1(System.String)">
            <summary>
            Dynamically look up a function in the dll via kernel32!GetProcAddress or libdl!dlsym.
            </summary>
            <typeparam name="TDelegate">Delegate type to load</typeparam>
            <param name="functionName">Raw name of the function in the export table.</param>
            <returns>A delegate to the unmanaged function.</returns>
            <exception cref="T:System.MissingMethodException">Thrown if the given function name is not found in the library.</exception>
            <remarks>
            GetProcAddress results are valid as long as the dll is not yet unloaded. This
            is very very dangerous to use since you need to ensure that the dll is not unloaded
            until after you're done with any objects implemented by the dll. For example, if you
            get a delegate that then gets an IUnknown implemented by this dll,
            you can not dispose this library until that IUnknown is collected. Else, you may free
            the library and then the CLR may call release on that IUnknown and it will crash.
            </remarks>
        </member>
        <member name="M:TradingLib.BrokerXAPI.Interop.UnmanagedLibrary.NullifyInvalidHandle(TradingLib.BrokerXAPI.Interop.SafeLibraryHandle)">
            <summary>
            如果handle 无效则返回null
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.BrokerXAPI.Interop.UnmanagedLibrary.LoadFromPath(System.String,System.String)">
            <summary>
            从系统文件路径加载
            </summary>
            <returns></returns>
        </member>
        <member name="T:TradingLib.BrokerXAPI.Interop.TLBrokerWrapperProxy">
            <summary>
            TLBrokerWrapper封装Proxy用于注入具体的Broker插件,形成通用的调用层
            </summary>
        </member>
        <member name="M:TradingLib.BrokerXAPI.Interop.TLBrokerWrapperProxy.AssignCommonDelegates">
            <summary>
            绑定dll导出的函数到对应的委托对象
            </summary>
        </member>
        <member name="T:TradingLib.BrokerXAPI.Interop.TLBrokerWrapperProxy.CreateBrokerWrapperProc">
            <summary>
            创建BrokerWrapper调用
            </summary>
            <returns></returns>
        </member>
        <member name="T:TradingLib.BrokerXAPI.Interop.TLBrokerWrapperProxy.RegisterProc">
            <summary>
            注册具体的Broker调用
            </summary>
            <returns></returns>
        </member>
        <member name="T:TradingLib.BrokerXAPI.Interop.TLBrokerWrapperProxy.ConnectProc">
            <summary>
            连接服务器调用
            </summary>
            <param name="pServerInfo"></param>
        </member>
        <member name="T:TradingLib.BrokerXAPI.Interop.TLBrokerWrapperProxy.DisconnectProc">
            <summary>
            断开服务端连接
            </summary>
            <param name="pWrappero"></param>
        </member>
        <member name="T:TradingLib.BrokerXAPI.Interop.TLBrokerWrapperProxy.LoginProc">
            <summary>
            登入操作
            </summary>
            <param name="pWrapper"></param>
            <param name="pUserInfo"></param>
        </member>
        <member name="T:TradingLib.BrokerXAPI.Interop.TLBrokerWrapperProxy.SendOrderProc">
            <summary>
            提交委托
            </summary>
            <param name="pWrapper"></param>
            <param name="pOrder"></param>
        </member>
        <member name="T:TradingLib.BrokerXAPI.Interop.TLBrokerWrapperProxy.RegOnConnectedProc">
            <summary>
            注册连接建立回调
            </summary>
            <param name="pWrapper"></param>
            <param name="cb"></param>
        </member>
        <member name="T:TradingLib.BrokerXAPI.Interop.TLBrokerWrapperProxy.RegOnDisconnectedProc">
            <summary>
            注册连接建立回调
            </summary>
            <param name="pWrapper"></param>
            <param name="cb"></param>
        </member>
        <member name="T:TradingLib.BrokerXAPI.Interop.TLBrokerWrapperProxy.RegOnLoginProc">
            <summary>
            注册登入回调
            </summary>
            <param name="pWrapper"></param>
            <param name="cb"></param>
        </member>
        <member name="T:TradingLib.BrokerXAPI.Interop.TLBrokerWrapperProxy.RegRtnTradeProc">
            <summary>
            注册成交回报回调
            </summary>
            <param name="cb"></param>
        </member>
        <member name="T:TradingLib.BrokerXAPI.Interop.TLBrokerWrapperProxy.RegRtnOrderProc">
            <summary>
            注册委托回报回调
            </summary>
            <param name="pWrapper"></param>
            <param name="cb"></param>
        </member>
        <member name="T:TradingLib.BrokerXAPI.Interop.TLBrokerWrapperProxy.RegRtnOrderErrorProc">
            <summary>
            注册委托错误回调
            </summary>
            <param name="pWrapper"></param>
            <param name="cb"></param>
        </member>
        <member name="T:TradingLib.BrokerXAPI.Interop.TLBrokerWrapperProxy.RegRtnOrderActionErrorProc">
            <summary>
            注册委托操作错误回调
            </summary>
            <param name="pWrapper"></param>
            <param name="cb"></param>
        </member>
        <member name="T:TradingLib.BrokerXAPI.Interop.TLBrokerWrapperProxy.RegOnSymbolProc">
            <summary>
            注册合约回调
            </summary>
            <param name="pWrapper"></param>
            <param name="cb"></param>
        </member>
        <member name="M:TradingLib.BrokerXAPI.Interop.Platform.OpenHandle(System.String)">
            <summary>
            加载一个外部dll
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.BrokerXAPI.Interop.Platform.LoadProcedure(TradingLib.BrokerXAPI.Interop.SafeLibraryHandle,System.String)">
            <summary>
            加载一个函数
            </summary>
            <param name="handle"></param>
            <param name="functionName"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.BrokerXAPI.Interop.Platform.ReleaseHandle(System.IntPtr)">
            <summary>
            释放到一个外部dll
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.BrokerXAPI.Interop.Platform.GetLastLibraryError">
            <summary>
            获得上一次操作异常
            </summary>
            <returns></returns>
        </member>
        <member name="T:TradingLib.BrokerXAPI.Interop.SafeLibraryHandle">
            <summary>
            Safe handle for unmanaged libraries. See http://msdn.microsoft.com/msdnmag/issues/05/10/Reliability/ for more about safe handles.
            </summary>
        </member>
        <member name="T:TradingLib.BrokerXAPI.CBOnConnected">
            <summary>
            连接建立回调委托
            </summary>
        </member>
        <member name="T:TradingLib.BrokerXAPI.CBOnDisconnected">
            <summary>
            连接断开回调委托
            </summary>
        </member>
        <member name="T:TradingLib.BrokerXAPI.CBOnLogin">
            <summary>
            登入回调委托
            </summary>
            <param name="pRspUserLogin"></param>
        </member>
        <member name="T:TradingLib.BrokerXAPI.CBRtnTrade">
            <summary>
            成交回调委托
            </summary>
            <param name="pTrade"></param>
        </member>
        <member name="T:TradingLib.BrokerXAPI.CBRtnOrder">
            <summary>
            委托回调委托
            </summary>
            <param name="pOrder"></param>
        </member>
        <member name="T:TradingLib.BrokerXAPI.CBRtnOrderError">
            <summary>
            委托错误回调委托
            </summary>
            <param name="pOrder"></param>
            <param name="pError"></param>
        </member>
        <member name="T:TradingLib.BrokerXAPI.CBRtnOrderActionError">
            <summary>
            委托操作错误回调委托
            </summary>
            <param name="pOrderAction"></param>
            <param name="pError"></param>
        </member>
        <member name="T:TradingLib.BrokerXAPI.CBOnSymbol">
            <summary>
            合约查询回调委托
            </summary>
            <param name="pSymbolField"></param>
            <param name="islast"></param>
        </member>
        <member name="M:TradingLib.BrokerXAPI.XAPIHelper.ValidBrokerInterface(System.String,System.String,System.String,System.String)">
            <summary>
            验证配置文件是否正确 是否可以正常加载对应接口
            </summary>
            <param name="brokerPath"></param>
            <param name="brokerName"></param>
            <param name="wrapperPath"></param>
            <param name="wrapperName"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.BrokerXAPI.XAPIHelper.GenServerInfo(TradingLib.Common.ConnectorConfig)">
            <summary>
            由BrokerConfig生成服务端连接信息
            </summary>
            <param name="cfg"></param>
            <returns></returns>
        </member>
        <member name="M:TradingLib.BrokerXAPI.XAPIHelper.GenUserInfo(TradingLib.Common.ConnectorConfig)">
            <summary>
            由BrokerConfig生成登入信息
            </summary>
            <param name="cfg"></param>
            <returns></returns>
        </member>
        <member name="T:TradingLib.BrokerXAPI.Interop.TLBrokerProxy">
            <summary>
            某个具体的Broker的封装Proxy
            </summary>
        </member>
        <member name="M:TradingLib.BrokerXAPI.Interop.TLBrokerProxy.AssignCommonDelegates">
            <summary>
            绑定dll导出的函数到对应的委托对象
            </summary>
        </member>
        <member name="T:TradingLib.BrokerXAPI.Interop.TLBrokerProxy.CreateBrokerProc">
            <summary>
            无参数调用
            </summary>
            <returns></returns>
        </member>
        <member name="T:TradingLib.BrokerXAPI.XErrorField">
            <summary>
            错误消息结构体
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XErrorField.ErrorID">
            <summary>
            错误代码
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XErrorField.ErrorMsg">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="T:TradingLib.BrokerXAPI.XServerInfoField">
            <summary>
            服务端连接信息结构体
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XServerInfoField.ServerAddress">
            <summary>
            服务地址
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XServerInfoField.ServerPort">
            <summary>
            服务端口
            </summary>
        </member>
        <member name="T:TradingLib.BrokerXAPI.XUserInfoField">
            <summary>
            登入信息结构体
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XUserInfoField.UserID">
            <summary>
            登入用户名
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XUserInfoField.Password">
            <summary>
            登入密码
            </summary>
        </member>
        <member name="T:TradingLib.BrokerXAPI.XRspUserLoginField">
            <summary>
            登入回报结构体
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XRspUserLoginField.Tradingday">
            <summary>
            当前交易日
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XRspUserLoginField.UserID">
            <summary>
            登入用户名
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XRspUserLoginField.Field1">
            <summary>
            预留字段1
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XRspUserLoginField.Field2">
            <summary>
            预留字段2
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XRspUserLoginField.ErrorID">
            <summary>
            错误代码
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XRspUserLoginField.ErrorMsg">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="T:TradingLib.BrokerXAPI.XOrderField">
            <summary>
            委托结构体
            .net mono 默认对齐是2字节对齐
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XOrderField.Date">
            <summary>
            日期
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XOrderField.Time">
            <summary>
            时间
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XOrderField.TotalSize">
            <summary>
            委托数量
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XOrderField.FilledSize">
            <summary>
            成交数量
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XOrderField.UnfilledSize">
            <summary>
            未成交数量
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XOrderField.LimitPrice">
            <summary>
            limit价格
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XOrderField.StopPrice">
            <summary>
            stop价格
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XOrderField.Symbol">
            <summary>
            合约
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XOrderField.Exchange">
            <summary>
            交易所
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XOrderField.StatusMsg">
            <summary>
            委托状态消息
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XOrderField.ID">
            <summary>
            系统唯一委托编号
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XOrderField.BrokerLocalOrderID">
            <summary>
            向远端发单时 生成的本地OrderRef 比如CTP 
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XOrderField.BrokerRemoteOrderID">
            <summary>
            远端交易所返回的编号
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XOrderField.OffsetFlag">
            <summary>
            开平标识
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XOrderField.OrderStatus">
            <summary>
            委托状态
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XOrderField.Side">
            <summary>
            方向 //400
            </summary>
        </member>
        <member name="T:TradingLib.BrokerXAPI.XOrderActionField">
            <summary>
            委托操作
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XOrderActionField.Size">
            <summary>
            未成交数量
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XOrderActionField.Price">
            <summary>
            价格
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XOrderActionField.ID">
            <summary>
            本地系统委托编号
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XOrderActionField.BrokerLocalOrderID">
            <summary>
            相对于成交端 本地编号
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XOrderActionField.BrokerRemoteOrderID">
            <summary>
            交易所委托编号
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XOrderActionField.Exchange">
            <summary>
            交易所
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XOrderActionField.Symbol">
            <summary>
            合约
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XOrderActionField.ActionFlag">
            <summary>
            委托操作标识
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XTradeField.Date">
            <summary>
            日期
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XTradeField.Time">
            <summary>
            时间
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XTradeField.Size">
            <summary>
            成交手数
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XTradeField.Price">
            <summary>
            成交价格
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XTradeField.Commission">
            <summary>
            手续费
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XTradeField.Symbol">
            <summary>
            合约
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XTradeField.Exchange">
            <summary>
            交易所
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XTradeField.BrokerTradeID">
            <summary>
            成交编号
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XTradeField.BrokerLocalOrderID">
            <summary>
            近端委托编号
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XTradeField.BrokerRemoteOrderID">
            <summary>
            远端委托编号
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XTradeField.OffsetFlag">
            <summary>
            开平标识
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XTradeField.Side">
            <summary>
            方向
            </summary>
        </member>
        <member name="T:TradingLib.BrokerXAPI.XSymbol">
            <summary>
            合约结构体 用于传递合约信息
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XSymbol.Symbol">
            <summary>
            合约
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XSymbol.Exchange">
            <summary>
            交易所
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XSymbol.SecurityCode">
            <summary>
            品种代码
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XSymbol.SecurityType">
            <summary>
            品种类型
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XSymbol.OptionSide">
            <summary>
            行权方向
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XSymbol.StrikePrice">
            <summary>
            执行价
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XSymbol.Margin">
            <summary>
            保证金 额度或比例
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XSymbol.EntryCommission">
            <summary>
            开仓手续费
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XSymbol.ExitCommission">
            <summary>
            平仓手续费
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XSymbol.ExitTodayCommission">
            <summary>
            平今手续费
            </summary>
        </member>
        <member name="F:TradingLib.BrokerXAPI.XSymbol.ExpireDate">
            <summary>
            到期日
            </summary>
        </member>
    </members>
</doc>
